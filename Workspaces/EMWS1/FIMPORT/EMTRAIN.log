MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:08:55" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 27, 2015
Time:                13:08:55
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1H0Z5DA "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1H0Z5DA new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:08:55" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:08:55" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20947      proc freq data=EMWS1.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.FIMPORT_VariableSet noprint;
20948      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
20949      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.17 seconds
      cpu time            0.06 seconds
      

20950      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
20951      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20952      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20953      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20954      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20955      run;

NOTE: There were 3 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.14 seconds
      cpu time            0.06 seconds
      

20956      title10;
MPRINT(EM_DIAGRAM):   title10;
20957      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_2';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_1';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21277      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21278      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21279      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21280      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21281      %let EMEXCEPTIONSTRING=;
21282      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21283      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21284      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21285      %let EM_ACTION = TRAIN;
21286      %let syscc = 0;
21287      /* Fimport.source */
21288      %macro main;
21289            %if %upcase(&EM_ACTION) = CREATE %then %do;
21290               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21291               %include temp;
21292               filename temp;
21293               %create;
21294            %end;
21295            %else
21296            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21297               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21298               %include temp;
21299               filename temp;
21300               %train;
21301            %end;
21302            %else
21303            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21304               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21305               %include temp;
21306               filename temp;
21307               %update;
21308            %end;
21309            %else
21310            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21311               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21312               %include temp;
21313               filename temp;
21314               %property;
21315            %end;
21316             %else
21317            %if %upcase(&EM_ACTION) = SCORE %then %do;
21318               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21319               %include temp;
21320               filename temp;
21321               %score;
21322            %end;
21323            %else
21324            %if %upcase(&EM_ACTION) = REPORT %then %do;
21325               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21326               %include temp;
21327               filename temp;
21328               %report;
21329            %end;
21330            %else
21331            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21332               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21333               %include temp;
21334               filename temp;
21335               %openvariableset;
21336            %end;
21337            %else
21338            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21339               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21340               %include temp;
21341               filename temp;
21342               %closevariableset;
21343            %end;
21344      %mend main;
21345      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21346     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21347     +%macro appendExt;
21348     +   data _null_;
21349     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21350     +      rfile = reverse(tempuif);
21351     +      period = indexc(rfile,".");
21352     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21353     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21354     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21355     +   run;
21356     +%mend appendExt;
21358     +%macro getNobs(ds);
21359     + %global dset nobs;
21360     + %let dset=&ds;
21361     + %let dsid = %sysfunc(open(&dset));
21362     + %if &dsid %then %do;
21363     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21364     +      %let rc = %sysfunc(close(&dsid));
21365     +   %end;
21366     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21367     +%mend getNobs;
21368     +%macro keepordrop;
21369     +  proc contents data=work.importfile noprint
21370     +  out=work.importattrs;
21371     +  run;
21372     +  %getNobs(work.importattrs);
21373     +  data _null_;
21374     +    set  work.importattrs;
21375     +    call symput("varname"||left(_n_),name);
21376     +  run;
21378     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21379     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21380     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21381     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21382     +     %put diff=&diff;
21383     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21384     +         %let kORd = keep;
21385     +             %let start=1;
21386     +             %let end = &EM_PROPERTY_MAXCOLS;
21387     +       %end;
21388     +     %else %do;
21389     +         %let kORd = drop;
21390     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21391     +             %let end = &nobs;
21392     +       %end;
21393     +     data &em_user_data;
21394     +        set &em_user_data;
21395     +        &kORd
21396     +        %do i = &start %to &end;
21397     +            &&varname&i
21398     +         %end;
21399     +        ;
21400     +     run;
21401     +%end;
21402     +%mend keepordrop;
21403     +%macro dropformatvars;
21404     +   %put fmtcnt=&fmtcnt;
21405     +   data new;
21406     +     set work.importfile;
21407     +     %do i = 1 %to &fmtcnt;
21408     +       x1zy&i =put(&&varname&i,&&fmt&i);
21409     +     %end;
21410     +   run;
21411     +   data new;
21412     +     set new;
21413     +     drop
21414     +     %do i = 1 %to &fmtcnt;
21415     +     &&varname&i
21416     +     %end;
21417     +     ;
21418     +   run;
21419     +   proc datasets library=work nolist;
21420     +     modify new;
21421     +     %do i = 1 %to &fmtcnt;
21422     +     rename x1zy&i=&&varname&i;
21423     +     %end;
21424     +   run; quit;
21425     +   data work.importfile;
21426     +     set new;
21427     +   run;
21428     +%mend;
21430     +%macro procimport(out=);
21431     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21432     +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
21433     +         out=&out
21434     +         dbms = ACCESS
21435     +         replace;
21436     +         database="%trim(&_IFILENAME)"
21437     +   %end;
21438     +   %else %do;
21439     +       proc import datafile="%trim(&_IFILENAME)"
21440     +          out=&out
21442     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21443     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21444     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21445     +         dbms=&EM_PROPERTY_FILETYPE
21446     +      %end;
21447     +      %else %do;
21448     +         dbms=TAB
21449     +      %end;
21450     +      /* Work around for the following defects:S0560899 and S0560009.   */
21451     +      %let sasEnv=%sysfunc(getlocenv());
21452     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21453     +         dbms=EXCEL
21454     +      %end;
21456     +      replace;
21457     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21458     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21459     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21460     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21461     +            getnames=&EM_PROPERTY_NAMEROW;
21462     +        %end;
21463     +      %end;
21464     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21465     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21466     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21467     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21468     +               delimiter=" ";
21469     +            %end;
21470     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21471     +               /* Do not specifiy a delimiter */
21472     +            %end;
21473     +            %else %do;
21474     +               delimiter="&EM_PROPERTY_DELIMITER";
21475     +            %end;
21476     +         %end;
21477     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21478     +            datarow=&EM_PROPERTY_SKIPROWS;
21479     +            /* Guessingrows must be >= skiprows */
21480     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21481     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21482     +            %end;
21483     +         %end;
21484     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21485     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21486     +         %end;
21487     +       %end;
21488     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21489     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21490     +            FMTLIB = work.formats;
21491     +      %end;
21492     +   %end;
21493     +   run;
21494     +%mend procimport;
21496     +%macro train;
21498     +   %let vvnString = %sysfunc(getoption(validvarname));
21500     +   %em_getname(key=DATA,           type=DATA);
21501     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21502     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21503     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21505     +   %appendExt;
21507     +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
21508     +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21509     +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
21510     +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
21511     +   %end;
21513     +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
21514     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
21515     +       %goto endtrain;
21516     +   %end;
21518     +   options validvarname=ANY;
21519     +   %procimport(out=work.importfile);
21521     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21522     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21523     +      %global fmtcnt;
21524     +      %let fmtcnt=0;
21525     +      proc contents data=work.importfile out=work.impattrs noprint;
21526     +      run;
21527     +      data _null_;
21528     +        set work.impattrs;
21529     +        if _n_=1 then i=0;
21530     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21531     +           i = i+1;
21532     +           varname = substr(name, 1, length(name));
21533     +           call symput("fmt"||left(i), trim(format)||".");
21534     +           call symput("varname"||left(i), varname);
21535     +           call symput("fmtcnt",left(i));
21536     +      end;
21537     +      retain i;
21538     +     run;
21539     +    %if &fmtcnt > 0 %then %do;
21540     +       %dropformatvars;
21541     +    %end;
21542     +    proc datasets lib=work memtype=data nolist;
21543     +        modify importfile;
21544     +        attrib _all_ format=;
21545     +    run;
21546     +    quit;
21547     +   %end;
21549     +   %let _fimportObs  = 0;
21550     +   %let _fimportVars = 0;
21551     +   %if %sysfunc(exist(work.importFile)) %then %do;
21552     +       %let dsid = %sysfunc(open(work.importFile));
21553     +       %if &dsid %then %do;
21554     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21555     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21556     +       %let dsid = %sysfunc(close(&dsid));
21557     +       %end;
21558     +   %end;
21560     +   %if ^&_fimportObs %then %do;
21561     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21562     +       %goto endtrain;
21563     +   %end;
21564     +   %if ^&_fimportVars %then %do;
21565     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21566     +       %goto endtrain;
21567     +   %end;
21569     +   data &em_user_data;
21570     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21571     +   run;
21572     +   %keepordrop;
21574     +   %em_getname(key=EMSTAT,     type=DATA);
21576     +   proc datasets lib=&em_lib nolist;
21577     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21578     +   run;
21580     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21581     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21582     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21583     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21584     +            maxClassLevels=20, identifyEmptyColumns=Y,
21585     +            outdata=&em_user_EMCMETADEFAULT,
21586     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21588     +        data &em_user_emcmetadefault;
21589     +           set &em_user_emcmetadefault;
21590     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21591     +        run;
21593     +        data &em_data_eminfo;
21594     +           length TARGET KEY $32  DATA $43;
21595     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21596     +        run;
21598     +        %let EM_META_ADVISOR=ADVANCED;
21600     +   %end;
21601     +   %else %do;
21602     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21603     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21604     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21605     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21607     +            %if "&em_property_summarize" eq "Y" %then %do;
21608     +                %em_getname(key=EMSTAT,  type=DATA);
21609     +                data &em_data_eminfo;
21610     +                   length TARGET KEY $32  DATA $43;
21611     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21612     +                run;
21613     +            %end;
21615     +        %let EM_META_ADVISOR=BASIC;
21617     +   %end;
21619     +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
21620     +   data _null_;
21621     +      fname = '_text';
21622     +      rc=filename(fname, "&em_user_vvnlabel");
21623     +      if ^rc and fexist(fname) then
21624     +         rc=fdelete(fname);
21625     +     rc=filename(fname);
21626     +   run;
21629     +   /* Validvarname Case */
21630     +   %let newNameFlag = 0;
21631     +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
21632     +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
21633     +        %if &dsid %then %do;
21634     +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
21635     +            %let dsid = %sysfunc(close(&dsid));
21636     +       %end;
21637     +   %end;
21639     +   %if %sysevalf(&newNameFlag>0) %then %do;
21640     +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
21641     +       run;
21642     +       proc sort data=work._any; by VARNUM; run; quit;
21644     +       options validvarname=V7;
21646     +       %procimport(out=work.importfile2);
21648     +       options validvarname=ANY;
21650     +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
21651     +       run;
21652     +       proc sort data=work._v7; by varnum; run; quit;
21654     +       filename _FI "&em_user_vvnlabel";
21655     +       data work._names;
21656     +          length string $200;
21657     +          merge work._v7 work._any;
21658     +          by VARNUM;
21659     +          file _FI;
21660     +          if V7NAME ne NAME then do;
21661     +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
21662     +             put string;
21663     +             if LABEL eq '' then do;
21664     +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
21665     +                put string;
21666     +             end;
21667     +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
21668     +             put string;
21669     +          end;
21670     +          drop string;
21671     +       run;
21672     +       data &em_user_data;
21673     +          set &em_user_data;
21674     +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
21675     +              filename _FI "&em_user_vvnlabel";
21676     +              %inc _FI;
21677     +             filename _FI;
21678     +          %end;
21679     +       run;
21681     +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
21682     +       proc sort data=work._names;             by NAME; run;
21684     +       data &em_user_EMCMETADEFAULT;
21685     +         merge  &em_user_EMCMETADEFAULT _names;
21686     +         by NAME;
21687     +         length DROP $1;
21688     +         DROP='N';
21689     +         if NEWNAME ne NAME then do;
21690     +            if LABEL eq '' then do;
21691     +               LABEL = NAME;
21692     +            end;
21693     +            NAME=V7NAME;
21694     +         end;
21695     +         drop NEWNAME V7NAME VARNUM;
21696     +       run;
21698     +       proc datasets lib=work nolist;
21699     +          delete _any _v7 _names importfile2;
21700     +       run;
21701     +       quit;
21703     +   %end;
21704     +   %else %do;
21705     +       data &em_user_EMCMETADEFAULT;
21706     +          set &em_user_EMCMETADEFAULT;
21707     +          length DROP $1;
21708     +          DROP='N';
21709     +       run;
21710     +   %end;
21712     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
21714     +   data _temp;
21715     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
21716     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
21717     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
21718     +      COLUMNMETAMODTIME=MODTIME;
21719     +   run;
21720     +   proc sort data=&em_data_importset;
21721     +      by PORT;
21722     +   run;
21723     +   data &em_data_importset;
21724     +      merge &em_data_importset _temp;
21725     +      by PORT;
21726     +      if PORT='DATA' then ROLE="&em_property_role";
21727     +   run;
21729     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21731     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21732     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
21733     +            filename x "&em_user_variablesetdelta";
21734     +            data &em_data_variableset;
21735     +               set &em_user_emcmetadefault;
21736     +               %inc X;
21737     +            run;
21738     +            filename x;
21739     +        %end;
21740     +        %else %do;
21741     +            data &em_data_variableset;
21742     +               set &em_user_emcmetadefault;
21743     +            run;
21744     +        %end;
21745     +    %end;
21747     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
21748     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
21749     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
21750     +         id NAME;
21751     +      run;
21753     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
21754     +         data _null_;
21755     +            length string $200;
21756     +            set _DiffMeta end=eof;
21757     +            where _type_='COMPARE';
21758     +            file x1;
21759     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21760     +            put string;
21761     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21762     +            put string;
21763     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21764     +            put string;
21765     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21766     +            put string;
21767     +            put 'end;';
21768     +            if drop='Y' then do;
21769     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
21770     +               put string;
21771     +            end;
21772     +            if eof then
21773     +               put 'drop DROP;';
21774     +         run;
21776     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
21777     +         filename x2 "&em_user_deltacode";
21778     +         %em_copyfile(infref=x1, outfref=x2);
21779     +         filename x1;
21780     +         filename x2;
21782     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
21783     +         filename x "&em_user_variablesetdelta";
21784     +         data _null_;
21785     +            length string $200;
21786     +            set _DiffMeta end=eof;
21787     +            where _type_='COMPARE';
21788     +            file x;
21789     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
21790     +            put string;
21791     +            string = '   ROLE="'!!strip(ROLE)!!'";';
21792     +            put string;
21793     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
21794     +            put string;
21795     +            string = '   ORDER="'!!strip(ORDER)!!'";';
21796     +            put string;
21797     +            string = '   DROP="'!!strip(DROP)!!'";';
21798     +            put string;
21799     +            put 'end;';
21800     +         run;
21801     +         filename x;
21802     +       proc datasets lib=work nolist;
21803     +          delete _DiffMeta;
21804     +       run;
21806     +       data &em_data_exportset;
21807     +          set &em_data_exportset;
21808     +          if NODEPORT='TRAIN' then do;
21809     +             ROLE="&em_property_role";
21810     +             COLUMNMETAMODTIME=datetime();
21811     +             MODTIME=datetime();
21812     +             DATASET="&em_nodeid._train";
21813     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
21814     +             DELTACODE="CDelta_TRAIN";
21815     +             APPLYDELTA='Y';
21816     +             EXPORT='Y';
21817     +             NEEDUPDATE='Y';
21819     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
21820     +                EMINFO="&em_data_eminfo";
21821     +                EMINFOMODTIME=datetime();
21822     +            %end;
21823     +            %else %do;
21824     +                EMINFO='';
21825     +                EMINFOMODTIME=.;
21826     +            %end;
21827     +          end;
21828     +       run;
21829     +   %end;
21831     +  proc contents data=&em_user_data;
21832     +  run;
21833     +  proc datasets library=work nolist;
21834     +   delete importfile importattrs new;
21835     +   quit;
21836     +  run;
21838     +  /* Reset VALIDVARNAME to original settings */
21839     +  options validvarname=&vvnString;
21841     +  %endtrain:
21842     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*xlsx*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.xlsx" out=work.importfile dbms=xlsx replace;
MPRINT(PROCIMPORT):   RXLX;
MPRINT(PROCIMPORT):   run;

NOTE: The import data set has 20 observations and 7 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 20 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT_DATA has 20 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 7 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 7 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=7  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS1.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

21843      %let SYSCC = 0;
21844      %let _dsidTable = 0;
21845      %let _engineTable =;
21846      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
21847      dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.FIMPORT_DATA');
21848      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
21849      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
21850      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
21851      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
21852      end;
MPRINT(EMADVISECOLUMNS):   end;
21853      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21854      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
21855      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
21856      set EMWS1.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS1.FIMPORT_DATA;
21857      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
21858      output;
MPRINT(EMADVISECOLUMNS):   output;
21859      stop;
MPRINT(EMADVISECOLUMNS):   stop;
21860      end;
MPRINT(EMADVISECOLUMNS):   end;
21861      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21862      proc contents data=EMWS1.FIMPORT_DATA
21863      out=WORK.M0VNTI91 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.FIMPORT_DATA out=WORK.M0VNTI91 noprint;
21864      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M0VNTI91 has 7 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21865      data WORK.M0VNTI91;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VNTI91;
21866      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
21867      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
21868      set WORK.M0VNTI91(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M0VNTI91(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
21869      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
21870      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
21871      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
21872      if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21873      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
21874      end;
MPRINT(EMADVISECOLUMNS):   end;
21875      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
21876      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
21877      if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21878      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
21879      end;
MPRINT(EMADVISECOLUMNS):   end;
21880      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
21881      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
21882      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
21883      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
21884      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
21885      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 7 observations read from the data set WORK.M0VNTI91.
NOTE: The data set WORK.M0VNTI91 has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21886      data WORK.M0VNTI91;
MPRINT(EMADVISECOLUMNS):    data WORK.M0VNTI91;
21887      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
21888      set WORK.M0VNTI91;
MPRINT(EMADVISECOLUMNS):   set WORK.M0VNTI91;
21889      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
21890      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 7 observations read from the data set WORK.M0VNTI91.
NOTE: The data set WORK.M0VNTI91 has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M04DFHWU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
21894      data WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):    data WORK.M04DFHWU;
21895      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
21896      set WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   set WORK.M04DFHWU;
21897      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 7 observations read from the data set WORK.M04DFHWU.
NOTE: The data set WORK.M04DFHWU has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M0UMMALH(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   set WORK.M04DFHWU;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.51 seconds
      cpu time            0.50 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   fname = '_text';
MPRINT(TRAIN):   rc=filename(fname, "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas");
MPRINT(TRAIN):   if ^rc and fexist(fname) then rc=fdelete(fname);
MPRINT(TRAIN):   rc=filename(fname);
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;

NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

22136      %let SYSCC = 0;
22137      data EMWS1.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS1.FIMPORT_EMTMETADEFAULT;
22138      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
22139      LIBNAME = "EMWS1";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS1";
22140      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS1.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M33X44MB;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M33X44MB(obs=1);
MPRINT(EMADVISETABLE):   nobs = 20;
MPRINT(EMADVISETABLE):   ncols = 7;
MPRINT(EMADVISETABLE):   nbytes = 66560;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1761570537.082;
MPRINT(EMADVISETABLE):   modate = 1761570537.082;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS1.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt.
22169     +if NAME="WidgBuy" then do;
MPRINT(TRAIN):   if NAME="WidgBuy" then do;
22170     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
22171     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
22172     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22173     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22174     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_VARIABLESET has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS1.FIMPORT_VariableSet base=EMWS1.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 2 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Oct2015:13:08:58,
      Create Time=27Oct2015:13:03:49

NOTE: 6 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 26.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=27Oct2015:13:08:58,
      Create Time=27Oct2015:13:06:07

NOTE: 6 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 26.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27Oct2015:13:08:58,
      Create Time=27Oct2015:13:06:07

NOTE: 6 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 26.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   run;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22175      *------------------------------------------------------------*;
22176      * End TRAIN: FIMPORT;
22177      *------------------------------------------------------------*;

22178      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22179      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22180      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22181      ;
MPRINT(EM_DIAGRAM):   ;
22182      ;
MPRINT(EM_DIAGRAM):   ;
22183      ;
MPRINT(EM_DIAGRAM):   ;
22184      ;
MPRINT(EM_DIAGRAM):   ;
22185      quit;
MPRINT(EM_DIAGRAM):   quit;
22186      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22187      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22188      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22189      /*; *"; *'; */
22190      ;
MPRINT(EM_DIAGRAM):   ;
22191      run;
MPRINT(EM_DIAGRAM):   run;
22192      quit;
MPRINT(EM_DIAGRAM):   quit;
22193      /* Reset EM Options */
22194      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22195      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22196      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
