MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:25:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 27, 2015
Time:                13:25:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O06KOCM6 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O06KOCM6 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:25:28" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 27, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:25:28" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21943      proc freq data=EMWS1.Report_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Report_VariableSet noprint;
21944      table ROLE*LEVEL/out=WORK.ReportMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReportMETA;
21945      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set EMWS1.REPORT_VARIABLESET.
NOTE: The data set WORK.REPORTMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

21946      proc print data=WORK.ReportMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReportMETA label noobs;
21947      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21948      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21949      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21950      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21951      run;

NOTE: There were 8 observations read from the data set WORK.REPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

21952      title10;
MPRINT(EM_DIAGRAM):   title10;
21953      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_2';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_1';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22307      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22308      * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
22309      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
22310      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

22311      %let EMEXCEPTIONSTRING=;
22312      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22313      * TRAIN: Report;
MPRINT(EM_DIAGRAM):   * TRAIN: Report;
22314      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22315      %let EM_ACTION = TRAIN;
22316      %let syscc = 0;
22317      %macro main;
22318      
22319        filename temp catalog 'sashelp.emutil.reporter_macros.source';
22320        %include temp;
22321        filename temp;
22322      
22323        %setProperties;
22324      
22325        %if %upcase(&EM_ACTION) = CREATE %then %do;
22326          filename temp catalog 'sashelp.emutil.reporter_create.source';
22327          %include temp;
22328          filename temp;
22329      
22330          %create;
22331        %end;
22332      
22333         %else
22334         %if %upcase(&EM_ACTION) = TRAIN %then %do;
22335      
22336             filename temp catalog 'sashelp.emutil.reporter_train.source';
22337             %include temp;
22338             filename temp;
22339             %train;
22340         %end;
22341      
22342         %doendm:
22343      %mend main;
22344      
22345      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
22348     +%macro SetProperties;
22350     +     /* reporting options */
22351     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
22352     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
22353     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
22354     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
22356     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
22357     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
22358     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
22359     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
22360     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
22361     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
22362     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
22364     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
22366     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
22367     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
22368     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
22369     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
22371     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAIN.SOURCE.
22372     +
22373     +%macro train();
22374     +
22375     +    filename temp catalog 'sashelp.emutil.reporter_trainmacros.source'; %include temp; filename temp;
22376     +    filename temp catalog 'sashelp.emrpm.em_modelprops.source';         %include temp; filename temp;
22377     +
22378     +    /* Initialize property macro variables */
22379     +    %SetProperties;
22380     +
22381     +    /* if pdf or rtf files exist, delete these prior to recreating report */
22382     +    %EM_GETNAME(key=REPORT, type=FILE, extension=pdf);
22383     +    filename pdffile "&EM_USER_REPORT";
22384     +    %if %sysfunc(fexist(pdffile)) %then %do;
22385     +        %let rc = %sysfunc(fdelete(pdffile));
22386     +    %end;
22387     +    filename pdffile;
22388     +
22389     +    %EM_GETNAME(key=REPORT, type=FILE, extension=rtf);
22390     +    filename rtffile "&EM_USER_REPORT";
22391     +    %if %sysfunc(fexist(rtffile)) %then %do;
22392     +        %let rc = %sysfunc(fdelete(rtffile));
22393     +    %end;
22394     +    filename rtffile;
22395     +
22396     +    /* create report */
22397     +
22398     +    %EM_REPORT_CREATE(
22399     +        path        = &EM_NODEDIR,
22400     +        lib         = &EM_LIB,
22401     +        startnodeid = &EM_NODEID,
22402     +        showall     = &EM_PROPERTY_SHOWALL,
22403     +        nodes       = &EM_PROPERTY_NODES,
22404     +        format      = &EM_PROPERTY_FORMAT,
22405     +        style       = &EM_PROPERTY_STYLE
22406     +    );
22407     +
22408     +    %if &EMEXCEPTIONSTRING ne %then %do; %goto doendm; %end;
22409     +
22410     +    %EM_REPORT_RESULTS(
22411     +        path        = &EM_NODEDIR,
22412     +        lib         = &EM_LIB,
22413     +        startnodeid = &EM_NODEID,
22414     +        showall     = &EM_PROPERTY_SHOWALL,
22415     +        nodes       = &EM_PROPERTY_NODES,
22416     +        format      = &EM_PROPERTY_FORMAT,
22417     +        style       = &EM_PROPERTY_STYLE
22418     +    );
22419     +
22420     +    %doendm:
22421     +
22422     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.reporter_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAINMACROS.SOURCE.
22423     +/*---------------------------------------------------------*/
22424     + *  EM_REPORT_CREATE;
MPRINT(TRAIN):   * EM_REPORT_CREATE;
22425     + *   all work needed to start the documents;
MPRINT(TRAIN):   * all work needed to start the documents;
22426     + *  - identify directory location;
MPRINT(TRAIN):   * - identify directory location;
22427     + *  - clear directory of em report files;
MPRINT(TRAIN):   * - clear directory of em report files;
22428     + *  - initialize document options;
MPRINT(TRAIN):   * - initialize document options;
22429     + *  - setup ODS system;
MPRINT(TRAIN):   * - setup ODS system;
22430     +/*---------------------------------------------------------*/
22431     +%macro EM_REPORT_CREATE(
22432     +    path=,             /*-- output location             ---*/
22433     +    lib=,              /*-- em workspace library        ---*/
22434     +    startnodeid=,      /*-- starting nodeid             ---*/
22435     +    showall=,          /*-- show all content Y or N     ---*/
22436     +    nodes=,            /*-- nodes to generate report on ---*/
22437     +    format=,           /*-- format for generated report ---*/
22438     +    style=             /*--- style for ODS statement    ---*/
22439     +) ;
22441     +    filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';      %include temp; filename temp;
22442     +    filename temp catalog 'sashelp.emutil.reporter_printmacros.source';     %include temp; filename temp;
22443     +    filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';       %include temp; filename temp;
22444     +    filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;         %include temp; filename temp;
22445     +    filename temp catalog 'sashelp.emutil.reporter_tagset_template.source'; %include temp; filename temp;
22447     +    /*--- 1. set global parameters ---*/
22449     +    %GLOBAL EM_REPORT_PATH    ; %let EM_REPORT_PATH    = &PATH ;
22450     +    %GLOBAL EM_REPORT_SHOWALL ; %let EM_REPORT_SHOWALL = %upcase(&showall) ;
22451     +    %GLOBAL EM_REPORT_LIB     ; %let EM_REPORT_LIB     = &lib;
22452     +    %GLOBAL EM_REPORT_NODES   ; %let EM_REPORT_NODES   = &nodes;
22453     +    %GLOBAL EM_REPORT_FORMAT  ; %let EM_REPORT_FORMAT  = &format;
22454     +    %GLOBAL EM_REPORT_SYTLE   ; %let EM_REPORT_STYLE   = &style;
22456     +    /*--- 2. set global constants ---*/
22458     +    %GLOBAL EM_REPORT_GDEVICE;
22459     +    %GLOBAL EM_REPORT_PRINT_MAXVARS;
22460     +    %GLOBAL EM_REPORT_TEXT_FONT;
22461     +    %GLOBAL EM_REPORT_TEXT_SIZE;
22462     +    %GLOBAL EM_REPORT_TITLE_SIZE;
22463     +    %GLOBAL EM_REPORT_HEADER_SIZE;
22464     +    %GLOBAL EM_REPORT_NODE_FONT;
22465     +    %GLOBAL EM_REPORT_TITLE;
22466     +    %GLOBAL EM_REPORT_FOOTNOTE1;
22467     +    %GLOBAL EM_REPORT_FOOTNOTE2;
22469     +    %global EM_REPORT_SUPPRESS_DATE; %let EM_REPORT_SUPPRESS_DATE =;
22471     +    %global RPM_REPORT_MODELNODE RPM_REPORT_SCORENODE RPM_REPORT_MDLCOMP RPM_REPORT_VALIDSUMMARY;
22473     +    %if "&EM_REPORT_GDEVICE"       eq ""  %then %let EM_REPORT_GDEVICE = GIF;
22474     +    %if "&EM_REPORT_PRINT_MAXVARS" eq ""  %then %let EM_REPORT_PRINT_MAXVARS= 40;
22475     +    %if "&EM_REPORT_TEXT_FONT"     eq ""  %then %do;
22476     +        %let EM_REPORT_TEXT_FONT= %sysfunc(getlocale(FTITLE, &EM_PROPERTY_TEXTFONT));
22477     +        %let EM_REPORT_TEXT_FONT= %sysfunc(tranwrd(&EM_REPORT_TEXT_FONT,%str(<ttf>),%str()));
22478     +    %end;
22479     +    %if "&EM_REPORT_NODE_FONT"     eq ""  %then %do;
22480     +        %let EM_REPORT_NODE_FONT = %sysfunc(getlocale(FTITLE, SIMPLEX)) ;
22481     +        %let EM_REPORT_NODE_FONT = %sysfunc(tranwrd(&EM_REPORT_NODE_FONT,%str(<ttf>),%str()));
22482     +    %end;
22483     +    %if "&EM_REPORT_HEADER_SIZE"   eq ""  %then %let EM_REPORT_HEADER_SIZE = &EM_PROPERTY_HEADERSIZE;
22484     +    %if "&EM_REPORT_TEXT_SIZE"     eq ""  %then %let EM_REPORT_TEXT_SIZE   = &EM_PROPERTY_TEXTSIZE;
22485     +    %if "&EM_REPORT_TITLE_SIZE"    eq ""  %then %let EM_REPORT_TITLE_SIZE  = &EM_PROPERTY_TITLESIZE;
22487     +    /*--- 3. text for title statements ---*/
22489     +    %global EM_REPORT_PROJECT_TEXT ; %let EM_REPORT_PROJECT_TEXT= %superq(EM_PROJECTNAME);
22490     +    %global EM_REPORT_DIAGRAM_TEXT ; %let EM_REPORT_DIAGRAM_TEXT= %superq(EM_WSNAME);
22492     +    %EM_REPORT_NODE_TEXT(&startnodeid) ;
22494     +    /*--- 4. create output filename ---*/
22496     +    %EM_REGISTER(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
22498     +    /*--- 5. Allways get the path for showing the score code --*/
22500     +    %let FLOW= ;            /*--- ignore for now ---*/
22501     +    %let PUBLISH=;          /*--- ignore for now ---*/
22502     +    %let EM_LIB=&lib ;      /*--- used by the macro */
22504     +    %if &EM_REPORT_NODES ne SUMMARY %then %do;
22505     +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=&EM_REPORT_NODES);
22506     +    %end;
22507     +    %else %do;
22508     +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=PATH);
22509     +    %end;
22511     +    data emreportpath;
22512     +        set emreportpath;
22513     +        rename nodelabel=nodeid;
22514     +        nodeIndex = _n_;
22515     +    run;
22517     +    /*--- 6. create new tagset templates needed for tree, icicle and pie charts */
22519     +    *** create new style template to address fonts in ods text;
22521     +    ods path(prepend) work.templat(update);
22522     +    proc template ;
22523     +        define style styles.em_style / store=work.templat;
22524     +        parent= styles.&EM_REPORT_STYLE;
22526     +            style usertext from usertext /
22527     +                foreground=black font_size=&EM_REPORT_TITLE_SIZE pt font_face="&EM_REPORT_TEXT_FONT" font_weight=bold
22528     +            ;
22529     +            style systemtitle from systemtitle /
22530     +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
22531     +              fontsize=&EM_REPORT_TITLE_SIZE pt font_face="&EM_REPORT_TEXT_FONT" font_weight=bold
22532     +            ;
22533     +            style systemfooter from systemfooter /
22534     +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
22535     +              font_face="&EM_REPORT_TEXT_FONT"
22536     +            ;
22537     +            style GraphFonts from GraphFonts /
22538     +                'GraphTitleFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
22539     +                'GraphTitle1Font'   = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
22540     +                'GraphLabelFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_HEADER_SIZE pt)
22541     +                'GraphFootnoteFont' = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22542     +                'GraphValueFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22543     +                'GraphDataFont'     = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22544     +            ;
22545     +            style Fonts from Fonts/
22546     +                'TitleFont'           = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
22547     +                'TitleFont2'          = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
22548     +                'StrongFont'          = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22549     +                'EmphasisFont'        = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22550     +                'headingFont'         = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22551     +                'headingEmphasisFont' = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22552     +                'FixedEmphasisFont'   = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22553     +                'FixedStrongFont'     = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22554     +                'FixedHeadingFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22555     +                'FixedFont'           = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22556     +                'BatchFixedFont'      = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22557     +                'docFont'             = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
22558     +            ;
22559     +            style GraphTitleText from GraphTitleText / font_face="&EM_REPORT_TEXT_FONT";
22560     +            style data           from data           / font_size=&EM_REPORT_TEXT_SIZE pt;
22561     +            style header         from header         / font_size=&EM_REPORT_HEADER_SIZE pt;
22562     +            style rowheader      from header;
22563     +        end;
22564     +    run; quit;
22566     +    /*--- 7. start report / destination configurations ---*/
22568     +    *** options for page layout;
22569     +    options nodate nocenter number ls=97 ;
22571     +    *** get file name;
22572     +    %EM_GETNAME(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
22573     +    %let file = &EM_USER_REPORT;
22575     +    *** turn off LISTING and turn on the specified destination;
22576     +    ods listing close;
22577     +    ods graphics / height=4.5in;
22578     +    ods &EM_REPORT_FORMAT file="&file" style=styles.em_style
22579     +        %if &EM_REPORT_FORMAT eq PDF %then %do; startpage=NO uniform NOTOC %end;
22580     +        %if &EM_REPORT_FORMAT eq RTF %then %do; startpage=NEVER BODYTITLE  %end;
22581     +    ;
22583     +    *** titles and footnotes;
22584     +    ods &EM_REPORT_FORMAT text=" ";
22585     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
22586     +        ods &EM_REPORT_FORMAT text="&EM_REPORT_TITLE";
22587     +    %end;
22588     +    %else %do;
22589     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))";
22590     +    %end;
22592     +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1 "&EM_REPORT_FOOTNOTE1"; %end;
22593     +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2 "&EM_REPORT_FOOTNOTE2"; %end;
22595     +    /*--- 8. verify that valid flow exists for SUMMARY (RPM) report ---*/
22596     +    /*--- if not, SUMMARY style report can not be generated and PATH report will be done instead ---*/
22598     +    %EM_REPORT_validSummaryPath(startNodeID = &startNodeID);
22600     +    %if ((&EM_REPORT_NODES eq SUMMARY ) AND(&RPM_REPORT_VALIDSUMMARY eq 1))%then %do;
22601     +        %local hprpm_hpassess;
22602     +        %let   hprpm_hpassess = &em_lib..&RPM_REPORT_MODELNODE._hpassess;
22603     +        %if %sysfunc(exist(&hprpm_hpassess)) %then %do;
22604     +            filename temp catalog 'sashelp.hpdm.hpdm_scorecard.source'; %include temp; filename temp;
22605     +            %EM_REPORT_SUMMARY(runHP=1);
22606     +        %end;
22607     +        %else %do;
22608     +            %EM_REPORT_SUMMARY(runHP=0);
22609     +        %end;
22610     +        %goto create_endline;
22611     +    %end;
22612     +    %else %do;
22613     +        %if &EM_REPORT_NODES eq SUMMARY %then %let EM_REPORT_NODES= PATH;
22614     +    %end;
22616     +    /*--- 9. output report information (header of the report)---*/
22618     +    ods proclabel "%sysfunc(sasmsg(sashelp.dmine, rpt_reportinfo_title, NOQUOTE))";
22619     +    data _null_;
22620     +        call symput('report_date', %nrbquote(strip(put(date(),     NLDATE.))));
22621     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
22622     +    run;
22624     +    data _null_;
22625     +        file print ;
22626     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
22627     +        %if ((&EM_REPORT_SUPPRESS_DATE eq ) OR (%index(&EM_REPORT_SUPPRESS_DATE, Y) < 1)) %then %do;
22628     +            put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
22629     +        %end;
22630     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
22631     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
22632     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
22633     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
22634     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
22635     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &EM_REPORT_showall))" /;
22636     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
22637     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &EM_REPORT_STYLE))" /;
22638     +    run ;
22640     +    /*--- 10. generate the workspace plot ---*/
22642     +    %em_report_workspace_xml;
22643     +    %em_getname(key=PFD, type=FILE, extension=XML);
22644     +    %em_report_makeds(&EM_USER_PFD, xmldata);
22645     +    %em_report_workspace_render;
22647     +    /*--- 11. identify the nodes to report                                  ---*/
22648     +    /*--- merged and modified from three previous macros:                   ---*/
22649     +    /*--- EM_REPORT_PATH, EM_REPORT_PREDECESORS EM_REPORT_PREDECESORS_COUNT ---*/
22651     +    %global EM_REPORT_NODENUM EM_REPORT_NODELIST;
22652     +    %let EM_REPORT_NODENUM = 0;
22654     +    %if &EM_REPORT_NODES eq PATH or &EM_REPORT_NODES eq ALL
22655     +    %then %do;
22656     +        %if %sysfunc(exist(emreportpath)) %then %do;
22657     +            proc sql noprint;
22658     +                select count(*) into :EM_REPORT_NODENUM
22659     +                    from emreportpath where nodeID ne " ";
22660     +                %if &EM_REPORT_NODENUM gt 0 %then %do;
22661     +                    select strip(nodeID) into :EM_REPORT_NODELIST separated by ' '
22662     +                        from emreportpath where nodeID ne " " order by nodeIndex;
22663     +                %end;
22664     +            quit;
22665     +        %end;
22666     +    %end;
22667     +    %else %if &EM_REPORT_NODES eq PREDECESSOR
22668     +    %then %do ;
22669     +        proc sql noprint;
22670     +            select count(*) into :EM_REPORT_NODENUM
22671     +                from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq upcase(strip("&startnodeid"));
22672     +            %if &EM_REPORT_NODENUM gt 0 %then %do;
22673     +                select strip(from) into :EM_REPORT_NODELIST separated by ' '
22674     +                    from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq upcase(strip("&startnodeid"));
22675     +            %end;
22676     +        quit;
22677     +    %end;
22678     +    %else %if &EM_REPORT_NODES eq 0 %then %do;
22679     +        %let EM_REPORT_NODENUM = 1;
22680     +        %let EM_REPORT_NODELIST = &startnodeid;
22681     +    %end;
22683     +    %if &EM_REPORT_NODENUM gt 0 %then %do;
22684     +        %do n = 1 %to &EM_REPORT_NODENUM;
22685     +            %EM_REPORT_NODE(nodeid=%scan(&EM_REPORT_NODELIST,&n,' '));
22686     +        %end;
22687     +    %end;
22689     +    /*--- 12. close report and ODS destinations---*/
22691     +    %create_endline:;
22693     +    data _NULL_ ;
22694     +        file print;
22695     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_endreport_note, NOQUOTE))" ;
22696     +    run;
22698     +    title1; title2; title3 ;
22699     +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1; %end;
22700     +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2; %end;
22701     +    ods graphics / reset=height;
22702     +    ods listing;
22703     +    ods &EM_REPORT_FORMAT close;
22705     +%mend EM_REPORT_CREATE ;
22707     +/*---------------------------------------------------------*/
22708     + * EM_REPORT_NODE ;
MPRINT(TRAIN):   * EM_REPORT_NODE ;
22709     + *     create a report for a node on an EM diagram ;
MPRINT(TRAIN):   * create a report for a node on an EM diagram ;
22710     +/*---------------------------------------------------------*/
22711     +%macro EM_REPORT_NODE(nodeid=) ;
22713     +    %if not %sysfunc(exist(&em_report_lib..&nodeid._emreport))
22714     +    %then %do ;
22715     +        %put NOTE: Node report data set (&em_report_lib..&nodeid._emreport) is not defined.;
22716     +        %goto node_skip;
22717     +    %end ;
22719     +    /*--- 1. set global parameters ---*/
22721     +    %global EM_REPORT_NODEID EM_REPORT_KEY_WHERECLAUSE
22722     +            EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3
22723     +    ;
22724     +    %let EM_REPORT_NODEID= &nodeid ;
22726     +    /*--- 2. preparations: Node Text; Path; Notes; Num of Prev. Nodes ---*/
22728     +    /* 2.1 get node text;*/
22729     +    %EM_REPORT_NODE_TEXT(&nodeid) ;
22731     +    /* 2.2 get the em path to this node;*/
22732     +    %EM_gettrainpath(nodeid=&nodeid,outpath=_tmp_emrnp);
22734     +    %if %sysfunc(exist(_tmp_emrnp))
22735     +    %then %do;
22736     +        data _null_;
22737     +            set _tmp_emrnp end=eof ;
22738     +            length path $1000 ;
22739     +            retain path ' ';
22740     +            if _n_ eq 1
22741     +                then path = strip(nodelabel) ;
22742     +                else path = strip(path) !! " => " !! strip(nodelabel);
22743     +            if eof then call symput('print_path', strip(path));
22744     +        run;
22745     +    %end ;
22746     +    %else %do;
22747     +        %let print_path= Unknown;
22748     +    %end ;
22750     +    /* 2.3 retrieve location of notes file;*/
22751     +    %let temp = %nrbquote(%sysfunc(pathname(&EM_REPORT_LIB)));
22752     +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
22753     +    %let file = EMNOTES.txt;
22754     +    %let notesfile = %nrbquote(&path&em_dsep&nodeid&em_dsep&file);
22756     +    /* 2.4 predecessor node counts */
22757     +    proc sql noprint;
22758     +        select count(*) into :EM_REPORT_PREDECESSORS_COUNT
22759     +            from &EM_REPORT_LIB..EM_DGRAPH where upcase(strip(to)) eq upcase(strip("&nodeid"));
22760     +    quit;
22762     +    %if ((&EM_REPORT_PREDECESSORS_COUNT eq 0) or (&EM_REPORT_NODES eq 0) or (&EM_REPORT_NODES eq PREDECESSOR))
22763     +        %then %let varlist=1;
22764     +        %else %let varlist=0;
22766     +    %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP
22767     +        %then %let varlist = 0;
22769     +    /*--- 3. beginning section of a node report ---*/
22771     +    /* 3.1 force page break at the beginning of each node */
22773     +    /* sample output of a beginning section
22774     +        -----------------------------------
22775     +        -  SAS Enterprise Miner Report    -
22776     +        -                                 -
22777     +        -  Node=Regression                -
22778     +        -  Summary                        -
22779     +        -                                 -
22780     +        -  Node id = Reg                  -
22781     +        -  Node label = Regression        -
22782     +        -  Meta Path = Ids => Part => Reg -
22783     +        -  Notes =                        -
22784     +        -----------------------------------*/
22786     +    ods &EM_REPORT_FORMAT startpage=now;
22788     +    ods &EM_REPORT_FORMAT text=" ";
22789     +    %if "&EM_REPORT_TITLE" ne ""
22790     +        %then %do; ods &EM_REPORT_FORMAT text= "&EM_REPORT_TITLE"; %end;
22791     +        %else %do; ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
22793     +    ods &EM_REPORT_FORMAT text=" ";
22794     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
22795     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_summary_title, NOQUOTE))";
22797     +    data _null_ ;
22798     +        file print;
22799     +        put " ";
22800     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodeid_vlabel,   NOQUOTE, &nodeid));                         put "&note";
22801     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodelbl_vlabel,  NOQUOTE, %nrbquote(&em_report_node_text))); put "&note";
22802     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptmetapath_vlabel, NOQUOTE, &print_path));                     put "&note";
22803     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnotes_vlabel,    NOQUOTE));                                  put "&note";
22804     +        put " ";
22805     +    run;
22807     +    %if "&notesfile" ne "" %then %do;
22808     +        filename x "&notesfile" encoding='utf-8' NOBOM;
22809     +        data _null_;
22810     +            length string $1000;
22811     +            file PRINT;
22812     +            fid = fopen('x');
22813     +            do while (^fread(fid));
22814     +                rc= fget(fid, string, frlen(fid));
22815     +                string = tranwrd(string, "'", "''");
22816     +                if string eq '' then string = ' ';
22817     +                put string;
22818     +            end;
22819     +            fid = fclose(fid);
22820     +            put " ";
22821     +        run;
22822     +        filename x;
22823     +    %end;
22825     +    /*--- 4. property table of a node report ---*/
22826     +    %EM_REPORT_PROPERTIES(catalog=&em_report_lib..&nodeid, dsname=properties);
22828     +    /*--- 5. datasource table of a node report ---*/
22829     +    %if &varlist eq 1 and %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT)) %then %do;
22830     +        %EM_REPORT_DATASOURCE;
22831     +    %end;
22833     +    /*--- 6. varlist table of a node report ---*/
22834     +    %EM_REPORT_VARS(varlist=&varlist) ;
22836     +    /* --- 7. the itemized output of EMREPORT TLFs ---*/
22838     +    /* 7.1 get number of items */
22839     +    proc sql noprint;
22840     +        select max(ID) into: numitems from &em_report_lib..&nodeid._emreport;
22841     +    quit;
22843     +    /* 7.2 define and initialize global KEYs */
22844     +    proc sql noprint;
22845     +        select count(distinct key) into :allnumkeys
22846     +            from &em_report_lib..&nodeid._emreport;
22847     +        select distinct key into :allnamekey1-:allnamekey%left(&allnumkeys)
22848     +            from &em_report_lib..&nodeid._emreport;
22849     +    quit;
22851     +    %do i = 1 %to &allnumkeys;
22852     +        %global EM_REPORT_KEY_&&&allnamekey&i;
22853     +        %let EM_REPORT_KEY_&&&allnamekey&i = ;
22854     +    %end;
22855     +    %global EM_REPORT_KEY_YREF EM_REPORT_KEY_XREF EM_REPORT_KEY_Y EM_REPORT_KEY_Y2 EM_REPORT_KEY_X
22856     +            EM_REPORT_KEY_LATTICEY EM_REPORT_KEY_LATTICEX EM_REPORT_KEY_WHERE EM_REPORT_KEY_SUBGROUP
22857     +            EM_REPORT_KEY_FREQUENCY EM_REPORT_KEY_GROUP EM_REPORT_KEY_Y2REF EM_REPORT_KEY_LATTICETYPE
22858     +            EM_REPORT_KEY_ORIENTATION
22859     +    ;
22860     +    %let EM_REPORT_KEY_AUTODISPLAY = N;
22861     +    %let EM_REPORT_KEY_XREF        = ;
22862     +    %let EM_REPORT_KEY_YREF        = ;
22863     +    %let EM_REPORT_KEY_Y2REF       = ;
22864     +    %let EM_REPORT_KEY_X           = ;
22865     +    %let EM_REPORT_KEY_Y           = ;
22866     +    %let EM_REPORT_KEY_Y2          = ;
22867     +    %let EM_REPORT_KEY_LATTICEX    = ;
22868     +    %let EM_REPORT_KEY_LATTICEY    = ;
22869     +    %let EM_REPORT_KEY_WHERE       = ;
22870     +    %let EM_REPORT_KEY_SUBGROUP    = ;
22871     +    %let EM_REPORT_KEY_FREQUENCY   = ;
22872     +    %let EM_REPORT_KEY_GROUP       = ;
22873     +    %let EM_REPORT_KEY_LATTICETYPE = ;
22874     +    %let EM_REPORT_KEY_ORIENTATION = ;
22876     +    /* 7.3 loop over items in the EM_REPORT dataset */
22878     +    %do index = 1 %to &numitems ;
22880     +        /* 7.3.1 initialize all key macro variables for each item */
22882     +        %do i = 1 %to &allnumkeys;
22883     +            %let EM_REPORT_KEY_&&&allnamekey&i = ;
22884     +        %end;
22885     +        %let EM_REPORT_KEY_AUTODISPLAY = N;
22886     +        %let EM_REPORT_KEY_WHERE       = ;
22887     +        %let EM_REPORT_KEY_WHERECLAUSE = ;
22888     +        %let EM_REPORT_TTL1            = ;
22889     +        %let EM_REPORT_TTL2            = ;
22890     +        %let EM_REPORT_TTL3            = ;
22891     +        %let EM_REPORT_KEY_XREF        = ;
22892     +        %let EM_REPORT_KEY_YREF        = ;
22893     +        %let EM_REPORT_KEY_Y2REF       = ;
22894     +        %let EM_REPORT_KEY_X           = ;
22895     +        %let EM_REPORT_KEY_Y           = ;
22896     +        %let EM_REPORT_KEY_Y2          = ;
22897     +        %let EM_REPORT_KEY_LATTICEX    = ;
22898     +        %let EM_REPORT_KEY_LATTICEY    = ;
22899     +        %let EM_REPORT_KEY_SUBGROUP    = ;
22900     +        %let EM_REPORT_KEY_FREQUENCY   = ;
22901     +        %let EM_REPORT_KEY_GROUP       = ;
22902     +        %let EM_REPORT_KEY_LATTICETYPE = ;
22903     +        %let EM_REPORT_KEY_ORIENTATION = ;
22905     +        %let item_skip_code = 1;
22907     +        data _null_;
22908     +            set &em_report_lib..&nodeid._emreport(where=(id eq &index));
22909     +            call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
22910     +        run;
22912     +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLESCATTER"
22913     +            %then %let EM_REPORT_KEY_VIEWTYPE = SCATTER;
22915     +        /* special treatment for EM_REPORT_KEY_Y in overlaid line plot */
22916     +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT" or "&EM_REPORT_KEY_VIEWTYPE" eq "SCATTER"
22917     +            or "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"
22918     +            or "&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT" or "&EM_REPORT_KEY_LATTICETYPE" eq "PLOT"
22919     +        %then %do;
22920     +            proc sql noprint;
22921     +                select distinct value into :EM_REPORT_KEY_Y separated by ' '
22922     +                    from &em_report_lib..&nodeid._emreport(where=(id eq &index))
22923     +                    where upcase(key) eq "Y";
22924     +            quit;
22925     +        %end;
22927     +        %put ==&INDEX : Viewtype = &EM_REPORT_KEY_VIEWTYPE &EM_REPORT_KEY_DESCRIPTION ;
22929     +        /* 7.3.2 set EM_REPORT_KEY_WHERE as EM_REPORT_KEY_WHERECLAUSE */
22931     +        %if "&EM_REPORT_KEY_WHERECLAUSE" ne "" and "&EM_REPORT_KEY_WHERE" eq ""
22932     +        %then %do;
22933     +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERECLAUSE);
22934     +        %end;
22935     +        %else %if "&EM_REPORT_KEY_WHERECLAUSE" eq "" and "&EM_REPORT_KEY_WHERE" ne ""
22936     +        %then %do;
22937     +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERE);
22938     +        %end;
22939     +        %else %do;
22940     +            %let EM_REPORT_KEY_WHERE = ;
22941     +        %end;
22943     +        %if "&EM_REPORT_KEY_WHERE" ne "" %then %do;
22944     +            %let EM_REPORT_KEY_WHERECLAUSE = %str((where=(&EM_REPORT_KEY_WHERE)));
22945     +        %end;
22947     +        /* 7.3.3 skip this TLF item if the source data set does not exist */
22948     +        %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_KEY_FILE)) %then %do;
22949     +            %let item_skip_code = 0;
22950     +        %end;
22952     +        /* 7.3.4 skip the TLF item as documented in the previous version of the macro */
22953     +        /*       or just print the TLF item as documented, or use special macros      */
22955     +        data _null_;
22956     +            format type $100. desc $200.;
22957     +            type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
22958     +            desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
22960     +            if  (type in ('SCATTER')   and desc in ('STATPLOT' 'RULEPATHITEM' 'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN'))
22961     +             or (type in ('PLOT')      and desc in ('SEASON' 'TREND' 'CORRSTAT' 'DECOMP'))
22962     +             or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 'CROSSCCFMAP' 'CROSSCCFNORMMAP'))
22963     +             or (type in ('BAR')       and desc in ('VIP' 'ABSESTIMATE' 'ABSSTDESTIMATE' 'PRINCOEFFPLOT'))
22964     +             or (type in ('LATTICE')   and desc in ('ESTIMATEGRID' 'ASSESSRANKGRID' 'CORRPLOT'))
22965     +                then call symput('item_skip_code','2');
22967     +            /* ASSESSRANKGRID : content handled in %EM_REPORT_PLOT - from old macro comments*/
22968     +            /* CORRPLOT: empty macro report_corrplot in old macro */
22970     +            if  (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR'))
22971     +             or (type in ('BAR')       and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT'))
22972     +             or (type in ('LATTICE')   and desc in ('CHIPLOT' 'WORTH'))
22973     +                then call symput('item_skip_code','3');
22975     +            if (type in ('PLOT')    and desc in ('ASSESSRANKOVERLAY'))
22976     +                then call symput('item_skip_code','4');
22977     +            if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY'))
22978     +                then call symput('item_skip_code','5');
22980     +            if (type in ('PLOT') and desc in ('EVENTPLOT'))
22981     +                then call symput('item_skip_code','6');
22983     +            if (type in ('LATTICE') and desc in ('CLASSSTAT'))
22984     +                then call symput('EM_REPORT_KEY_VIEWTYPE','DATA');
22986     +            if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST'))
22987     +                then call symput('item_skip_code','7');
22988     +            if (type in ('LATTICE') and desc in ('SCOREDIST'))
22989     +                then call symput('item_skip_code','8');
22990     +            if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY'))
22991     +                then call symput('item_skip_code','9');
22993     +            if (type in ('PLOT') and desc in ('HPDMASSESS'))
22994     +                then call symput('item_skip_code','10');
22996     +            if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 'TSDISTANCEMAP'))
22997     +                then call symput('item_skip_code','11');
22999     +        run;
23001     +        /* 7.3.5 */
23003     +        %EM_REPORT_GTT;
23005     +        /********** actions by item_skip_code ***********************************/
23007     +        %if &item_skip_code eq 2 %then %do;
23008     +            /* TLF is skipped for these types of reports */
23009     +        %end;
23010     +        %else
23011     +        %if &item_skip_code eq 3 %then %do;
23012     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23013     +                /* just a print */
23014     +                title1 "&EM_REPORT_TTL1";
23015     +                title2 "&EM_REPORT_TTL2";
23016     +                title3 "&EM_REPORT_TTL3";
23017     +                ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE))";
23018     +                proc print data=&EM_REPORT_LIB..&EM_REPORT_KEY_FILE noobs label contents='';
23019     +                run;
23020     +            %end;
23021     +        %end;
23022     +        %else
23023     +        %if &item_skip_code eq 4 %then %do;
23024     +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=no);
23025     +        %end;
23026     +        %else
23027     +        %if &item_skip_code eq 5 %then %do;
23028     +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=yes);
23029     +        %end;
23030     +        %else
23031     +        %if &item_skip_code eq 6 %then %do;
23032     +            %EM_REPORT_EVENTPLOT;
23033     +        %end;
23034     +        %else
23035     +        %if &item_skip_code eq 7 %then %do;
23036     +            %if %substr(%upcase(%sysfunc(strip(&nodeid))),1,7) ne MDLCOMP or &EM_REPORT_NODES eq PREDECESSOR %then %do;
23037     +                %EM_REPORT_SCOREDIST;
23038     +            %end;
23039     +        %end;
23040     +        %else
23041     +        %if &item_skip_code eq 8 %then %do;
23042     +            %EM_REPORT_SCOREDIST2;
23043     +        %end;
23044     +        %else
23045     +        %if &item_skip_code eq 9 %then %do;
23046     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23047     +                %EM_REPORT_CLASSIFYTAB;
23048     +            %end;
23049     +        %end;
23050     +        %else
23051     +        %if &item_skip_code eq 10 %then %do;
23052     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23053     +                %EM_REPORT_HPDMASSESS;
23054     +            %end;
23055     +        %end;
23056     +        %else
23057     +        %if &item_skip_code eq 11 %then %do;
23058     +                %EM_REPORT_HEATMAPTEMPLATE;
23059     +        %end;
23062     +        %else
23064     +        %if &item_skip_code eq 1 %then %do;
23066     +            /*--- process the viewtypes ---*/
23067     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT"           %then %do; %EM_REPORT_SGPLOT(type=PLOT);     %end;
23068     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"       %then %do; %EM_REPORT_SGPLOT(type=LINEPLOT); %end;
23069     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "SCATTER"        %then %do; %EM_REPORT_SGPLOT(type=SCATTER);  %end;
23070     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "BAR"            %then %do; %EM_REPORT_SGPLOT(type=BARPLOT);  %end;
23071     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "HISTOGRAM"      %then %do; %EM_REPORT_SGPLOT(type=HISTOGRAM);%end;
23072     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PIE"            %then %do; %EM_REPORT_SGSILK(type=PIE);      %end;
23073     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DTREE"          %then %do; %EM_REPORT_SGSILK(type=DTREE);    %end;
23074     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ICICLE"         %then %do; %EM_REPORT_SGSILK(type=ICICLE);   %end;
23075     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DENDROGRAM"     %then %do; %EM_REPORT_DENDROGRAM;            %end;
23076     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ITERATIONPLOT"  %then %do; %EM_REPORT_ITERATIONPLOT;         %end;
23077     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DATA"           %then %do; %EM_REPORT_DATA(maxobs=100);      %end;
23078     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLEY2PLOT" %then %do; %EM_REPORT_MULTIPLY2PLOT;         %end;
23080     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LATTICE" %then %do;
23081     +                ods graphics / height=9in;
23082     +                %EM_REPORT_LATTICE;
23083     +                ods graphics / height=4.5in;
23084     +            %end;
23085     +        %end;
23087     +        title1; title2; title3; title4; title5;
23088     +    %end;
23090     +%node_skip:
23092     +%mend EM_REPORT_NODE;
23094     +/*---------------------------------------------------------*/
23095     +/*---- create xml file containing pfd information      ----*/
23096     +/*---------------------------------------------------------*/
23097     +%macro em_report_workspace_xml();
23099     +    %global EM_REPORT_LIB;
23101     +    %EM_REGISTER(key=PFD, type=FILE, extension=XML);
23102     +    %EM_GETNAME(key=PFD,  type=FILE, extension=XML);
23104     +    filename x "&EM_USER_PFD" encoding="utf-8" NOBOM;
23106     +    /* Node information */
23107     +    data _null_;
23108     +        file x;
23109     +        set &EM_REPORT_LIB..EM_NODEID;
23110     +        length string $400;
23112     +        /* check for invalid characters in the node label */
23113     +        label = tranwrd(label, %nrstr("&"), %nrstr("&amp;"));
23114     +        label = tranwrd(label, %nrstr("<"), %nrstr("&lt;"));
23115     +        label = tranwrd(label, %nrstr(">"), %nrstr("&gt;"));
23116     +        label = tranwrd(label, %nrstr("'"), %nrstr("&#39;"));
23117     +        label = tranwrd(label, %nrstr('"'), %nrstr('&quot;'));
23119     +        string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'" title="',LABEL,'"></PFDNode>');
23120     +        put string;
23121     +    run;
23123     +    /* Link information */
23124     +    data _null_;
23125     +        file x mod;
23126     +        set &EM_REPORT_LIB..EM_DGRAPH(where=(TO ne ""));
23127     +        length string $400;
23129     +        string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"' toId='",TO,"'></PFDLink>");
23130     +        put string;
23131     +    run;
23133     +    filename x;
23135     +%mend em_report_workspace_xml;
23137     +/*---------------------------------------------------------*/
23138     +/* "chop" xml definitions, wrapping if over 256 bytes      */
23139     +/*---------------------------------------------------------*/
23140     +%macro em_report_makeds(XMLfile,outds);
23142     +    %local rc fileref fid max reclen;
23143     +    %let fileref=xmlref;
23144     +    %if %sysfunc(fexist(xmlref)) %then %put ERROR: Fileref XMLREF in use.;
23145     +    %else %do;
23146     +      %let rc=%sysfunc(filename(fileref,&XMLfile,,encoding='utf-8')));
23147     +      %if %sysfunc(fileref(xmlref)) ne 0 %then %put %sysfunc(sysmsg());
23148     +      %else %do;
23149     +        %let fid=%sysfunc(fopen(xmlref,i,5000,v));
23150     +        %let max=0;
23151     +         %if %sysfunc(fread(&fid)) = 0 %then %do;
23152     +            %let reclen=%sysfunc(frlen(&fid));
23153     +            %let max=&reclen;
23154     +            %do %while(%sysfunc(fread(&fid)) = 0);
23155     +               %let reclen=%sysfunc(frlen(&fid));
23156     +               %if &reclen > &max %then %let max=&reclen;
23157     +            %end;
23158     +        %end;
23159     +        %let rc=%sysfunc(fclose(&fid));
23161     +        data &outds(keep=PFDItemList);
23162     +          infile xmlref recfm=v  lrecl=&max  length=len;
23163     +          length PFDItemList $256;
23164     +          input record $varying5000. len;
23165     +          recordNum+1;
23166     +          do start=1 to len by 256 ;
23167     +             end=start+256;
23168     +             *put recordNum= start= end=;
23169     +             PFDItemList=substr(record,start,end);
23170     +             output;
23171     +          end;
23172     +        run;
23173     +        %let rc=%sysfunc(filename(fileref));
23174     +      %end;
23175     +    %end;
23176     +%mend em_report_makeds;
23178     +/*---------------------------------------------------------*/
23179     +/* render a workspace plot in the ODS destination          */
23180     +/*---------------------------------------------------------*/
23181     +%macro em_report_workspace_render;
23183     +     /*--- determine if flow was run in batch (ie all x/y coordinates are -1) ---*/
23184     +     %let runBatch = 0;
23185     +     data temp;
23186     +        set &EM_REPORT_LIB..EM_NODEID;
23187     +        if X = -1 AND Y= - 1 then delete;
23188     +     run;
23189     +     %let dsid = %sysfunc(open(work.temp));
23190     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
23191     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
23193     +     %if &nobs le 1 %then %let runBatch = 1;
23195     +      title1; title2; title3;
23197     +      %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
23198     +      %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
23199     +      %let view = view.xml;
23200     +      %let viewfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
23201     +      %let datax = data.xml;
23202     +      %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
23204     +      /* make sgDataModel*/
23205     +      ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
23206     +      ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8" style=styles.em_style;
23207     +      proc sgrender data=work.xmldata template=dataonly;
23208     +          dynamic var1="PFDItemList";
23209     +      run;
23211     +      /* pfd event code */
23212     +      %if "&EM_REPORT_TITLE" ne "" %then %do;
23213     +          ods tagsets.gtl event=LayoutRegion(start)
23214     +              options(title ="&EM_REPORT_TITLE"
23215     +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))");
23216     +      %end;
23217     +      %else %do;
23218     +          ods tagsets.gtl event=LayoutRegion(start)
23219     +              options(title ="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"
23220     +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))");
23221     +      %end;
23223     +      %if &runBatch ne 1 %then %do;
23224     +          ods tagsets.gtl event=PFD options(pfditems="PFDItemList" id="pfdView1");
23225     +          ods tagsets.gtl event=LayoutRegion(finish);
23226     +          ods tagsets.gtl close;
23227     +          ods &EM_REPORT_FORMAT select ALL ; /* re-enable sgrender output */
23228     +          ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))";
23229     +          proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
23230     +      %end;
23231     +      title1; title2; title3;
23233     +%mend em_report_workspace_render;
23236     +%macro EM_REPORT_RESULTS(
23237     +    path=,              /*-- output location             ---*/
23238     +    lib=,               /*-- em workspace library        ---*/
23239     +    startnodeid=,       /*-- starting nodeid             ---*/
23240     +    showall=,           /*-- show all content Y or N     ---*/
23241     +    nodes=,             /*-- nodes to generate report on ---*/
23242     +    format=,            /*-- format for generated report ---*/
23243     +    style=              /*--- style for ODS statement    ---*/
23244     +) ;
23246     +    data _null_ ;
23247     +        call symput('report_date', strip(put(date(),     NLDATE.)));
23248     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
23249     +    run;
23251     +    data _null_;
23252     +        file print ;
23253     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
23254     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
23255     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
23256     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
23257     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
23258     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
23259     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
23260     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &EM_REPORT_SHOWALL))" / ;
23261     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
23262     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE, &EM_REPORT_GDEVICE))" ;
23263     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &STYLE))" / ;
23264     +    run ;
23266     +    /* add report view to results */
23267     +    %EM_GETNAME(key=REPORT, type=FILE, extension=&FORMAT);
23268     +    %EM_REPORT(KEY=REPORT, BLOCK=MODEL, VIEWTYPE = FILEVIEWER, autodisplay=Y, DESCRIPTION=CUSTOM);
23270     +%mend;
23272     +%macro EM_REPORT_CREATERESULTS();
23274     +    %EM_GETNAME(key=ODSRESULTS, type=FILE, extension=htm, folder=ODS);
23275     +    filename x "&EM_FILE_ODSRESULTS" nobom;
23277     +    ods listing close;
23278     +    ods html3 file=X encoding = "utf-8" style=styles.em_style;
23279     +    ods html3 text=" ";
23280     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
23281     +        ods html3 text="&EM_REPORT_TITLE";
23282     +    %end;
23283     +    %else %do;
23284     +        ods html3 text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))";
23285     +    %end;
23287     +    data _null_ ;
23288     +        call symput('report_date', strip(put(date(),     NLDATE.)));
23289     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
23290     +    run;
23292     +    data _null_;
23293     +        file print ;
23294     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
23295     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
23296     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
23297     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
23298     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
23299     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
23300     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
23301     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &showall))" / ;
23302     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
23303     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE, &EM_REPORT_GDEVICE))" ;
23304     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &EM_REPORT_STYLE))" / ;
23305     +    run ;
23307     +    filename x;
23308     +    ods listing;
23309     +    ods html3 close;
23311     +    %EM_REPORT(KEY=ODSRESULTS, BLOCK=MODEL, VIEWTYPE = HTMLVIEW);
23313     +%mend EM_REPORT_CREATERESULTS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emrpm.em_modelprops.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMRPM.EM_MODELPROPS.SOURCE.
23314     +%macro em_modelprops(dgmid=, modelid=, output=%nrbquote(work.properties));
23315     +  %global mdl_emwsid mdl_modelid;
23316     +  %do;
23317     +     %let mdl_emwsid  = &dgmid;
23318     +     %let mdl_modelid = &modelid;
23319     +     %let mdl_output  = &output;
23320     +
23321     +     dm "afa c=sashelp.emrpm.modelprops.scl";
23322     +  %end;
23323     +%mend em_modelprops;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename pdffile "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\REPORT.pdf";
MPRINT(TRAIN):   filename pdffile;
NOTE: Fileref PDFFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename rtffile "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\REPORT.rtf";
MPRINT(TRAIN):   filename rtffile;
NOTE: Fileref RTFFILE has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PLOTMACROS.SOURCE.
23324     +/*---------------------------------------------------------*/
23325     + * Utility functions:;
MPRINT(EM_REPORT_CREATE):   * Utility functions:;
23326     +/*---------------------------------------------------------*/
23328     +%macro EM_REPORT_GTT();
23330     +    %global EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3 EM_REPORT_TITLE EM_REPORT_NODE_TEXT EM_REPORT_KEY_description;
23332     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
23333     +        %let EM_REPORT_ttl1 = &EM_REPORT_TITLE;
23334     +    %end;
23335     +    %else %do;
23336     +        %let EM_REPORT_ttl1 = %sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE));
23337     +    %end;
23339     +    %let EM_REPORT_ttl2 = %sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)));
23341     +    %let msg0 = views_descriptions_&em_report_key_description;
23342     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
23343     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
23344     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
23345     +    %end;
23346     +    %else %do;
23347     +        %let msg2=views_descriptions_&em_report_key_description;
23348     +    %end;
23350     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
23351     +    %then %do;
23352     +        %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
23353     +    %end;
23354     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
23355     +    %then %do;
23356     +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
23357     +            %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
23358     +        %end;
23359     +    %end;
23360     +    %else %do;
23361     +        %let EM_REPORT_ttl3 = &em_report_key_description;
23362     +    %end;
23364     +    /*--- special labels ---*/
23366     +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS"
23367     +    %then %do;
23368     +       %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine, rpt_regressionmod_title, NOQUOTE));
23369     +    %end;
23371     +%mend;
23373     +/*---------------------------------------------------------*/
23374     +* Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
MPRINT(EM_REPORT_CREATE):   * Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
23375     +/*---------------------------------------------------------*/
23377     +%macro EM_REPORT_SGPLOT(type=);
23379     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23381     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
23383     +    /*--- EM_REPORT_SGPLOT 1. identify the plot statement ---*/
23385     +    %let axisstmt = xaxis;
23387     +    %if &type eq LINEPLOT   %then %let plotstmt = series;
23388     +    %if &type eq PLOT       %then %let plotstmt = series;
23389     +    %if &type eq SCATTER    %then %let plotstmt = scatter;
23390     +    %if &type eq BARPLOT    %then %let plotstmt = vbar;
23391     +    %if &type eq HISTOGRAM  %then %let plotstmt = histogram;
23393     +    %if "&plotstmt" eq "vbar" and "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq "HORIZONTAL"
23394     +    %then %do;
23395     +        %let plotstmt = hbar;
23396     +        %let axisstmt = yaxis;
23397     +    %end;
23398     +    /*--- EM_REPORT_SGPLOT 2. options for plot statements ---*/
23400     +    %let plotopt = ;
23402     +    %if &type eq LINEPLOT %then %do;
23403     +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
23404     +    %end;
23405     +    %else %if &type eq PLOT %then %do;
23406     +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
23407     +    %end;
23408     +    %else %if &type eq SCATTER %then %do;
23409     +        %if "&EM_REPORT_KEY_GROUP" ne ""     %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
23410     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt freq=&EM_REPORT_KEY_FREQUENCY);
23411     +        %let plotopt = %str(&plotopt markerattrs=(symbol=squarefilled));
23412     +    %end;
23413     +    %else %if &type eq BARPLOT %then %do;
23414     +        %let plotopt = missing;
23415     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt response=&EM_REPORT_KEY_FREQUENCY);
23416     +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_SUBGROUP);
23417     +        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_GROUP);
23418     +    %end;
23419     +    %else %if &type eq HISTOGRAM %then %do;
23420     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt freq=&EM_REPORT_KEY_FREQUENCY);
23421     +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_SUBGROUP);
23422     +/*        %if "&EM_REPORT_KEY_Y" ne ""         %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_Y);*/
23423     +    %end;
23425     +    %if "&plotopt" ne "" %then %let plotopt = %str(/ &plotopt);
23427     +    /*--- EM_REPORT_SGPLOT 3. handle _ANYNUMERIC_ or BYSET---*/
23429     +    %if &type eq PLOT and "&EM_REPORT_KEY_Y" eq "_ANYNUMERIC_" %then %do;
23431     +         proc contents data=&pdat out=_rptsgplot_temp(keep=name type) noprint;
23432     +         run;
23434     +         /*** For _ANYNUMERIC_, get the first numeric variable that is not X ***/
23435     +         data _null_;
23436     +            set _rptsgplot_temp(where=(type eq 1 and upcase(name) ne "%upcase(&EM_REPORT_KEY_X)"));
23437     +            if _n_=1 then call symput("EM_REPORT_KEY_Y", strip(name));
23438     +         run;
23439     +    %end;
23441     +    /*--- EM_REPORT_SGPLOT 4. call SGPLOT ---*/
23443     +    ods graphics / discretemax=5000;
23445     +    proc sgplot data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
23447     +        %if "&EM_REPORT_KEY_Y" ne "" and "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
23448     +            %let i = 1;
23449     +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
23450     +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
23451     +                %let i = %eval(&i+1);
23452     +                &plotstmt
23453     +                    x = &EM_REPORT_KEY_X  y = &thisY  &plotopt
23454     +                ;
23455     +            %end;
23456     +        %end;
23457     +        %if "&EM_REPORT_KEY_Y2" ne "" and "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
23458     +            &plotstmt
23459     +                x = &EM_REPORT_KEY_X  y = &EM_REPORT_KEY_Y2  &plotopt
23460     +            ;
23461     +        %end;
23462     +        %if "&type" eq "BARPLOT" %then %do;
23463     +            &plotstmt
23464     +                &EM_REPORT_KEY_X &plotopt;
23465     +            &axisstmt
23466     +                type=discrete /* discreteorder=data */
23467     +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do; display=(NOVALUES NOTICKS) %end;
23468     +            ;
23469     +        %end;
23470     +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do;
23471     +            &plotstmt
23472     +                &EM_REPORT_KEY_X &plotopt;
23473     +            &axisstmt
23474     +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do; display=(NOVALUES NOTICKS) %end;
23475     +            ;
23476     +        %end;
23477     +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
23478     +            &plotstmt &EM_REPORT_KEY_X;
23479     +        %end;
23480     +        %if "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
23481     +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF / axis = y; %end;
23482     +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF / axis = x; %end;
23483     +        %end;
23485     +        keylegend;
23486     +    run; quit;
23488     +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do;
23489     +        %EM_REPORT_makeMultiColumn(dat=&pdat.&EM_REPORT_KEY_WHERECLAUSE, vars=effectnum variable classlevel coefficient tvalue pvalue, split=2);
23490     +    %end;
23492     +    ods graphics / discretemax=100;
23493     +    title1; title2; title3;
23495     +%mend EM_REPORT_SGPLOT;
23497     +/*---------------------------------------------------------*/
23498     +* Plots rendered by SGSILK: DTREE, ICICLE, PIE;
MPRINT(EM_REPORT_CREATE):   * Plots rendered by SGSILK: DTREE, ICICLE, PIE;
23499     +/*---------------------------------------------------------*/
23501     +%macro EM_REPORT_SGSILK(type=);
23503     +    %local temp path view datax viewfile dataxfile;
23504     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23506     +    /*--- EM_REPORT_SGSILK 1. define the XML files for view and data ---*/
23508     +    %let temp      = %nrbquote(%sysfunc(PATHNAME(&EM_REPORT_LIB)));
23509     +    %let path      = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
23510     +    %let view      = view.xml;
23511     +    %let datax     = data.xml;
23512     +    %let viewfile  = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
23513     +    %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
23515     +    /*--- EM_REPORT_SGSILK 2. Call SGRENGER and setup GTL tagsets---*/
23517     +    ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
23518     +    ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8" style=styles.em_style;
23520     +    %if &type eq DTREE %then %do;   /****** DTREE ******/
23522     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
23523     +            dynamic var1 = "&EM_REPORT_KEY_ID";
23524     +            dynamic var2 = "&EM_REPORT_KEY_PARENT";
23525     +            dynamic var3 = "&EM_REPORT_KEY_NODETEXT";
23526     +            dynamic var4 = "&EM_REPORT_KEY_NODECOLOR";
23527     +            dynamic var5 = "&EM_REPORT_KEY_ABOVETEXT";
23528     +            dynamic var6 = "&EM_REPORT_KEY_BELOWTEXT";
23529     +            dynamic var7 = "&EM_REPORT_KEY_LINKWIDTH";
23530     +        run;
23532     +        ods tagsets.gtl event=LayoutRegion(start)
23533     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
23535     +        ods tagsets.gtl event=DecisionTree
23536     +            options( id        = "&EM_REPORT_KEY_ID"
23537     +                     parent    = "&EM_REPORT_KEY_PARENT"
23538     +                     nodetext  = "&EM_REPORT_KEY_NODETEXT"
23539     +                     abovetext = "&EM_REPORT_KEY_ABOVETEXT"
23540     +                     belowtext = "&EM_REPORT_KEY_BELOWTEXT"
23541     +                     linkwidth = "&EM_REPORT_KEY_LINKWIDTH"
23542     +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR" );
23544     +    %end;
23545     +    %else %if &type eq ICICLE %then %do;      /****** ICICLE ******/
23547     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
23548     +            dynamic var1="&EM_REPORT_KEY_ID";
23549     +            dynamic var2="&EM_REPORT_KEY_PARENT";
23550     +            dynamic var3="&EM_REPORT_KEY_NODECOLOR";
23551     +            dynamic var4="&EM_REPORT_KEY_NODESIZE";
23552     +        run;
23554     +        ods tagsets.gtl event=LayoutRegion(start)
23555     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
23557     +        ods tagsets.gtl event=Icicle
23558     +            options( id        = "&EM_REPORT_KEY_ID"
23559     +                     parent    = "&EM_REPORT_KEY_PARENT"
23560     +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR"
23561     +                     nodesize  = "&EM_REPORT_KEY_NODESIZE" );
23563     +    %end;
23564     +    %else %if &type eq PIE %then %do;      /****** PIE ******/
23566     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
23567     +            dynamic var1="&EM_REPORT_KEY_X" var2="&EM_REPORT_KEY_Y";
23568     +        run; quit;
23570     +        ods tagsets.gtl event=LayoutRegion(start)
23571     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
23573     +        ods tagsets.gtl event=Pie
23574     +            options( category = "&EM_REPORT_KEY_X"
23575     +                     response = "&EM_REPORT_KEY_Y"
23576     +                     pielabeldisplay = "1"         );
23578     +    %end;
23580     +    ods tagsets.gtl event=LayoutRegion(finish);
23581     +    ods tagsets.gtl close;
23583     +    /*--- EM_REPORT_SGSILK 3. Call SGSILK to render the graph---*/
23585     +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
23586     +    proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
23587     +    title1; title2; title3;
23588     +%mend;
23590     +/*---------------------------------------------------------*/
23591     +* DENDROGRAM <- PROC TREE;
MPRINT(EM_REPORT_CREATE):   * DENDROGRAM <- PROC TREE;
23592     +/*---------------------------------------------------------*/
23594     +%macro EM_REPORT_DENDROGRAM() ;
23596     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23598     +    *goptions device=&EM_REPORT_GDEVICE ;
23599     +    goptions reset=all device=&EM_REPORT_GDEVICE;
23601     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
23603     +    axis1 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt ) ;
23604     +    axis2 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt angle=90 ) ;
23606     +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
23608     +    proc tree data=&pdat.&EM_REPORT_KEY_WHERECLAUSE horizontal haxis=axis1 vaxis=axis2;
23609     +        height &EM_REPORT_KEY_HEIGHT;
23610     +        name   &EM_REPORT_KEY_NAME;
23611     +        parent &EM_REPORT_KEY_PARENT;
23612     +    run; quit;
23614     +    title1; title2; title3 ;
23615     +    axis1; axis2;
23617     +%mend EM_REPORT_DENDROGRAM;
23619     +/*---------------------------------------------------------*/
23620     +* EVENTPLOT <- SGSCATTER;
MPRINT(EM_REPORT_CREATE):   * EVENTPLOT <- SGSCATTER;
23621     +/*---------------------------------------------------------*/
23623     +%macro EM_REPORT_EVENTPLOT();
23625     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23627     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
23629     +    proc sgscatter data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
23630     +        plot (_cumulative_event_count_ _marginal_event_rate_ _event_count_ _cumulative_event_rate_)
23631     +            * _cutoff_score_ / group=datarole join=() markerattrs=(size=0) grid;
23632     +    run; quit;
23634     +    title1; title2; title3 ;
23636     +%mend EM_REPORT_EVENTPLOT;
23638     +/*---------------------------------------------------------*/
23639     + * EM_REPORT_ITERATIONPLOT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_ITERATIONPLOT ;
23640     + * create plots of iterations: neural, stepwise, tree, etc..;
MPRINT(EM_REPORT_CREATE):   * create plots of iterations: neural, stepwise, tree, etc..;
23641     +/*---------------------------------------------------------*/
23643     +%macro EM_REPORT_ITERATIONPLOT();
23645     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23646     +    %let X    = &EM_REPORT_KEY_X;
23648     +    title1 "&EM_REPORT_TTL1";
23649     +    title2 "&EM_REPORT_TTL2";
23650     +    title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_mdliterationplot_title, NOQUOTE))";
23652     +    %local _misc_ _vmisc_ _ase_ _vase_ ;
23653     +    data _null_ ;
23654     +        set &pdat(obs=2) end=eof;
23655     +        if eof then do ;
23656     +            call symput('_ase_',_ase_);
23657     +            call symput('_vase_',_vase_);
23658     +            call symput('_misc_',_misc_);
23659     +            call symput('_vmisc_',_vmisc_);
23660     +        end;
23661     +    run;
23663     +    %let dsid = %sysfunc(open(&pdat));
23664     +    %if &dsid %then %do;
23665     +        %let _ase_ = %sysfunc(VARNUM(&dsid, _ase_));
23666     +        %let _vase_ = %sysfunc(VARNUM(&dsid, _vase_));
23667     +        %let _misc_ = %sysfunc(VARNUM(&dsid, _misc_));
23668     +        %let _vmisc_ = %sysfunc(VARNUM(&dsid, _vmisc_));
23669     +    %end;
23670     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
23672     +    %if "&_ase_"   eq "." %then %let _ase_   = 0;
23673     +    %if "&_vase_"  eq "." %then %let _vase_  = 0;
23674     +    %if "&_misc_"  eq "." %then %let _misc_  = 0;
23675     +    %if "&_vmisc_" eq "." %then %let _vmisc_ = 0;
23677     +    %put &_ase_ &_vase_ &_misc_ &_vmisc_;
23679     +    %if &_vmisc_ ne 0 %then %do;
23680     +        proc sql noprint;
23681     +            select count(*) into :nonMiss_vmisc from &pdat where _vmisc_ ne .;
23682     +        quit;
23683     +    %end;
23684     +    %else %do;
23685     +        %let nonMiss_vmisc = 0;
23686     +    %end;
23688     +    ods path(prepend) work.templat(update);
23689     +    proc template;
23690     +        define statgraph em.IterationPlot / store=work.templat;
23691     +            begingraph;
23692     +                entrytitle "&EM_REPORT_TTL1";
23693     +                entrytitle "&EM_REPORT_TTL2";
23694     +                entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_mdliterationplot_title, NOQUOTE))";
23696     +              layout lattice / order=columnmajor rows=1 rowdatarange=data columngutter=10;
23698     +                %if &_ase_ ne 0 or &_vase_ ne 0 %then %do;
23699     +                    layout overlay / cycleattrs=true
23700     +                        xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
23701     +                        yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, stat_ase_vlabel, NOQUOTE))");
23702     +                        %if &_ase_ ne 0 %then %do ;
23703     +                            seriesplot x=&X y=_ASE_ /  markerattrs=(size=0) display=all name='train'
23704     +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_roletrain_value, NOQUOTE))";
23705     +                        %end;
23706     +                        %if &_vase_  ne 0 %then %do ;
23707     +                            seriesplot x=&X y=_VASE_ /  markerattrs=(size=0) display=all name='validate'
23708     +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rolevalidate_value, NOQUOTE))";
23709     +                        %end;
23710     +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline x=&EM_REPORT_KEY_XREF; %end;
23711     +                    endlayout;
23712     +                %end;
23714     +                %if &_misc_ ne 0 or ( &_vmisc_ ne 0 and &nonMiss_vmisc ne 0) %then %do;
23715     +                    layout overlay / cycleattrs=true
23716     +                        xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
23717     +                        yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_misclassrate_vlabel, NOQUOTE))");
23718     +                        %if &_misc_ ne 0 %then %do;
23719     +                            seriesplot x=&X y=_MISC_ /  markerattrs=(size=0) display=all;
23720     +                        %end;
23721     +                        %if &_vmisc_  ne 0 %then %do ;
23722     +                            seriesplot x=&X y=_VMISC_ /  markerattrs=(size=0) display=all;
23723     +                        %end;
23724     +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline x=&EM_REPORT_KEY_XREF; %end;
23725     +                    endlayout;
23726     +                %end;
23728     +                sidebar /  align=bottom;
23729     +                    layout overlay;
23730     +                        discretelegend 'train' 'validate' / down=1 order=columnmajor;
23731     +                    endlayout;
23732     +                endsidebar;
23733     +              endlayout;
23734     +            endgraph;
23735     +        end;
23736     +    run;
23738     +    proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmprpt_iterdat;
23739     +        by &X;
23740     +    run;
23742     +    proc sgrender data=_tmprpt_iterdat template='em.IterationPlot';
23743     +    run;
23744     +    title1; title2; title3;
23746     +    proc delete data=_tmprpt_iterdat; run;
23748     +%mend  EM_REPORT_ITERATIONPLOT;
23750     +/* for hpdmassess */
23752     +%macro EM_REPORT_HPDMASSESS();
23754     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23756     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
23758     +    /*--- EM_REPORT_HPDMASSESS 1. idenfity the variables     ---*/
23760     +    %let dsid = %sysfunc(open(&pdat));
23761     +    %if &dsid %then %do;
23762     +        %let lift     = %sysfunc(VARNUM(&dsid, lift));
23763     +        %let c_lift   = %sysfunc(VARNUM(&dsid, c_lift));
23764     +        %let mean1    = %sysfunc(VARNUM(&dsid, target_mean));
23765     +        %let mean2    = %sysfunc(VARNUM(&dsid, predicted_mean));
23766     +        %let datarole = %sysfunc(VARNUM(&dsid, &EM_REPORT_KEY_GROUP));
23767     +    %end;
23768     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
23770     +    %if "&lift"     eq "."  %then %let lift     = 0;
23771     +    %if "&c_lift"   eq "."  %then %let c_lift   = 0;
23772     +    %if "&mean1"    eq "."  %then %let mean1   = 0;
23773     +    %if "&mean2"    eq "."  %then %let mean2   = 0;
23774     +    %if "&datarole" eq "."  %then %let datarole = 0;
23776     +    %put &lift &c_lift &mean1 &mean2 &datarole;
23778     +    %if &lift ne 0 and &c_lift ne 0 %then %do;
23779     +        %let hpdm_plot = 1;
23780     +        %let hpdm_var1 = lift;
23781     +        %let hpdm_var2 = c_lift;
23782     +        %let hpdm_lbl1 = assmt_lift_vlabel;
23783     +        %let hpdm_lbl2 = assmt_liftc_vlabel;
23784     +    %end;
23785     +    %else
23786     +    %if &mean1 ne 0 and &mean2 ne 0
23787     +    %then %do;
23788     +        %let hpdm_plot = 1;
23789     +        %let hpdm_var1 = target_mean;
23790     +        %let hpdm_var2 = predicted_mean;
23791     +        %let hpdm_lbl1 = rpt_rpttargetmean_vlabel;
23792     +        %let hpdm_lbl2 = rpt_rptpredmean_vlabel;
23793     +    %end;
23794     +    %else %do;
23795     +        %let hpdm_plot = 0;
23796     +        %let hpdm_var1 = ;
23797     +        %let hpdm_var2 = ;
23798     +        %let hpdm_lbl1 = ;
23799     +        %let hpdm_lbl2 = ;
23800     +    %end;
23801     +    /*--- EM_REPORT_HPDMASSESS 2. call SGPANEL                ---*/
23803     +    %if &hpdm_plot eq 1 %then %do;
23804     +        ods path(prepend) work.templat(update);
23805     +        proc template;
23806     +            define statgraph em.hpdmassess / store=work.templat;
23807     +                begingraph;
23808     +                    entrytitle "&EM_REPORT_TTL1";
23809     +                    entrytitle "&EM_REPORT_TTL2";
23810     +                    entrytitle "&EM_REPORT_TTL3";
23812     +                    layout lattice / order=columnmajor rows=1 rowdatarange=data columngutter=10;
23814     +                        %if &datarole ne 0 %then %do;
23815     +                            layout overlay / cycleattrs=true
23816     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
23817     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
23818     +                            ;
23819     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 / name='var1' markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
23820     +                            endlayout;
23821     +                            layout overlay / cycleattrs=true
23822     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
23823     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl2, NOQUOTE))")
23824     +                            ;
23825     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /  markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
23826     +                            endlayout;
23827     +                            sidebar /  align = bottom;
23828     +                                layout overlay;
23829     +                                    discretelegend 'var1' / down=1 order=columnmajor;
23830     +                                endlayout;
23831     +                            endsidebar;
23832     +                        %end;
23833     +                        %else %do;
23834     +                            layout overlay / cycleattrs=true
23835     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
23836     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
23837     +                            ;
23838     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 /  markerattrs=(size=0) display=all name='var1'
23839     +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))";
23840     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /  markerattrs=(size=0) display=all name='var2'
23841     +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl2, NOQUOTE))";
23842     +                            endlayout;
23843     +                            sidebar /  align=bottom;
23844     +                                layout overlay;
23845     +                                    discretelegend 'var1' 'var2' / down=1 order=columnmajor;
23846     +                                endlayout;
23847     +                            endsidebar;
23848     +                        %end;
23849     +                    endlayout;
23850     +                endgraph;
23851     +            end;
23852     +        run;
23854     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template='em.hpdmassess'; run;
23855     +    %end;
23857     +    title1; title2; title3;
23859     +%mend EM_REPORT_HPDMASSESS;
23861     +/* for heatmap version of histograms */
23863     +%macro EM_REPORT_HEATMAPTEMPLATE();
23865     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
23867     +    %if "&EM_REPORT_KEY_FREQUENCY" ne "" "&EM_REPORT_KEY_X" ne "" "&EM_REPORT_KEY_Y" ne "" %then %do;
23869     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
23871     +        proc template;
23872     +        define statgraph heatmap;
23873     +        begingraph;
23874     +        entrytitle "&EM_REPORT_TTL1";
23875     +        entrytitle "&EM_REPORT_TTL2";
23876     +        entrytitle "&EM_REPORT_TTL3";
23877     +        layout overlay;
23878     +        heatmapparm x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y colorresponse=&EM_REPORT_KEY_FREQUENCY / name="map" display=all;
23879     +          continuouslegend "map";
23880     +        endlayout;
23881     +        endgraph;
23882     +        end;
23884     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=heatmap; run;
23886     +    %end;
23888     +    title1; title2; title3;
23890     +%mend EM_REPORT_HEATMAPTEMPLATE;
23893     +/* for assessment plot */
23895     +%macro EM_REPORT_EMRANK(pdat=, lattice=no) ;
23897     +    data _tmp_dat;
23898     +        set &pdat.&EM_REPORT_KEY_WHERECLAUSE;
23899     +    run;
23900     +    %let pdat = _tmp_dat;
23902     +    %let varList = GAIN CAPC LIFTC RESPC _MEANP_ _MINP_ _MAXP_;
23903     +    %let varNum = 7;
23904     +    %let modelVar = model;
23905     +    %do k = 1 %to &varNum;
23906     +        %let thisVar = %scan(&varList,&k,' ');
23907     +        %let var_&thisVar = ;
23908     +    %end;
23910     +/*-----------------------------------------------------------------------------*/
23912     +    proc contents data=&pdat out=_tmp_content(keep=name) noprint;
23913     +    run;
23915     +    %let is_cat = 0;
23916     +    %let has_loop = 0;
23917     +    %let has_where = 0;
23919     +    data _null_;
23920     +        set _tmp_content;
23921     +        name=strip(upcase(name));
23922     +        format _tmp_list $500.;
23923     +        _tmp_list = symget('varList');
23925     +        do k = 1 to &varNum;
23926     +            if name eq scan(_tmp_list,k,' ') then call symput(cats('var_',name),name);
23927     +        end;
23929     +        if name eq '_LOOP_'  then call symput('has_loop','1');
23930     +        if name eq '_WHERE_' then call symput('has_where','1');
23931     +        if name eq 'GAIN'    then call symput('is_cat','1');
23932     +    run;
23934     +    %if &has_loop eq 1 %then %do;
23935     +        %if &has_where eq 1 %then %do;
23936     +            proc sql noprint;
23937     +                select count(*) into :nn1 from &pdat;
23938     +                select count(*) into :nn2 from &pdat where _where_ is missing;
23939     +            quit;
23940     +            %if &nn1 ne &nn2
23941     +                %then %let modelvar = _where_;
23942     +                %else %let modelvar = ;
23943     +        %end;
23944     +        %else %do;
23945     +            %let modelvar = ;
23946     +        %end;
23947     +    %end;
23949     +/*-----------------------------------------------------------------------------*/
23951     +    %if "&lattice" eq "yes" %then %do ;
23953     +        proc sql noprint;
23954     +            select count(distinct datarole)  into :ndataroles from &pdat;
23955     +            select distinct datarole into :drole1-:drole%left(&ndataroles) from &pdat;
23956     +        quit;
23958     +        %do d =1 %to &ndataroles;
23960     +            proc sort data=&pdat(where=(datarole eq "&&&drole&d")) out=_tmp_emrp;
23961     +                by &modelvar decile;
23962     +            run;
23964     +            title1 "&EM_REPORT_TTL1";
23965     +            title2 "&EM_REPORT_TTL2";
23966     +            title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_multiplemdlassess_title, NOQUOTE, &&&drole&d))";
23967     +            %if "&EM_REPORT_KEY_WHERE" ne " " %then %do;
23968     +                title4 "&EM_REPORT_KEY_WHERE";
23969     +            %end;
23971     +            proc sgscatter data=_tmp_emrp;
23972     +                plot
23973     +                    %if &is_cat eq 1 %then %do;
23974     +                        (&var_gain &var_liftc &var_capc &var__meanp_) * decile
23975     +                    %end;
23976     +                    %else %do;
23977     +                        (&var__meanp_ &var__minp_ &var__maxp_) * decile
23978     +                    %end;
23979     +                    / %if &modelvar ne %then %do; group=&modelvar %end;
23980     +                        join=() markerattrs=(size=0) grid
23981     +                ;
23982     +            run; quit;
23983     +            title1; title2; title3; title4;
23984     +        %end;
23985     +    %end;
23986     +    %else %do;
23988     +        proc sort data=&pdat out=_tmp_emrp;
23989     +            by target datarole;
23990     +        run;
23992     +        title1 "&EM_REPORT_TTL1";
23993     +        title2 "&EM_REPORT_TTL2";
23994     +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_singlemdlassess_title, NOQUOTE, &em_report_key_where))";
23996     +        %if &is_cat eq 1 %then %do;
23997     +            %if "&var_gain" ne " " %then %do;
23998     +                proc sgpanel data=_tmp_emrp;
23999     +                    panelby datarole;
24000     +                    series x=decile y=gain; series x=decile y=basegain; series x=decile y=bestgain;
24001     +                    rowaxis grid; colaxis grid;
24002     +                run; quit;
24003     +            %end;
24004     +            %if "&var_liftc" ne " " %then %do;
24005     +                proc sgpanel data=_tmp_emrp;
24006     +                    panelby datarole;
24007     +                    series x=decile y=liftc; series x=decile y=baseliftc; series x=decile y=bestliftc;
24008     +                    rowaxis grid; colaxis grid;
24009     +                run; quit;
24010     +            %end;
24011     +            %if "&var_capc" ne " " %then %do;
24012     +                proc sgpanel data=_tmp_emrp;
24013     +                    panelby datarole;
24014     +                    series x=decile y=capc; series x=decile y=basecapc; series x=decile y=bestcapc;
24015     +                    rowaxis grid; colaxis grid;
24016     +                run; quit;
24017     +            %end;
24018     +        %end;
24019     +        %else %do;
24020     +            %if "&var__meanp_" ne " " %then %do ;
24021     +                proc sgpanel data=_tmp_emrp;
24022     +                    panelby datarole;
24023     +                    series x=decile y=_meanp_; series x=decile y=_targetmean_;
24024     +                    rowaxis grid; colaxis grid;
24025     +                run; quit;
24026     +            %end;
24027     +            %if "&var__minp_" ne " " %then %do ;
24028     +                proc sgpanel data=_tmp_emrp;
24029     +                    panelby datarole;
24030     +                    series x=decile y=_minp_; series x=decile y=_targetmin_;
24031     +                    rowaxis grid; colaxis grid;
24032     +                run; quit;
24033     +            %end;
24034     +            %if "&var__maxp_" ne " " %then %do ;
24035     +                proc sgpanel data=_tmp_emrp;
24036     +                    panelby datarole;
24037     +                    series x=decile y=_maxp_; series x=decile y=_targetmax_;
24038     +                    rowaxis grid; colaxis grid;
24039     +                run; quit;
24040     +            %end;
24041     +        %end;
24043     +        title1; title2; title3;
24044     +    %end;
24046     +%mend;
24049     +%macro EM_REPORT_LATTICE();
24051     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24053     +    %let numx = 1;
24054     +    %let numy = 1;
24056     +    proc sql noprint;
24057     +        %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
24058     +            select count(distinct &EM_REPORT_KEY_LATTICEX) into :numx from &pdat.&EM_REPORT_KEY_WHERECLAUSE;
24059     +        %end;
24060     +        %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
24061     +            select count(distinct &EM_REPORT_KEY_LATTICEY) into :numy from &pdat.&EM_REPORT_KEY_WHERECLAUSE;
24062     +        %end;
24063     +    quit;
24065     +    %let numrows=&numy;
24066     +    %let numcols=&numx;
24067     +    %let totalnum = %eval(&numx * &numy);
24069     +    %if &totalnum gt 6 %then %do;
24070     +        %if &totalnum le 18 %then %let numcols=3;
24071     +        %else %if &totalnum le 24 %then %let numcols=4;
24072     +        %else %if &totalnum le 30 %then %let numcols=5;
24073     +        %else %let numcols=3;
24074     +    %end;
24076     +    %if &totalnum gt 6 %then %do;
24077     +        %let numrows  = %sysevalf(&totalnum / &numcols);
24078     +        %let numrows  = %sysfunc(ceil(&numrows));
24079     +        %if &numrows ge 6 %then %let numrows=6;
24080     +    %end;
24082     +    %if (("&EM_REPORT_KEY_LATTICETYPE" eq "BAR") OR ("&EM_REPORT_KEY_LATTICETYPE" eq "HISTOGRAM"))
24083     +    %then %do;
24085     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24086     +        %if "&em_report_key_whereclause" ne "" %then %do ;
24087     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, &em_report_key_where))";
24088     +        %end;
24090     +        proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
24091     +            panelby
24092     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
24093     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
24094     +              /
24095     +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows /*novarname*/ %end;
24096     +                uniscale=column
24097     +            ;
24098     +            /* originally using frequency so keeping this here; */
24099     +            /* eventrate plot in binning sets y var as response so added y as well */
24101     +            %if "&EM_REPORT_KEY_LATTICETYPE" eq "HISTOGRAM" %then %do;
24102     +                %if "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
24103     +                    histogram &EM_REPORT_KEY_X;
24104     +                %end;
24105     +                %else %do;
24106     +                    histogram &EM_REPORT_KEY_X / freq = &EM_REPORT_KEY_FREQUENCY;
24107     +                %end;
24108     +            %end;
24109     +            %else %do;
24110     +                %if "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq "HORIZONTAL"
24111     +                %then %do; hbar %end;
24112     +                %else %do; vbar %end;
24113     +                    &EM_REPORT_KEY_X /
24114     +                    %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do; response=&EM_REPORT_KEY_FREQUENCY %end;
24115     +                    %if "&EM_REPORT_KEY_Y" ne ""         %then %do; response=&EM_REPORT_KEY_Y         %end;
24116     +                    %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %do; group=&EM_REPORT_KEY_SUBGROUP     %end;
24117     +                        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %do; group=&EM_REPORT_KEY_GROUP %end;
24118     +                ;
24119     +            %end;
24120     +            colaxis grid fitpolicy=rotatethin /* discreteorder=data */;
24121     +            rowaxis grid ;
24122     +        run; quit;
24124     +        /* special treatments */
24125     +        %if "&EM_REPORT_KEY_DESCRIPTION" eq "EVENTRATE" %then %do ;
24126     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
24128     +                %let wtevexist=0;
24129     +                %let dsid = %sysfunc(open(work.pdl));
24130     +                %if &dsid %then %do;
24131     +                    %let wtevexist = %sysfunc(VARNUM(&dsid, wtev));
24132     +                %end;
24133     +                %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24135     +                %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
24137     +                proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label contents='';
24138     +                    var display_var _label_ _group_ role eventRate
24139     +                        %if &wtevexist ne 0 %then %do; wtev %end;;
24140     +                run;
24141     +            %end;
24142     +        %end;
24143     +    %end;
24144     +    %else %if (("&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT") or ("&EM_REPORT_KEY_LATTICETYPE" eq "PLOT")) %then %do;
24146     +        proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmp_pdl;
24147     +            by
24148     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
24149     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
24150     +            ;
24151     +        run;
24153     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24154     +        %if "&em_report_key_whereclause" ne "" %then %do ;
24155     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, &em_report_key_where))";
24156     +        %end;
24158     +        proc sgpanel data=_tmp_pdl;
24159     +            panelby
24160     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
24161     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
24162     +              /
24163     +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows /*novarname*/ %end;
24164     +                uniscale=column
24165     +            ;
24166     +            %let i = 1;
24167     +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
24168     +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
24169     +                %let i = %eval(&i+1);
24170     +                series x=&EM_REPORT_KEY_X y=&thisY
24171     +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; / group=&EM_REPORT_KEY_GROUP %end;
24172     +                ;
24173     +            %end;
24174     +            %if "&EM_REPORT_KEY_Y2" ne "" %then %do;
24175     +                series x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y2
24176     +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; / group=&EM_REPORT_KEY_GROUP %end;
24177     +                ;
24178     +            %end;
24179     +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF / axis = y; %end;
24180     +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF / axis = x; %end;
24181     +            colaxis grid fitpolicy=rotatethin;
24182     +            rowaxis grid;
24183     +        run; quit;
24184     +    %end;
24186     +%mend EM_REPORT_LATTICE;
24188     +/*---------------------------------------------------------*/
24189     + * EM_REPORT_SCOREDIST2 ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST2 ;
24190     + *     Score Distribution 2;
MPRINT(EM_REPORT_CREATE):   * Score Distribution 2;
24191     +/*---------------------------------------------------------*/
24193     +%macro EM_REPORT_SCOREDIST2() ;
24195     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24197     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24199     +    proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
24200     +        panelby
24201     +            %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
24202     +            %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
24203     +          / rows=1 uniscale=row layout=lattice
24204     +        ;
24205     +        vbar &EM_REPORT_KEY_X
24206     +            %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do; / response=count %end;
24207     +        ;
24208     +        colaxis fitpolicy=rotatethin;
24209     +    run; quit;
24211     +%mend EM_REPORT_SCOREDIST2;
24213     +/*---------------------------------------------------------*/
24214     + * EM_REPORT_SCOREDIST ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST ;
24215     + *     Score Distribution ;
MPRINT(EM_REPORT_CREATE):   * Score Distribution ;
24216     +/*---------------------------------------------------------*/
24218     +%macro EM_REPORT_SG4SCOREDIST(y1=,y2=,str1=,str2=,rowstr=);
24219     +    proc sgpanel data=_tmpdat;
24220     +        panelby datarole;
24221     +        %if "&y1" ne " " %then %do;
24222     +            series x=score y=&y1 / legendlabel="%sysfunc(sasmsg(sashelp.dmine, &str1, NOQUOTE))";
24223     +        %end;
24224     +        %if "&y2" ne " " %then %do;
24225     +            series x=score y=&y2 / legendlabel="%sysfunc(sasmsg(sashelp.dmine, &str2, NOQUOTE))";
24226     +        %end;
24227     +        rowaxis grid label="%sysfunc(sasmsg(sashelp.dmine, &rowstr, NOQUOTE))";
24228     +        colaxis grid;
24229     +    run; quit;
24230     +%mend;
24232     +%macro EM_REPORT_SCOREDIST(data=) ;
24234     +    data _tmp_scoredist;
24235     +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
24236     +    run;
24238     +    proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum name) noprint;
24239     +    run;
24241     +    /*--------------------------------------------------------------------------*/
24243     +    %let var_targetMean = ;
24244     +    %let var_targetMax = ;
24245     +    %let var_targetMin = ;
24246     +    %let is_cat = 0;
24247     +    %let modeldescnum = 0;
24248     +    %let loopnum = 0;
24249     +    %let has_where = 0;
24250     +    %let has_target = 0;
24252     +    data _null_;
24253     +        set _tmp_content;
24254     +        name=strip(upcase(name));
24255     +        if name eq 'MODELDESCRIPTION'   then call symput('modeldescnum',  put(varnum,6.));
24256     +        if name eq '_LOOP_'             then call symput('loopnum',       put(varnum,6.));
24257     +        if name eq '_WHERE_'            then call symput('has_where',     '1');
24258     +        if name eq '_TARGET_'           then call symput('has_target',    '1');
24259     +        if name eq '_TARGETMEAN_'       then call symput('var_targetMean',name);
24260     +        if name eq '_TARGETMAX_'        then call symput('var_targetMax', name);
24261     +        if name eq '_TARGETMIN_'        then call symput('var_targetMin', name);
24262     +        if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat',        '1');
24263     +    run;
24265     +    /*--------------------------------------------------------------------------*/
24267     +    %if (&modeldescnum eq 0) and (&loopnum eq 0) %then %do;
24268     +        %let modelvar = ;
24269     +        %let nmodels = 1;
24270     +        %let modeldat1 = _tmp_scoredist;
24271     +    %end;
24272     +    %else %do;
24274     +        %if &loopnum gt 0
24275     +            %then %do;
24276     +                proc sql noprint;
24277     +                    select count(*) into :nn1 from _tmp_scoredist;
24278     +                    select count(*) into :nn2 from _tmp_scoredist where _where_ is missing;
24279     +                quit;
24280     +                %if &nn1 ne &nn2
24281     +                    %then %let modelvar = _where_;
24282     +                    %else %let modelvar = target;
24283     +            %end;
24284     +            %else %let modelvar = model;
24286     +        %let nmodels = 1;
24287     +        proc sql noprint;
24288     +            select count(distinct &modelvar) into :nmodels from _tmp_scoredist;
24289     +            select distinct &modelvar into :cond1-:cond%left(&nmodels) from _tmp_scoredist;
24290     +        quit;
24292     +        %do d = 1 %to &nmodels;
24293     +            %let modeldat&d = %str(_tmp_scoredist(where=(&modelvar eq "&&&cond&d")));
24294     +        %end;
24295     +    %end;
24297     +    /* --- loop through all models or _where_ for plots---*/
24299     +    %do d = 1 %to &nmodels;
24301     +        proc sort data=&&&modeldat&d out=_tmpdat;
24302     +            by &modelvar target datarole;
24303     +        run;
24305     +        title1 "&EM_REPORT_TTL1";
24306     +        title2 "&EM_REPORT_TTL2";
24307     +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistsingle_title, NOQUOTE, &em_report_key_where))";
24308     +        %if &nmodels gt 1 %then %do; title4 "&&&cond&d"; %end;
24310     +        %if &is_cat eq 1 %then %do;
24311     +            %EM_REPORT_SG4SCOREDIST(y1=percentageofevents, y2=percentageofnonevents,
24312     +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel, rowstr=assmt_percent_vlabel);
24313     +            %EM_REPORT_SG4SCOREDIST(y1=cumulativepercentageofevents, y2=cumulativepercentageofnonevents,
24314     +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel, rowstr=assmt_percentC_vlabel);
24315     +        %end;
24316     +        %else %do;
24317     +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMean,
24318     +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel, rowstr=rpt_mean_vlabel);
24319     +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMax,
24320     +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel, rowstr=rpt_maximum_vlabel);
24321     +        %end;
24323     +        proc delete data=_tmpdat; run;
24324     +        title1; title2; title3; title4;
24325     +    %end;
24327     +    /* --- loop through all models or _where_ for prints ---*/
24329     +    %do d = 1 %to &nmodels;
24331     +        proc sort data=&&&modeldat&d out=_tmpdat;
24332     +            by &modelvar target datarole;
24333     +        run;
24335     +        title1; title2; title3;
24336     +        %EM_REPORT_TABLETEXT(subtitle=rpt_scoredistnone_title);
24338     +        %if &is_cat eq 1 %then %do;
24339     +            proc print data=_tmpdat noobs label contents='';
24340     +                by &modelvar target datarole;
24341     +                var p_label numberofevents percentageofevents percentageofnonevents
24342     +                    cumulativepercentageofevents cumulativepercentageofnonevents ;
24343     +            run;
24344     +        %end;
24345     +        %else %do;
24346     +            proc print data=_tmpdat noobs label contents='';
24347     +                by &modelvar target datarole;
24348     +                var p_label _meanP_ _maxP_ _minP_ &var_targetMean &var_targetMax &var_targetMin;
24349     +            run;
24350     +        %end;
24351     +    %end;
24353     +%mend EM_REPORT_SCOREDIST;
24356     +%macro EM_REPORT_MULTIPLY2PLOT;
24358     +    data _tmp_dat;
24359     +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
24360     +    run;
24362     +    proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
24363     +    run;
24365     +    %let has_datarole = 0;
24366     +    data _null_;
24367     +        set _tmp_content;
24368     +        name=strip(upcase(name));
24369     +        if name eq "DATEROLE" then call symput('has_datarole','1');
24370     +    run;
24372     +    %if &has_datarole eq 1 %then %do;
24373     +        proc sql noprint;
24374     +            select count(distinct datarole) into :ndataroles from _tmp_dat;
24375     +            select distinct datarole into :drole1-:drole%left(&ndataroles) from _tmp_dat;
24376     +        quit;
24377     +    %end;
24378     +    %else %do;
24379     +        %let ndataroles = 1;
24380     +    %end;
24382     +    %if &ndataroles gt 1 %then %do;
24383     +        %do d=1 %to &ndataroles ;
24385     +            proc sort data=_tmp_dat(where=(datarole eq "&&&drole&d")) out=_tmp_empd;
24386     +                by datarole &EM_REPORT_KEY_X;
24387     +            run;
24389     +            title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24390     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitlethree_title, NOQUOTE, &&&drole&d))";
24392     +            proc sgplot data=_tmp_empd;
24393     +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
24394     +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
24395     +                %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline &EM_REPORT_KEY_YREF  / axis = y;  %end;
24396     +                %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline &EM_REPORT_KEY_Y2REF / axis = y2; %end;
24397     +            run; quit;
24398     +        %end;
24399     +    %end;
24400     +    %else %do;
24401     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24402     +        proc sgplot data=_tmp_dat;
24403     +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
24404     +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
24405     +            %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline &EM_REPORT_KEY_YREF  / axis = y;  %end;
24406     +            %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline &EM_REPORT_KEY_Y2REF / axis = y2; %end;
24407     +        run; quit;
24408     +    %end;
24410     +    title1; title2; title3; title4;
24412     +%mend EM_REPORT_MULTIPLY2PLOT;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_printmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PRINTMACROS.SOURCE.
24413     +/*---------------------------------------------------------*/
24414     + * EM_REPORT_NODE_TEXT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_NODE_TEXT ;
24415     + *      return the text label for a given node ;
MPRINT(EM_REPORT_CREATE):   * return the text label for a given node ;
24416     +/*---------------------------------------------------------*/
24418     +%macro EM_REPORT_NODE_TEXT(nodeid);
24419     +    %global EM_REPORT_NODE_TEXT ;
24420     +    %if not %sysfunc(exist(&em_report_lib..EM_NODEID)) %then %goto skip ;
24421     +    data _null_ ;
24422     +        set &em_report_lib..EM_NODEID ;
24423     +        where upcase(strip(nodeid)) eq upcase(strip("&nodeid")) ;
24424     +        call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
24425     +    run;
24426     +    %skip:
24427     +%mend EM_REPORT_NODE_TEXT;
24429     +/*---------------------------------------------------------*/
24430     + * EM_REPORT_TABLETEXT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_TABLETEXT;
24431     + *      print the ods texts in front of a table;
MPRINT(EM_REPORT_CREATE):   * print the ods texts in front of a table;
24432     +/*---------------------------------------------------------*/
24434     +%macro EM_REPORT_TABLETEXT(subtitle=);
24435     +%if %substr(%upcase(%sysfunc(strip(&subtitle))), 1, 19) eq VIEWS_DESCRIPTIONS_ %then %do;
24436     +    ods &EM_REPORT_FORMAT text=" ";
24437     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
24438     +    %let thisDVD = dmine;
24440     +    %let msg0 = views_descriptions_&em_report_key_description;
24441     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
24442     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
24443     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
24444     +    %end;
24445     +    %else %do;
24446     +        %let msg2=views_descriptions_&em_report_key_description;
24447     +    %end;
24449     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
24450     +    %then %do;
24451     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE))";
24452     +    %end;
24453     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
24454     +    %then %do;
24455     +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
24456     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE))";
24457     +            %let thisDVD = tmine;
24458     +        %end;
24459     +    %end;
24460     +    %else %do;
24461     +        ods &EM_REPORT_FORMAT text="&em_report_key_description";
24462     +    %end;
24464     +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
24465     +%end;
24466     +%else %do;
24467     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
24468     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
24469     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, &subtitle, NOQUOTE));
24470     +    %end;
24471     +    %else %do;
24472     +        %let msg2=%sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
24473     +    %end;
24475     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&subtitle))"
24476     +    %then %do;
24477     +        %let thisDVD = dmine;
24478     +    %end;
24479     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&subtitle))"
24480     +    %then %do;
24481     +        %let thisDVD = tmine;
24482     +    %end;
24483     +    %else %do;
24484     +        %let thisDVD = dmine;
24485     +    %end;
24487     +    ods &EM_REPORT_FORMAT text=" ";
24488     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
24489     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
24490     +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
24491     +%end;
24492     +%mend EM_REPORT_TABLETEXT;
24494     +/*---------------------------------------------------------*/
24495     + *  Print comparison of model fit stats;
MPRINT(EM_REPORT_CREATE):   * Print comparison of model fit stats;
24496     + *      used by EM_REPORT_DATA();
MPRINT(EM_REPORT_CREATE):   * used by EM_REPORT_DATA();
24497     +/*---------------------------------------------------------*/
24499     +%macro EM_REPORT_COMPAREFIT(data=) ;
24500     +    proc sort data=&data out=sd(drop=stat) ;
24501     +        by target datarole ;
24502     +    run ;
24503     +    %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitcomparison_title);
24504     +    proc print data=sd noobs label contents='' ;
24505     +        by target datarole ;
24506     +        label label="%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, NOQUOTE))";
24507     +    run;
24508     +%mend EM_REPORT_COMPAREFIT;
24510     +/*---------------------------------------------------------*/
24511     + * EM_REPORT_CLASSIFYTABT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_CLASSIFYTABT;
24512     + *      print the table in a lattice plot of classification charts;
MPRINT(EM_REPORT_CREATE):   * print the table in a lattice plot of classification charts;
24513     +/*---------------------------------------------------------*/
24515     +%macro EM_REPORT_CLASSIFYTAB();
24517     +    %if "&em_report_key_whereclause" eq "" %then %do ;
24518     +        %EM_REPORT_TABLETEXT(subtitle=rpt_eventclassification_title);
24519     +    %end; %else %do;
24520     +        ods &EM_REPORT_FORMAT text=" ";
24521     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
24522     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
24523     +        ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.dmine, rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
24524     +    %end;
24526     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24528     +    proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label contents='';
24529     +        label CORRECTTEXT= "%sysfunc(sasmsg(sashelp.dmine, rpt_state_vlabel, NOQUOTE))" percent="%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE))" ;
24530     +        by target datarole ;
24531     +        var from into correcttext count percent ;
24532     +    run;
24534     +%mend EM_REPORT_CLASSIFYTAB;
24536     +/*---------------------------------------------------------*/
24537     + * EM_REPORT_PROPERTIES;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_PROPERTIES;
24538     + *     print the properties table;
MPRINT(EM_REPORT_CREATE):   * print the properties table;
24539     +/*---------------------------------------------------------*/
24541     +%macro EM_REPORT_PROPERTIES(catalog=, dsname=work.properties);
24542     +    %if %sysfunc(cexist(&catalog)) %then %do;
24543     +        proc display cat=sashelp.emutil.prop2Ds.scl;
24544     +        run;
24545     +        %EM_REPORT_TABLETEXT(subtitle=rpt_props_title);
24546     +        %EM_REPORT_makeMultiColumn(dat=work.properties, vars=name value default, split=3);
24547     +        proc delete data=work.properties; run; quit;
24548     +    %end;
24549     +%mend EM_REPORT_PROPERTIES;
24551     +/*---------------------------------------------------------*/
24552     + * EM_REPORT_DATASOURCE ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_DATASOURCE ;
24553     + *     Report on data set starting a flow ;
MPRINT(EM_REPORT_CREATE):   * Report on data set starting a flow ;
24554     +/*--------------------------------------------------------*/
24555     +%macro EM_REPORT_DATASOURCE();
24557     +    proc transpose data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT out=temp_source;
24558     +        var _all_;
24559     +        format crdate NLDATM24.0 modate NLDATM24.0;
24560     +    run;
24562     +    /* prepare the data source table */
24563     +    data temp_source;
24564     +        set temp_source;
24565     +        rename col1 = value;
24566     +        col1 = right(col1);
24567     +        format label $64.;
24568     +        label
24569     +            col1  = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel, NOQUOTE))"
24570     +            label = "%sysfunc(sasmsg(sashelp.dmine, rpt_attribute_vlabel, NOQUOTE))"
24571     +        ;
24572     +        *** get the localized label column;
24573     +        _name_=upcase(_name_) ;
24574     +        if _name_ eq "MEMNAME"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_dataname_vlabel, NOQUOTE))" ;
24575     +        if _name_ eq "MEMTYPE"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datatype_vlabel, NOQUOTE))" ;
24576     +        if _name_ eq "MEMLABEL"        then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datalabel_vlabel, NOQUOTE))" ;
24577     +        if _name_ eq "TYPEMEM"         then delete ;
24578     +        if _name_ eq "ENGINE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_engine_vlabel, NOQUOTE))" ;
24579     +        if _name_ eq "CRDATE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_crdate_vlabel, NOQUOTE))" ;
24580     +        if _name_ eq "MODATE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datemode_vlabel, NOQUOTE))" ;
24581     +        if _name_ eq "NOBS"            then label="%sysfunc(sasmsg(sashelp.dmine, rpt_numrows_vlabel, NOQUOTE))" ;
24582     +        if _name_ eq "NCOLS"           then label="%sysfunc(sasmsg(sashelp.dmine, rpt_numcols_vlabel, NOQUOTE))" ;
24583     +        if _name_ eq "NBYTES"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datasize_vlabel, NOQUOTE))" ;
24584     +        if _name_ eq "ROLE"            then label="%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" ;
24585     +        if _name_ eq "USEEXTERNALDATA" then delete ;
24586     +        if _name_ eq "SAMPLINGRATE"    then delete ;
24587     +        if _name_ eq "SEGMENT"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_segment_vlabel, NOQUOTE))" ;
24588     +        if _name_ eq "LIBNAME"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))" ;
24589     +    run;
24591     +    %EM_REPORT_TABLETEXT(subtitle=rpt_dataattributes_title);
24592     +    %EM_REPORT_makeMultiColumn(dat=temp_source, vars=label value, split=3);
24593     +    proc delete data=temp_source; run; quit;
24595     +%mend EM_REPORT_DATASOURCE ;
24597     +*---------------------------------------------------------*/
24598     + *  a utility macro for split table into multiple columns ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ * a utility macro for split table into multiple columns ;
24599     +/*---------------------------------------------------------*/
24601     +%macro em_report_makeMultiColumn(dat=,vars=,split=2);
24603     +    %let vars = %upcase(&vars);
24605     +    /*--- check if the variable existing in the table ---*/
24606     +    proc contents data=&dat out=_tmpms_content(keep=name) noprint;
24607     +    run;
24609     +    %let k = 1;
24610     +    %let vars2 = ;
24611     +    %do %while("%scan(&vars,&k,' ')" ne "");
24612     +        data _null_;
24613     +            set _tmpms_content;
24614     +            name=strip(upcase(name));
24615     +            if name eq "%scan(&vars,&k,' ')"
24616     +                then call symput('vars2',catx(' ',symget('vars2'),name));
24617     +        run;
24618     +        %let k = %eval(&k+1);
24619     +    %end;
24621     +    /*--- count the valid variables ---*/
24622     +    %let k = 1;
24623     +    %do %while("%scan(&vars2,&k,' ')" ne "");
24624     +        %let var&k = %scan(&vars2,&k,' ');
24625     +        %let k = %eval(&k+1);
24626     +    %end;
24627     +    %let numvars = %eval(&k-1);
24629     +    /* --- split the table ---*/
24630     +    %let dsid = %sysfunc(open(&dat));
24631     +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
24632     +    %let numrows = %sysfunc(round(%sysevalf(&numobs/&split)));
24633     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24635     +    data %do d = 1 %to &split; _tmpms_dat&d.(rename=(%do k = 1 %to &numvars; &&&var&k=&&&var&k..&d %end;)) %end;;
24636     +        set &dat;
24637     +        keep &vars2 numrow;
24638     +        %do d = 1 %to &split;
24639     +            if _n_ gt %eval(&numrows*(&d-1)) and _n_ le %eval(&numrows*&d)
24640     +                then do; numrow = _n_-&numrows*(&d-1); output _tmpms_dat&d; end;
24641     +        %end;
24642     +    run;
24644     +    %do d = 1 %to &split;
24645     +        proc sort data=_tmpms_dat&d; by numrow; run;
24646     +    %end;
24648     +    /*--- merge and print ---*/
24649     +    data _tmpms_alldat;
24650     +        merge %do d = 1 %to &split; _tmpms_dat&d %end;;
24651     +        by numrow;
24652     +    run;
24654     +    proc print data=_tmpms_alldat noobs label contents='';
24655     +        var %do d = 1 %to &split; %do k = 1 %to &numvars; &&&var&k..&d %end; %end;;
24656     +    run;
24658     +    proc datasets lib=work nolist;
24659     +        delete _tmpms_:;
24660     +    run; quit;
24662     +%mend em_report_makeMultiColumn;
24664     +*---------------------------------------------------------*/
24665     + *  basic print a data table ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ * basic print a data table ;
24666     +/*---------------------------------------------------------*/
24667     +%macro EM_REPORT_DATA(maxobs=100);
24669     +%local pd desc ;
24670     +%let pd=&em_report_lib..&EM_REPORT_KEY_FILE ;
24671     +%IF not %SYSFUNC(EXIST(&pd)) %then %goto skip;
24673     +%if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
24675     +    %let desc= %upcase(&em_report_key_description) ;
24677     +    %if "&desc" eq "VARIABLES" %then %do;
24678     +        /*--- NOOP: handled globally by EM_REPORT_NODE --*/
24679     +        %goto skip ;
24680     +    %end;
24681     +    %else %if (("&desc" eq "ITEMS") OR ("&desc" eq "OUTAOV16") OR ("&desc" eq "OUTGINT") OR ("&desc" eq "OUTGVAR")
24682     +              OR ("&desc" eq "HISTWEIGHT") OR ("&desc" eq "EMSTAT")) %then %do;;
24683     +        %goto skip;
24684     +    %end;
24685     +    %if (("&desc" eq "SAMPLE") AND (%substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq GRFEXPL)) %then %do;;
24686     +        %goto skip;
24687     +    %end;
24688     +    %else %if "&desc" eq "MODELDIAGNOSTICS" %then %do;
24690     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
24692     +        proc print data=&pd(obs=&maxobs) noobs label contents='';
24693     +            by datarole;
24694     +            var cutoff sensitivity_tpr specificity_tnr one_specificity_fpr precision_event
24695     +                precision_non_event ovl_class_rate precision_overall;
24696     +        run ;
24697     +    %end;
24698     +    %else
24699     +    %if "&desc" eq "REPORTFITSTAT" %then %do ;
24701     +        /*--- should switch to proc tabulate ---*/
24702     +        /*--- often there is only one value of the by variable 'target', but there may be several ---*/
24703     +        data pd; set &pd ;
24704     +            where train ne . ;
24705     +            label _NOBS_  = "%sysfunc(sasmsg(sashelp.dmine, stat_nobs_vlabel, NOQUOTE))"
24706     +                  _MISC_  = "%sysfunc(sasmsg(sashelp.dmine, stat_misc_vlabel, NOQUOTE))"
24707     +                  _MAX_   = "%sysfunc(sasmsg(sashelp.dmine, stat_max_vlabel, NOQUOTE))"
24708     +                  _SSE_   = "%sysfunc(sasmsg(sashelp.dmine, stat_sse_vlabel, NOQUOTE))"
24709     +                  _ASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_ase, NOQUOTE))"
24710     +                  _RASE_  = "%sysfunc(sasmsg(sashelp.dmine, stat_rase_vlabel, NOQUOTE))"
24711     +                  _DIV_   = "%sysfunc(sasmsg(sashelp.dmine, stat_div_vlabel, NOQUOTE))"
24712     +                  _DFT_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dft, NOQUOTE))"
24713     +                  _AIC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_aic, NOQUOTE))"
24714     +                  _MSE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_mse, NOQUOTE))"
24715     +                  _RMSE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rmse, NOQUOTE))"
24716     +                  _AVERR_ = "%sysfunc(sasmsg(sashelp.dmine, stat_averr_vlabel, NOQUOTE))"
24717     +                  _DFE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfe, NOQUOTE))"
24718     +                  _DFM_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfm, NOQUOTE))"
24719     +                  _ERR_   = "%sysfunc(sasmsg(sashelp.dmine, stat_err_vlabel, NOQUOTE))"
24720     +                  _FPE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_fpe, NOQUOTE))"
24721     +                  _NW_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_nw, NOQUOTE))"
24722     +                  _RFPE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rfpe, NOQUOTE))"
24723     +                  _SBC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_sbc, NOQUOTE))"
24724     +            ;
24725     +            drop stat ;
24726     +        run;
24728     +        %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitstat_title);
24730     +        proc sort data=pd;
24731     +            by target targetlabel;
24732     +        proc print data=pd noobs label contents='';
24733     +            label label="%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_statlabel, NOQUOTE))" ;
24734     +            by target targetlabel;
24735     +        run;
24737     +    %end ;
24738     +    %else %if "&desc" eq "CLUSMEAN" %then %do;
24740     +        /* determine number of segments to process */
24741     +        %let dsid = %sysfunc(open(&pd));
24742     +        %if &dsid %then %do;
24743     +            %let numseg = %sysfunc(ATTRN(&dsid, NOBS));
24744     +        %end;
24745     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24747     +        /* transpose data to have a row per segment value */
24748     +        proc transpose data=&pd out=clusmean name=VARIABLE;
24749     +        run;
24751     +        data clusmean;
24752     +            set clusmean;
24753     +            label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
24754     +                %do i=1 %to &numseg;
24755     +                    %let colname = COL&i;
24756     +                    &colname = "%sysfunc(sasmsg(sashelp.dmine, rpt_segcolname_vlabel, NOQUOTE, &i))"
24757     +                %end;
24758     +            ;
24759     +            if missing(_LABEL_) then _LABEL_ = VARIABLE;
24760     +            if VARIABLE="_SEGMENT_" then delete;
24761     +            drop VARIABLE;
24762     +       run;
24764     +       %EM_REPORT_TABLETEXT(subtitle=rpt_meanstats_title);
24765     +       proc print data=clusmean noobs label contents='' ;  run ;
24767     +    %end;
24768     +    %else %if "&desc" eq "COMPAREFIT" %then %do;
24770     +        %EM_REPORT_COMPAREFIT(data=&pd);
24772     +    %end;
24773     +    %else %if "&desc" eq "FITSTAT" %then %do;
24775     +        /*** only print the fitstat table for MDLCOMP nodes ***/
24776     +        %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP %then %do;
24778     +            data _null_ ;
24779     +                set &pd (obs=2) end=eof ;
24780     +                if eof then do ;
24781     +                    call symput("_misc_"      , strip(put(_misc_,best.))) ;
24782     +                    call symput("_vmisc_"     , strip(put(_vmisc_,best.))) ;
24783     +                    call symput("_aur_"       , strip(put(_aur_, best.)));
24784     +                    call symput("_gini_"      , strip(put(_gini_, best.)));
24785     +                end;
24786     +            run;
24788     +            %let loopflag  = 0; %let validflag = 0;
24789     +            %let ASEflag   = 0; %let VASEflag  = 0; %let MISCflag  = 0; %let VMISCflag = 0;
24790     +            %let KSflag    = 0; %let VKSflag   = 0; %let AURflag   = 0; %let GINIflag  = 0;
24791     +            %let dsid = %sysfunc(open(&pd));
24792     +            %if &dsid %then %do;
24793     +                %let loopflag  = %sysfunc(VARNUM(&dsid, _LOOP_));
24794     +                %let validflag = %sysfunc(VARNUM(&dsid, VKS));
24795     +                %let ASEflag   = %sysfunc(VARNUM(&dsid, _ASE_));
24796     +                %let MISCflag  = %sysfunc(VARNUM(&dsid, _MISC_));
24797     +                %let KSflag    = %sysfunc(VARNUM(&dsid, KS));
24798     +                %let VASEflag  = %sysfunc(VARNUM(&dsid, _VASE_));
24799     +                %let VMISCflag = %sysfunc(VARNUM(&dsid, _VMISC_));
24800     +                %let VKSflag   = %sysfunc(VARNUM(&dsid, VKS));
24801     +                %let AURflag   = %sysfunc(VARNUM(&dsid, _AUR_));
24802     +                %let GINIflag  = %sysfunc(VARNUM(&dsid, _GINI_));
24803     +            %end;
24804     +            %if &dsid %then %let dsid=%sysfunc(close(&dsid));
24806     +            %EM_REPORT_TABLETEXT(subtitle=rpt_fittable_title);
24808     +            proc print data=&pd(obs=&maxobs) noobs label contents='';
24809     +                id
24810     +                    %if &loopflag ne 0 %then %do; _LOOP_ _WHERE_ %end;
24811     +                    USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_
24812     +                ;
24813     +                var
24814     +                %if &validflag ne 0 %then %do;
24815     +                    %if &ASEflag ne 0                         %then %do; _ASE_   %end;
24816     +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_  %end;
24817     +                    %if &KSflag ne 0                          %then %do; KS      %end;
24818     +                    %if &VASEflag ne 0                        %then %do; _VASE_  %end;
24819     +                    %if &VMISCflag ne 0 and "&_vmisc_" ne "." %then %do; _VMISC_ %end;
24820     +                    %if &VKSflag ne 0                         %then %do; VKS     %end;
24821     +                %end;
24822     +                %else %do;
24823     +                    %if &ASEflag ne 0                         %then %do; _ASE_   %end;
24824     +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_  %end;
24825     +                    %if &KSflag ne 0                          %then %do; KS      %end;
24826     +                    %if &AURflag ne 0   and "&_aur_" ne "."   %then %do; _AUR_  %end;
24827     +                    %if &GINIflag ne 0  and "&_gini_" ne "."  %then %do; _GINI_  %end;
24828     +                %end;
24829     +               ;
24830     +            run;
24831     +        %end;
24832     +        %else %do;
24833     +            %goto skip;
24834     +        %end;
24835     +    %end;
24836     +    %else %if "&desc" eq "RULETABLE" %then %do;
24838     +        %let dsid = %sysfunc(open(&pd));
24839     +        %let printflag = 0;
24840     +        %if &dsid %then %do;
24841     +          %let printflag = %sysfunc(VARNUM(&dsid, EXP_CONF));
24842     +          %let lhandflag = %sysfunc(VARNUM(&dsid, _lhand));
24843     +          %let rhandflag = %sysfunc(VARNUM(&dsid, _rhand));
24844     +        %end;
24845     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
24847     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
24849     +        proc print data=&pd(obs=&maxobs) noobs label contents='';
24850     +            %if &printflag ne 0 %then %do;
24851     +                var rule exp_conf support lift count
24852     +                %if &lhandflag ne 0 %then %do; _lhand %end;
24853     +                %if &rhandflag ne 0 %then %do; _rhand %end;
24854     +                ;
24855     +            %end;
24856     +            %else %do;
24857     +                var rule conf support count
24858     +                %if &lhandflag ne 0 %then %do; _lhand %end;
24859     +                %if &rhandflag ne 0 %then %do; _rhand %end;
24860     +                ;
24861     +            %end;
24862     +        run;
24863     +    %end;
24864     +    %else %do ;
24865     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
24866     +        proc print data=&pd(obs=&maxobs) noobs label contents=''; run ;
24867     +    %end ;
24868     +    %end;
24869     +%skip:
24870     +%mend EM_REPORT_DATA;
24872     +/*---------------------------------------------------------*/
24873     + * EM_REPORT_VARS ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS ;
24874     + * EM_REPORT_VARS_FLIP ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS_FLIP ;
24875     + *     Report on variables used by the node ;
MPRINT(EM_REPORT_CREATE):   * Report on variables used by the node ;
24876     +/*---------------------------------------------------------*/
24877     +%macro EM_REPORT_VARS_FLIP(data=,out=);
24879     +    proc sort data=&data;
24880     +        by descending role level name;
24881     +    run;
24883     +    data &out(keep=role level count names ) ;
24884     +        length role level $16 ;
24885     +        set &data end=eof ;
24886     +        length xrole role $32 count 8 names $200 ;
24887     +        krole= strip(role) !!' * ' !! strip(level) ;
24888     +        retain xrole ; if _n_ eq 1 then xrole=krole ;
24889     +        retain names ; if _n_ eq 1 then names=name ;
24890     +        retain count 0 ending 0 ;
24891     +        count+1 ;
24892     +        role=scan(xrole,1,'*') ;
24893     +        level=scan(xrole,2,'*') ;
24894     +        if xrole ne krole then do ;
24895     +            count=count-1 ;
24896     +            put _n_ "OUTPUT;" ;
24897     +            output ;
24898     +            xrole=krole ; names= strip(name) ;
24899     +            count=1  ; ending=0 ;
24900     +        end ;
24901     +        else if _n_ gt 1 then do ;
24902     +            if length(names) + length(name) lt 196 then
24903     +                names= strip(names) !! ' '  !! strip(name) ;
24904     +            else
24905     +            if not ending then do ;
24906     +                names= strip(names) !! ' ...' ;
24907     +                ending=1 ;
24908     +            end;
24909     +        end;
24910     +        role=scan(xrole,1,'*') ;
24911     +        level=scan(xrole,2,'*') ;
24912     +        if eof and count gt 0 then output ;
24913     +        label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE)) "
24914     +              names = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
24915     +              level = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
24916     +              role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))";
24917     +    run ;
24918     +%mend EM_REPORT_VARS_FLIP ;
24920     +%macro EM_REPORT_VARS(varlist=0);
24922     +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE))
24923     +        %then %goto skip ;
24925     +    proc sql noprint;
24926     +        select count(*) into :tmp_numvar from &EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE;
24927     +    quit;
24929     +    %if &tmp_numvar lt 1 %then %goto skip;
24930     +/*--- 1. get minimal set of vars -----------------------------------------*/
24932     +    data _tmpvl_pdv(drop=use newuse count) ;
24933     +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE end=eof;
24934     +        length use newuse $1;
24935     +        label
24936     +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
24937     +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
24938     +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
24939     +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))"
24940     +        ;
24941     +        if use eq "" then use="Y";
24942     +        newuse=use;
24943     +        if use eq "D" then do;
24944     +            if role="REJECT" then newuse="N";
24945     +            else if role="INPUT"    then newuse="Y";
24946     +            else if role="CROSSID"  then newuse="Y";
24947     +            else if role="TEXT"     then newuse="Y";
24948     +        end ;
24949     +        if newuse eq "Y" then do ;
24950     +            count+1 ;
24951     +            output;
24952     +        end;
24953     +        if eof then call symput("varcount",put(count,6.)) ;
24954     +    run;
24956     +    proc sort data=_tmpvl_pdv; by name; run ;
24958     +/*--- 2. Summarize the variables -----------------------------------------*/
24960     +    %if &varlist ne 1 or &varcount gt &EM_REPORT_PRINT_MAXVARS %then %do;
24962     +        /* why not update pdv here? mxx */
24963     +        %EM_REPORT_VARS_FLIP(data=_tmpvl_pdv,out=_tmpvl_pds);
24964     +        %EM_REPORT_TABLETEXT(subtitle=rpt_varsummary_title);
24965     +        proc print data=_tmpvl_pds noobs label contents=''; run;
24967     +    %end;
24968     +    %else %do;
24970     +        %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset)) %then %do;
24971     +            proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset out=_tmpvl_vs;
24972     +                by name;
24973     +            data _tmpvl_pdv;
24974     +                update _tmpvl_pdv _tmpvl_vs;
24975     +                by name;
24976     +                label
24977     +                    type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
24978     +                    format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel, NOQUOTE))"
24979     +                    creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel, NOQUOTE))"
24980     +                    family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel, NOQUOTE))"
24981     +                    label   = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))"
24982     +                ;
24983     +            run;
24984     +        %end;
24986     +        %EM_REPORT_TABLETEXT(subtitle=rpt_varlist_title);
24987     +        proc print data=_tmpvl_pdv noobs label contents='';
24988     +            var name label role level type length format creator;
24989     +        run;
24990     +    %end;
24992     +/*--- 3. for SVM node with EMSTAT table ----------------------------------*/
24994     +    %let emstat_exist = 0;
24995     +    %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._emstat)) %then %do;
24996     +        proc sql noprint;
24997     +            select count(*) into :emstat_use from &em_report_lib..&nodeid._emreport
24998     +                where key="DESCRIPTION" and value="EMSTAT" ;
24999     +        quit;
25000     +        %if &emstat_use gt 0 %then %let emstat_exist = 1;
25001     +    %end;
25003     +    %if &emstat_exist eq 1 %then %do;
25005     +        /* check newname column */
25006     +        %let newname_exist = 0;
25007     +        %let newobs = 0;
25008     +        %let tsdsid = %sysfunc(open(work.pdv));
25009     +        %if &tsdsid %then %do;
25010     +            %let tsobs = %sysfunc(ATTRN(&tsdsid, NOBS));
25011     +            %let newobs = %sysfunc(varnum(&tsdsid, NEWNAME));
25012     +            %if &tsobs > 0 AND  &newobs > 0 %then %let newname_exist =1;
25013     +        %end;
25014     +        %if &tsdsid %then %let tsdsid = %sysfunc(close(&tsdsid));
25016     +        %if &newname_exist eq 1 %then %do;
25017     +            data _tmpvl_pdv; set _tmpvl_pdv(drop=name); run;
25018     +            proc sort data=_tmpvl_pdv(rename=(newname=NAME)); by name; run;
25019     +        %end;
25020     +        %else %do;
25021     +            proc sort data=_tmpvl_pdv; by name; run;
25022     +        %end;
25024     +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._VARIABLESET out=_tmpvl_v; by name; run;
25026     +        data _tmpvl_pdv ;
25027     +            update _tmpvl_pdv _tmpvl_v;
25028     +            by name;
25029     +            label label="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
25030     +        run;
25032     +        proc sort data=_tmpvl_pdv; by name; run;
25033     +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMSTAT out=_tmpvl_tempsort; by name; run;
25035     +        data _tmpvl_pdv;
25036     +            merge _tmpvl_pdv(keep=name label role level type length format creator family) _tmpvl_tempsort;
25037     +            by name;
25038     +            label type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
25039     +                  format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel, NOQUOTE))"
25040     +                  creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel, NOQUOTE))"
25041     +                  family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel, NOQUOTE))";
25042     +        run;
25044     +        proc sort data=_tmpvl_pdv; by descending role name; run;
25046     +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_interval_title);
25047     +        proc print data=_tmpvl_pdv(where=(LEVEL="INTERVAL")) noobs label contents='';
25048     +            var name label role level type length format creator pctmiss min max mean std skewness kurtosis;
25049     +        run;
25051     +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_class_title);
25052     +        proc print data=_tmpvl_pdv(where=(LEVEL^="INTERVAL")) noobs label contents='';
25053     +            var name label role level type length format creator nlevel pctmiss;
25054     +        run;
25055     +    %end;
25057     +/*--- 4. now get vars created by this node -------------------------------*/
25059     +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN))
25060     +        %then %goto skip;
25062     +    %let pdvxnum = 0;
25064     +    data _tmpvl_pdvx;
25065     +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN end=eof ;
25066     +        where upcase(creator) eq "&EM_REPORT_NODEID" ;
25067     +        if eof then call symput('pdvxnum',put(_N_,6.));
25068     +        label
25069     +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
25070     +            label  = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))"
25071     +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
25072     +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
25073     +            type   = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel, NOQUOTE))"
25074     +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))";
25075     +    run;
25077     +    %if pdvxnum gt 0 %then %do;
25078     +        %if &varlist ne 1 or &pdvxnum gt &EM_REPORT_PRINT_MAXVARS %then %do ;
25080     +            %EM_REPORT_VARS_FLIP(data=_tmpvl_pdvx,out=_tmpvl_pdvxp) ;
25082     +            proc sql noprint;
25083     +                select count(*) into :nobs from _tmpvl_pdvxp;
25084     +            quit;
25086     +            %if &nobs > 0 %then %do;
25087     +                %EM_REPORT_TABLETEXT(subtitle=rpt_createvarsummary_title);
25088     +                proc print data=_tmpvl_pdvxp noobs label contents=''; run ;
25089     +            %end;
25090     +        %end;
25091     +        %else %do ;
25093     +            %EM_REPORT_TABLETEXT(subtitle=rpt_createvarslist_title);
25094     +            proc print data=_tmpvl_pdvx noobs label contents='';
25095     +                var name label role type length ;
25096     +            run;
25097     +        %end;
25098     +    %end;
25100     +/*------------------------------------------------------------------------*/
25102     +    proc datasets lib=work nolist;
25103     +        delete _tmpvl_:;
25104     +    run; quit;
25105     +    %skip:
25107     +%mend EM_REPORT_VARS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_RPMMACROS.SOURCE.
25109     +%macro EM_REPORT_validSummaryPath(startNodeID =);
25110     +/*--- purpose: detect whether a flow is valid as a summary path ---*/
25112     +    %global EM_REPORT_NODES EM_REPORT_LIB RPM_REPORT_MODELNODE  RPM_REPORT_SCORENODE RPM_REPORT_MDLCOMP RPM_REPORT_VALIDSUMMARY;
25113     +    %local prednode em_report_mdlOutfit;
25114     +    %let RPM_REPORT_MODELNODE    = ;
25115     +    %let RPM_REPORT_SCORENODE    = ;
25116     +    %let RPM_REPORT_MDLCOMP      = ;
25117     +    %let RPM_REPORT_VALIDSUMMARY = 0;
25119     +    %if &EM_REPORT_NODES eq SUMMARY %then %do;
25121     +        %let predNode=;
25122     +        data _null_ ;
25123     +            set &EM_REPORT_LIB..em_dgraph(where=(to="&startNodeID"));
25124     +            call symput('predNode', strip(from));
25125     +        run;
25126     +        %let predNode = &predNode;
25128     +        /* if predecessor is MDLCOMP, RPM report is valid */
25129     +        /* or if predecessor is SCORE and MODEL node is fed into score, RPM report is valid */
25130     +        /* or if MDLCOMP to SCORE to REPORTER, RPM report is valid, commented xxm */
25131     +        /* or if predecessor is MODEL node, RPM report is valid */
25133     +        %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
25134     +            %let RPM_REPORT_MDLCOMP = &predNode;
25135     +            %let RPM_REPORT_VALIDSUMMARY=1;
25136     +            data _null_;
25137     +                set &EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
25138     +                call symput('RPM_REPORT_MODELNODE',strip(model));
25139     +            run;
25140     +        %end;
25141     +        %else %if %upcase(%substr(&prednode,1,5)) eq SCORE %then %do;
25142     +            %let RPM_REPORT_SCORENODE = &prednode;
25143     +            %let prednode = ;
25144     +            data _null_ ;
25145     +                set &EM_REPORT_LIB..em_dgraph(where=(to="&RPM_REPORT_SCORENODE"));
25146     +                call symput('predNode', strip(from));
25147     +            run;
25148     +            %let predNode = &predNode;
25150     +            %if &prednode ne %then %do;
25151     +                %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
25152     +                    %let RPM_REPORT_MDLCOMP = &prednode;
25153     +                    %let RPM_REPORT_VALIDSUMMARY=1;
25154     +                    data _null_;
25155     +                        set &EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
25156     +                        call symput('RPM_REPORT_MODELNODE',strip(model));
25157     +                    run;
25158     +                %end;
25159     +                %else %do;
25160     +                    %let em_report_mdlOutfit = &EM_REPORT_LIB..&prednode._emoutfit;
25161     +                    %if %sysfunc(exist(&em_report_mdlOutfit))
25162     +                    %then %do;
25163     +                        %let RPM_REPORT_MODELNODE = &prednode;
25164     +                        %let RPM_REPORT_VALIDSUMMARY=1;
25165     +                    %end;
25166     +                %end;
25167     +            %end;
25168     +        %end;
25169     +        %else %do;
25170     +            %let em_report_mdlOutfit = &em_lib..&prednode._emoutfit;
25171     +            %if %sysfunc(exist(&em_report_mdlOutfit))
25172     +            %then %do;
25173     +                %let RPM_REPORT_MODELNODE = &prednode;
25174     +                %let RPM_REPORT_VALIDSUMMARY=1;
25175     +            %end;
25176     +        %end;
25177     +    %end;
25179     +    %let RPM_REPORT_MODELNODE = &RPM_REPORT_MODELNODE;
25180     +    %let RPM_REPORT_SCORENODE = &RPM_REPORT_SCORENODE;
25181     +    %let RPM_REPORT_MDLCOMP   = &RPM_REPORT_MDLCOMP;
25183     +%mend EM_REPORT_validSummaryPath;
25185     +%macro em_report_summary(runHP=0);
25187     +%global EM_REPORT_SUMMARY_TARGET RPM_REPORT_MDLCOMP RPM_REPORT_MODELNODE;
25188     +%local  IDSNode freqvar;
25190     +%if not %sysfunc(exist(emreportpath)) %then %goto skip ;
25192     +/*--- RPM-1. Identify the modeling node -------------------------------------*/
25194     +%let em_report_modelID = ;
25195     +%let em_report_modeldesc= ;
25197     +%if &RPM_REPORT_MDLCOMP ne %then %do;
25198     +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
25199     +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
25200     +        data _null_;
25201     +           set &em_lib..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
25202     +           call symput('em_report_modelID',   strip(model));
25203     +           call symput('em_report_modeldesc', strip(modeldescription));
25204     +        run;
25205     +    %end;
25206     +%end;
25207     +%else %if &RPM_REPORT_MODELNODE ne %then %do;
25208     +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MODELNODE._emoutfit;
25209     +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
25210     +        %let em_report_modelID   = &RPM_REPORT_MODELNODE;
25211     +        %let em_report_modeldesc = ;
25212     +    %end;
25213     +%end;
25215     +/*--- RPM-2. Retrieve necessary information for the model--------------------*/
25217     +%if &em_report_modelId ne %then %do;
25219     +    /* RPM-2.1 save model information */
25221     +    %EM_GETNAME(key=MODELINFO, type=DATA);
25222     +    data &EM_USER_MODELINFO;
25223     +        format modelID $100. modeldesc $200.;
25224     +        modelid = "&em_report_modelID";
25225     +        modeldesc="&em_report_modeldesc";
25226     +    run;
25228     +    /* RPM-2.2 retrieve warning file if it exists */
25230     +    %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
25231     +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
25232     +    %let file = EMWARN.sas;
25233     +    %let warnfile = %nrbquote(&path&em_dsep&em_report_modelId&em_dsep&file);
25235     +    %if "&warnfile" ne "" %then %do;
25236     +        filename x "&warnfile" encoding='utf-8' NOBOM;
25237     +        data _null_;
25238     +            length string $1000;
25239     +            file PRINT;
25240     +            fid = fopen('x');
25241     +            do while (^fread(fid));
25242     +                rc= fget(fid, string, frlen(fid));
25243     +                string = tranwrd(string, "'", "''");
25244     +                if string eq '' then string = ' ';
25245     +                put string;
25246     +            end;
25247     +            fid = fclose(fid);
25248     +            put " ";
25249     +        run;
25250     +        filename x;
25251     +    %end;
25253     +    /* RPM-2.3 retrieve ID nodeid */
25255     +    data _null_;
25256     +        set emreportpath(where=(substr(upcase(strip(nodeid)),1,3) eq "IDS"));
25257     +        call symput("idsnode",strip(nodeid)) ;
25258     +    run;
25260     +    %let idstmeta = &em_lib..&idsnode._emtmetadefault;
25261     +    %let idscmeta = &em_lib..&idsnode._emcmetadefault;
25263     +    %if %sysfunc(exist(&idstmeta)) %then %do;
25264     +        data _null_;
25265     +            set  &em_lib..&idsnode._emtmetadefault;
25266     +            call symput('rpt_rpm_data',    strip(MEMNAME));
25267     +            call symput('rpt_rpm_datalib', strip(LIBNAME));
25268     +            call symput('rpt_rpm_nobs',    strip(NOBS));
25269     +            call symput('rpt_rpm_ncols',   strip(NCOLS));
25270     +        run;
25271     +    %end;
25273     +    /* RPM-2.4 retrieve name of target to use in presense of multiple targets */
25274     +    /* prefer to use the target given by &EM_REPORT_SUMMARY_TARGET        */
25275     +    /* otherwise the last target modelled (by name) will be used          */
25277     +    %let mdlTarget = ;
25279     +    %if "&EM_REPORT_SUMMARY_TARGET" ne "" %then %do;
25280     +        proc sql noprint;
25281     +            select count(*) into :tmpn
25282     +            from &em_lib..&em_report_modelid._variableset;
25283     +                where name eq "&EM_REPORT_SUMMARY_TARGET" and upcase(role) eq "TARGET";
25284     +        quit;
25285     +        %if &tmpn eq 1 %then %let mdlTarget = &EM_REPORT_SUMMARY_TARGET;
25286     +    %end;
25288     +    %if "&mdlTarget" eq "" %then %do;
25289     +        data _null_;
25290     +            set &em_lib..&em_report_modelid._variableset(where=(role="TARGET" and use="Y"));
25291     +            call symput('mdlTarget', strip(name));
25292     +        run;
25293     +    %end;
25295     +    /* RPM-2.5 retrieve name of decmeta from eminfo of the chosen model */
25297     +    data _null_;
25298     +        set &em_lib..&em_report_modelid._eminfo;
25299     +        if KEY="DECMETA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget" %end;
25300     +            then  call symput('rpt_rpm_mdldecmeta', strip(data));
25301     +        if KEY="DECDATA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget" %end;
25302     +            then  call symput('rpt_rpm_mdldecdata', strip(data));
25303     +    run;
25305     +    /* RPM-2.6 retrieve name of DECISION variable if it exists      */
25306     +    /*       - use this as target var for categorical target        */
25307     +    /*       - otherwise use INTO variable as class target var      */
25308     +    /* RPM-2.7 retrieve target event level, save TARGETINFO table   */
25309     +    /* RPM-2.8 retrieve name of the PREDICTED variable from decmeta */
25310     +    /*       - INTERVAL TARGET ONLY                                 */
25312     +    %let catTarget = ;
25314     +    data _null_;
25315     +        set &rpt_rpm_mdldecmeta;
25316     +        if _type_ eq "INTO"          then call symput('catTarget', strip(variable));
25317     +        if _type_ eq "MODELDECISION" then call symput('catTarget', strip(variable));
25319     +        if _type_ eq "TARGET" then do;
25320     +            call symput('rpt_rpm_eventlvl',    strip(event));
25321     +            call symput('rpt_rpm_targetName',  strip(variable));
25322     +            call symput('rpt_rpm_targetLevel', strip(level));
25323     +            call symput('rpt_rpm_targetLabel', strip(label));
25324     +        end;
25325     +    data _null_;
25326     +        set &rpt_rpm_mdldecmeta;
25327     +        %if "&rpt_rpm_targetLevel" eq "INTERVAL" %then %do;
25328     +            if _type_ eq "PREDICTED"
25329     +                then call symput('rpt_rpm_predvar', strip(variable));
25330     +        %end;
25331     +    run;
25333     +    %EM_GETNAME(key=TARGETINFO, type=DATA);
25334     +    data &EM_USER_TARGETINFO;
25335     +        set &rpt_rpm_mdldecmeta;
25336     +    run;
25338     +    /* RPM-2.9 retrieve freq variable name if it exists */
25340     +    %let freqvar=;
25341     +    data _null_;
25342     +        set &em_lib..&em_report_modelid._variableset(where=(role eq "FREQ"));
25343     +        call symput('freqvar', strip(name));
25344     +    run;
25346     +    /* RPM-2.10 retrieve listing of all inputs into the model */
25347     +    /*     process only when SCORENODE exists                 */
25349     +    %if &RPM_REPORT_SCORENODE ne %then %do;
25351     +        %EM_REGISTER(key=tempvar,  type=DATA);
25352     +        %EM_REGISTER(key=tempmeta, type=DATA);
25353     +        %EM_GETNAME( key=tempvar,  type=DATA);
25354     +        %EM_GETNAME( key=tempmeta, type=DATA);
25356     +        data &EM_USER_tempvar;
25357     +            %if %sysfunc(exist(&em_lib..&rpm_report_scorenode._eminputvars)) %then %do;
25358     +                set &em_lib..&rpm_report_scorenode._eminputvars(where=(scorevar="Y"));
25359     +            %end;
25360     +            %else %do;
25361     +                set &em_lib..&idsnode._variableset(where=(upcase(role)='INPUT') keep=role name);
25362     +            %end;
25363     +        run;
25365     +        proc sql noprint;
25366     +            select count(distinct name) into :n_svars from &EM_USER_tempvar;
25367     +        quit;
25369     +        proc sort data=&EM_USER_tempvar;       by name;
25370     +        proc sort data=&idscmeta out=tempmeta; by name;
25372     +        data &EM_USER_tempmeta;
25373     +            merge &EM_USER_tempvar(in=_a) tempmeta;
25374     +            by name;
25375     +            if _a;
25376     +        run;
25378     +        proc delete data=tempmeta; run;
25379     +    %end;
25381     +    /* RPM-2.11 is HPRPM or not */
25383     +    proc sql noprint;
25384     +        select count(*) into :rpt_rpm_isHP from &em_lib..&idsnode._eminfo
25385     +            where upcase(key) eq 'HPDMSAMPLE';
25386     +    quit;
25388     +    %if &rpt_rpm_isHP ne 0 %then %let rpt_rpm_isHP = 1;
25390     +    /* RPM-2.12 determine if vvn variables are present in ids node */
25392     +    %let vvnflag = 0;
25393     +    %let cmdsid = %sysfunc(open(&idscmeta));
25394     +    %if &cmdsid %then %do;
25395     +        %let newnum = %sysfunc(varnum(&cmdsid, newname));
25396     +        %if &newnum gt 0 %then %let vvnflag = 1;
25397     +    %end;
25398     +    %if &cmdsid %then %let cmdsid = %sysfunc(close(&cmdsid));
25400     +    %if &vvnflag eq 0
25401     +        %then %let name_to_use = name;
25402     +        %else %let name_to_use = newname;
25404     +/* end of 2. Retrieve necessary information for the model */
25405     +%end;
25407     +/*******************************************************************************************/
25409     +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) %then %do;
25411     +    %if &EM_PROPERTY_SUMMARIZATION eq Y %then %do;
25413     +        %EM_GETNAME(key=DATASUM,   type=DATA);
25414     +        %EM_GETNAME(key=TARGETSUM, type=DATA);
25415     +        %EM_GETNAME(key=VARSUM,    type=DATA);
25416     +        %let rpt_rpm_eventlvl = %nrbquote(&rpt_rpm_eventlvl);
25418     +        /* RPM-3.1 - output data summary ------------------------------------------------------------------*/
25420     +        data &EM_USER_DATASUM;
25421     +            length stat $200 value $200;
25422     +            label stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))"
25423     +                  value = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
25425     +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptinputdatasource_vlabel, NOQUOTE))";
25426     +            value = "&rpt_rpm_datalib..&rpt_rpm_data";
25427     +            output;
25429     +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetvariable_vlabel, NOQUOTE))";
25430     +            %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
25431     +                value = "%nrbquote(&rpt_rpm_targetLabel)";
25432     +            %end;
25433     +            %else %do;
25434     +                value = "&rpt_rpm_targetName";
25435     +            %end;
25436     +            output;
25438     +            %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
25439     +                stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpteventlevel_vlabel, NOQUOTE))";
25440     +                value = "&rpt_rpm_eventlvl";
25441     +                output;
25442     +            %end;
25444     +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptobservations_vlabel, NOQUOTE))";
25445     +            value = "&rpt_rpm_nobs";
25446     +            output;
25448     +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptorigvars_vlabel, NOQUOTE))";
25449     +            value = "&rpt_rpm_ncols";
25450     +            output;
25452     +            %if &RPM_REPORT_SCORENODE ne %then %do;
25453     +                %if &n_svars ne %then %do;
25454     +                    stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptselectedvars_vlabel, NOQUOTE))";
25455     +                    value="&n_svars";
25456     +                    output;
25457     +                %end;
25458     +            %end;
25459     +        run;
25461     +        ods &EM_REPORT_FORMAT text=" ";
25462     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelsummarization_title, NOQUOTE))";
25463     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdata_title, NOQUOTE))";
25464     +        ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelsummarization_title, NOQUOTE)) %sysfunc(sasmsg(sashelp.dmine, rpt_rptdata_title, NOQUOTE))";
25466     +        proc print data=&EM_USER_DATASUM noobs label style=[outputwidth=50%]; run;
25468     +        /* RPM-3.2 - output target summary -----------------------------------------------------------------*/
25470     +       ods &EM_REPORT_FORMAT text=" ";
25471     +       %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
25472     +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
25473     +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
25474     +       %end;
25475     +       %else %do;
25476     +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, &rpt_rpm_targetName))";
25477     +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, &rpt_rpm_targetName))";
25478     +       %end;
25480     +        %if "&rpt_rpm_targetLevel" ne "INTERVAL"
25481     +        %then %do;
25482     +            /* target summary for for non-interval target */
25484     +            %let useD = N;
25485     +            data _null_;
25486     +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('MATRIX'))) end=eof;
25487     +                if eof then call symput('useD', USE);
25488     +            run;
25490     +            %let useP = N;
25491     +            data _null_;
25492     +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('DECPRIOR'))) end=eof;
25493     +                if eof then call symput('useP', USE);
25494     +            run;
25496     +            data &EM_USER_TARGETSUM;
25497     +                set &rpt_rpm_mdldecdata;
25498     +                label
25499     +                    &rpt_rpm_targetName = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))"
25500     +                    count      = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, NOQUOTE))"
25501     +                    trainprior = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptdatapercentage_vlabel, NOQUOTE))"
25502     +                    decprior   = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptadjustedperc_vlabel, NOQUOTE))";
25503     +                ;
25504     +                %if &useD eq Y and &useP eq Y %then %do; drop dataprior;          %end;
25505     +                %if &useD eq Y and &useP eq N %then %do; drop decprior dataprior; %end;
25506     +                %if &useD eq N and &useP eq Y %then %do; keep &rpt_rpm_targetName count trainprior decprior; %end;
25507     +                %if &useD eq N and &useP eq N %then %do; keep &rpt_rpm_targetName count trainprior;          %end;
25508     +            run;
25510     +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%]; run;
25511     +        %end;
25512     +        %else %do;
25513     +            /* target summary for interval target */
25515     +            data _null_;
25516     +                set  &em_lib..&idsnode._cmeta_data(where=(ROLE='TARGET'));
25517     +                call symput('rpt_rpm_ids_target',    strip(name));
25518     +            run;
25520     +            %if &rpt_rpm_isHP eq 1 %then %do;
25521     +                ods &EM_REPORT_FORMAT exclude all;
25522     +                ods listing;
25523     +                proc hpdmdb data=&em_lib..&idsnode._data varout=temp1;
25524     +                    var &rpt_rpm_ids_target;
25525     +                proc transpose data=temp1
25526     +                    out=&EM_USER_TARGETSUM(rename=(col1=&rpt_rpm_ids_target _name_=_stat_));
25527     +                    by name notsorted;
25528     +                    var n min max mean std;
25529     +                run;
25530     +                ods listing close;
25531     +                ods &EM_REPORT_FORMAT select all;
25532     +                proc delete data=temp1; run;
25533     +            %end;
25534     +            %else %do;
25535     +                proc means data=&em_lib..&idsnode._data noprint;
25536     +                    var &rpt_rpm_ids_target;
25537     +                    output out=&EM_USER_TARGETSUM;
25538     +                run;
25540     +                data &EM_USER_TARGETSUM;
25541     +                    format _stat_ $50.;
25542     +                    set &EM_USER_TARGETSUM;
25543     +                    if strip(upcase(_stat_)) eq "MIN"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
25544     +                    if strip(upcase(_stat_)) eq "MAX"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
25545     +                    if strip(upcase(_stat_)) eq "N"    then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel, NOQUOTE))";
25546     +                    if strip(upcase(_stat_)) eq "MEAN" then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel, NOQUOTE))";
25547     +                    if strip(upcase(_stat_)) eq "STD"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel, NOQUOTE))";
25548     +                run;
25549     +            %end;
25551     +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%];
25552     +                var _stat_ &rpt_rpm_ids_target;
25553     +                label _stat_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, NOQUOTE))"
25554     +                &rpt_rpm_ids_target = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
25555     +            run;
25556     +        %end;
25558     +        /* RPM-3.3 - output variable summary ---------------------------------------------------------------*/
25560     +        %if &RPM_REPORT_SCORENODE ne %then %do;
25562     +            proc sql noprint;
25563     +                create table tempselected as
25564     +                    select a.*, b.name as selected
25565     +                    from &em_lib..&idsnode._variableset as a left join &EM_USER_tempmeta as b
25566     +                        on a.name eq b.name
25567     +                ;
25568     +                create table &EM_USER_VARSUM as
25569     +                    select role,level, count(distinct name) as count, sum(selected ne ' ') as sel_count
25570     +                    from tempselected
25571     +                    group by role, level
25572     +                    order by role, level
25573     +                ;
25574     +            quit;
25576     +            ods &EM_REPORT_FORMAT text=" ";
25577     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarsummary_title, NOQUOTE))";
25578     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarsummary_title, NOQUOTE))";
25580     +            data &EM_USER_VARSUM;
25581     +                format role $50. level $50.;
25582     +                set &EM_USER_VARSUM;
25584     +                role  = upcase(strip(role));
25585     +                level = upcase(strip(level));
25587     +                     if role eq 'ASSESS'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_assess_vlabel, NOQUOTE))";
25588     +                else if role eq 'COST'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_cost_vlabel, NOQUOTE))";
25589     +                else if role eq 'CENSOR'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_censor_vlabel, NOQUOTE))";
25590     +                else if role eq 'CROSSID'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_crossid_vlabel, NOQUOTE))";
25591     +                else if role eq 'FREQ'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_freq_vlabel, NOQUOTE))";
25592     +                else if role eq 'GROUP'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel, NOQUOTE))";
25593     +                else if role eq 'DECISION'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_decision_vlabel, NOQUOTE))";
25594     +                else if role eq 'CLASSIFICATION' then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_vlabel, NOQUOTE))";
25595     +                else if role eq 'KEY'            then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_key_vlabel, NOQUOTE))";
25596     +                else if role eq 'MISSING'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
25597     +                else if role eq 'PREDICT'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
25598     +                else if role eq 'REFERRER'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_referrer_vlabel, NOQUOTE))";
25599     +                else if role eq 'REJECTED'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_rejected_vlabel, NOQUOTE))";
25600     +                else if role eq 'SEGMENT'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_segment_vlabel, NOQUOTE))";
25601     +                else if role eq 'SEQUENCE'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_sequence_vlabel, NOQUOTE))";
25602     +                else if role eq 'TEXT'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_text_vlabel, NOQUOTE))";
25603     +                else if role eq 'TIMEID'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_timeid_vlabel, NOQUOTE))";
25604     +                else if role eq 'TRIAL'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_trial_vlabel, NOQUOTE))";
25605     +                else if role eq 'ID'             then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_id_vlabel, NOQUOTE))";
25606     +                else if role eq 'INPUT'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel, NOQUOTE))";
25607     +                else if role eq 'TARGET'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
25608     +                else if role eq 'TREATMENT'      then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_treatment_vlabel, NOQUOTE))";
25609     +                else if role eq 'RESIDUAL '      then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_residual_vlabel, NOQUOTE))";
25610     +                else if role eq 'LABEL'          then role= "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
25612     +                     if level eq 'INTERVAL'  then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_interval_vlabel , NOQUOTE))";
25613     +                else if level eq 'NOMINAL'   then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_nominal_vlabel , NOQUOTE))";
25614     +                else if level eq 'ORDINAL'   then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_ordinal_vlabel , NOQUOTE))";
25615     +                else if level eq 'BINARY'    then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_binary_vlabel , NOQUOTE))";
25616     +                else if level eq 'UNARY'     then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_unary_vlabel , NOQUOTE))";
25618     +                role  = strip(role);
25619     +                level = strip(level);
25620     +            run;
25622     +            proc print data=&EM_USER_VARSUM label noobs style=[outputwidth=50%];
25623     +                var role level count sel_count;
25624     +                label role      = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptrole_vlabel, NOQUOTE))"
25625     +                      level     = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptlevel_vlabel, NOQUOTE))"
25626     +                      count     = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptorigcount_vlabel, NOQUOTE))"
25627     +                      sel_count = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptselcount_vlabel, NOQUOTE))";
25628     +            run;
25630     +            proc delete data=tempselected; run;
25631     +        %end;
25632     +    %end;  /* end of --&EM_PROPERTY_SUMMARIZATION eq Y           --*/
25633     +/* three output in this section: datasum, targetsum, varsum      --*/
25634     +%end; /* end of &em_report_modelId ne - end of block 3.1,3.2,3.3 --*/
25637     +/***** RPM-4. varRank and Scorecard ************************************************************************/
25639     +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) and &RPM_REPORT_SCORENODE ne  %then %do;
25641     +    %EM_GETNAME(key=VARRANK,   type=DATA);
25642     +    %EM_GETNAME(key=SCORECARD, type=DATA);
25644     +    %if "&rpt_rpm_targetLevel" ne "INTERVAL"
25645     +        %then %let scorecard_target = &catTarget;
25646     +        %else %let scorecard_target = &rpt_rpm_predvar;
25648     +    %if &runHP eq 0 %then %do;
25650     +        %global EM_SUMMARY_REPORT_MAXOBS  EM_SUMMARY_REPORT_SAMPLEMETHOD ;
25652     +        %if &EM_SUMMARY_REPORT_MAXOBS ne  %then %do;
25653     +            %let maxobs = &EM_SUMMARY_REPORT_MAXOBS;
25654     +        %end;
25655     +        %else %do;
25656     +            %exploreObs(data=&em_lib..&em_report_modelid._train);
25657     +            %let maxobs = &_EXPLOREOBS_MAX;
25658     +        %end;
25660     +        %if "&EM_SUMMARY_REPORT_SAMPLEMETHOD" ne ""
25661     +            %then  %let sampleMethod = &EM_SUMMARY_REPORT_SAMPLEMETHOD;
25662     +            %else  %let sampleMethod = RANDOM;
25664     +        %exploreSample(
25665     +            data     = &em_lib..&em_report_modelid._train,
25666     +            seed     = 12345,
25667     +            output   = &em_report_modelid._trainsample,
25668     +            method   = &sampleMethod,
25669     +            size     = &maxobs,
25670     +            sizetype = obs,
25671     +            metaData = &em_lib..&em_report_modelid._cmeta_train
25672     +        );
25674     +        %em_reporter_scorecard(
25675     +            indata        = %str(&em_report_modelid._trainsample),
25676     +            indata2       = %str(&em_lib..&em_report_modelid._train),
25677     +            inVariableSet = &EM_USER_tempmeta,
25678     +            name          = &name_to_use,
25679     +            libname       = work,
25680     +            crosstab      = &EM_PROPERTY_CROSSTABS,
25681     +            targetVar     = &scorecard_target,
25682     +            targetVar2    = &rpt_rpm_targetName,
25683     +            targetLevel   = &rpt_rpm_targetLevel,
25684     +            freqVar       = &freqVar,
25685     +            outVarRank    = &EM_USER_VarRank,
25686     +            outScoreCard  = &EM_USER_ScoreCard
25687     +        );
25689     +        proc sort data=&em_lib..&idsnode._variableset
25690     +            out=templabel(keep=&name_to_use label %if &vvnflag eq 1 %then %do; name %end;);
25691     +            by &name_to_use;
25692     +        run;
25694     +        %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 %then %do;
25696     +            proc sort data=&EM_USER_ScoreCard;
25697     +                by displayVar;
25698     +            data &EM_USER_ScoreCard;
25699     +                merge &EM_USER_ScoreCard(in=_a) templabel(rename=(&name_to_use=displayVar label=emrpmtmp_lbael));
25700     +                by displayVar;
25701     +                if _a;
25702     +                %if &vvnflag eq 1 %then %do;
25703     +                    if ^missing(name)  then displayvar=name;
25704     +                %end;
25705     +                if ^missing(emrpmtmp_lbael) then displayvar=emrpmtmp_lbael;
25706     +                drop emrpmtmp_lbael name;
25707     +            run;
25709     +        %end;
25711     +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 %then %do;
25713     +            proc sort data=&EM_USER_VarRank;
25714     +                by variable;
25715     +            data &EM_USER_VarRank;
25716     +                merge &EM_USER_VarRank(in=_a) templabel(rename=(&name_to_use=variable));
25717     +                by variable;
25718     +                if _a;
25719     +                if missing(label) then do;
25720     +                    label = variable;
25721     +                    %if &vvnflag eq 1 %then %do;
25722     +                        if ^missing(name) then label=name;
25723     +                    %end;
25724     +                end;
25725     +            proc sort data=&EM_USER_VarRank;
25726     +                by descending rank;
25727     +            run;
25729     +        %end;
25731     +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 and &EM_PROPERTY_VARRANKING eq Y %then %do;
25732     +            /* generate gtable like listing of variable importance */
25733     +            ods path(prepend) work.templat(update);
25734     +            proc template;
25735     +                define statgraph Rules / store=work.templat ;
25736     +                    begingraph / designheight=470px;
25737     +                        %if "&EM_REPORT_TITLE" ne ""
25738     +                            %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
25739     +                            %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
25740     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
25741     +                        layout lattice / columns=2 rowdatarange=union columnweights=(0.9 0.1) columngutter=0;
25742     +                            rowaxes; rowaxis; endrowaxes;
25743     +                            layout overlay / xaxisopts=(display=(line));
25744     +                                barchart x=label y=worth / orient=horizontal;
25745     +                            endlayout;
25746     +                        endlayout;
25747     +                    endgraph;
25748     +                end;
25749     +            run;
25750     +            proc sgrender data=&EM_USER_VARRANK template=Rules; run;
25751     +        %end;
25752     +    %end;
25753     +    %else %do;
25755     +        %if &rpt_rpm_isHP eq 1
25756     +            %then %let scorecard_lib = &rpt_rpm_datalib;
25757     +            %else %let scorecard_lib = work;
25759     +        ods &EM_REPORT_FORMAT exclude all;
25760     +        ods listing;
25761     +        %hpdm_scorecard(
25762     +            indata        = %str(&em_lib..&em_report_modelID._train),
25763     +            inVariableSet = &EM_USER_tempmeta,
25764     +            name          = &name_to_use,
25765     +            libname       = &scorecard_lib,
25766     +            crosstab      = &EM_PROPERTY_CROSSTABS,
25767     +            targetVar     = &scorecard_target,
25768     +            targetVar2    = &rpt_rpm_targetName,
25769     +            targetLevel   = &rpt_rpm_targetLevel,
25770     +            freqVar       = &freqVar,
25771     +            outVarRank    = &EM_USER_VarRank,
25772     +            outScoreCard  = &EM_USER_ScoreCard
25773     +        );
25774     +        ods listing close;
25775     +        ods &EM_REPORT_FORMAT select all;
25777     +        /* 3.4 - Variable Ranking from PROC HPREDUCE */
25779     +        %if &EM_PROPERTY_VARRANKING eq Y %then %do;
25780     +            ods &EM_REPORT_FORMAT text=" ";
25781     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
25782     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
25783     +            proc print data=&EM_USER_VARRANK noobs;
25784     +                var number variable;
25785     +            run;
25786     +        %end;
25787     +    %end;
25788     + %end;
25791     +/* RPM-5. Cumulative Lift chart *********************************************************************/
25793     +%if &EM_PROPERTY_LIFTCHART eq Y %then %do;
25795     +    %let em_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
25797     +    %if %sysfunc(exist(&em_rank)) %then %do;
25799     +        %EM_GETNAME(key=LIFT, type=DATA);
25800     +        data &EM_USER_LIFT;
25801     +            set &em_rank end=eof;
25802     +            if eof then call symput("_tarexists_", strip(target));
25804     +                 if upcase(strip(datarole)) eq 'TRAIN'    then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_roletrain_value,    NOQUOTE))";
25805     +            else if upcase(strip(datarole)) eq 'RAW'      then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_roleraw_value,      NOQUOTE))";
25806     +            else if upcase(strip(datarole)) eq 'VALIDATE' then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_rolevalidate_value, NOQUOTE))";
25807     +            datarole = strip(datarole);
25808     +        run;
25810     +        %let em_class=&em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
25812     +        %if (%sysfunc(exist(&em_class)) and "&rpt_rpm_targetLevel" ne "INTERVAL" )
25813     +        %then %do;
25814     +            %let this_title = rpt_rptcumliftchart_title;
25815     +            %let this_plotY = liftc;
25816     +        %end;
25817     +        %else %do;
25818     +            %let this_title = rpt_rptmeanpredresp_title;
25819     +            %let this_plotY = _MEANP_;
25820     +        %end;
25822     +        ods path(prepend) work.templat(update);
25823     +        proc template;
25824     +            define statgraph liftplot / store=work.templat;
25825     +                begingraph / designheight=470px;
25826     +                    %if "&EM_REPORT_TITLE" ne ""
25827     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
25828     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
25829     +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, &this_title, NOQUOTE))";
25830     +                    layout overlay;
25831     +                        seriesplot x=decile y=&this_plotY
25832     +                            / group =datarole lineattrs=(pattern=solid) name='lift';
25833     +                        discretelegend 'lift' ;
25834     +                    endlayout;
25835     +                endgraph;
25836     +            end;
25837     +        run;
25839     +        proc sgrender data=&EM_USER_LIFT
25840     +            %if "&_tarexists_" ne "." %then %do; (where=(target="&rpt_rpm_targetName")) %end;
25841     +            template=liftplot;
25842     +        run;
25843     +    %end;
25844     +%end;
25846     +/* RPM-6. Cumulative captured response chart *********************************************************/
25848     +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
25850     +    %EM_GETNAME(key=CAPRESPONSE, type=DATA);
25852     +    %let em_report_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
25854     +    %if %sysfunc(exist(&em_report_rank)) %then %do;
25856     +        %let em_report_class = &em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
25858     +        %if (%sysfunc(exist(&em_report_class)) and "&rpt_rpm_targetLevel" ne "INTERVAL" ) %then %do;
25860     +            /* generate % values and create categorical x values for plotting purposes */
25861     +            data &EM_USER_CAPRESPONSE;
25862     +                set &em_report_rank end=eof;
25863     +                length baseCat bestCat capCat decCat liftCat liftCCat $5;
25864     +                format basecapcp bestcapcp capcp decilep PERCENT6.0;
25865     +                basecapcp = basecapc / 100;  baseCat= put(basecapcp, PERCENT6.0 -L);
25866     +                bestcapcp = bestcapc / 100;  bestCat= put(bestcapcp, PERCENT6.0 -L);
25867     +                capcp     = capc / 100;      capCat = put(capcp, PERCENT6.0 -L);
25868     +                decilep   = decile / 100;    decCat = put(decilep, PERCENT6.0 -L);
25869     +                liftCat = lift;
25870     +                liftCCat= liftC;
25871     +                if eof then call symput("_tarexists_", strip(target));
25872     +            run;
25874     +            /* create template for Captured Response Plot */
25876     +            ods path(prepend) work.templat(update);
25877     +            proc template;
25878     +                define statgraph reg_emrank / store=work.templat;
25879     +                    begingraph / designheight=470px;
25880     +                    %if "&EM_REPORT_TITLE" ne ""
25881     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
25882     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
25883     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelgains_title, NOQUOTE))";
25884     +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE)) yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumcaptresponse_vlabel, NOQUOTE))");
25885     +                            seriesplot x=deccat y=basecapcp / lineattrs=(pattern=solid) name='base'  legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbase_vlabel, NOQUOTE))";
25886     +                            seriesplot x=deccat y=bestcapcp / lineattrs=(pattern=solid) name='best'  legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbest_vlabel, NOQUOTE))";
25887     +                            seriesplot x=deccat y=capcp     / lineattrs=(pattern=solid) name='model' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
25888     +                            innermargin / align=bottom;
25889     +                                blockplot x=deccat block=liftCcat / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumlift_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25890     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
25891     +                                blockplot x=deccat block=liftcat  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptlift_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25892     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
25893     +                                blockplot x=deccat block=capcat   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25894     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
25895     +                                blockplot x=deccat block=bestcat  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbest_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25896     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata2 altfillattrs=graphdata2;
25897     +                                blockplot x=deccat block=deccat   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25898     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault altfillattrs=graphdatadefault;
25899     +                            endinnermargin;
25900     +                            * discretelegend "base" "best" "model" / across=1 location=inside halign=right valign=bottom;
25901     +                        endlayout;
25902     +                    endgraph;
25903     +                end;
25904     +            run;
25905     +        %end;
25906     +        %else %do;
25908     +            /* generate % values and create categorical x values for plotting purposes */
25909     +            data &EM_USER_CAPRESPONSE;
25910     +                set &em_report_rank end=eof;
25911     +                length decCat $5;
25912     +                format  decilep PERCENT6.0;
25913     +                decilep = decile / 100;
25914     +                decCat = put(decilep, PERCENT6.0 -L);
25915     +                if eof then call symput("_tarexists_", strip(target));
25916     +            run;
25918     +            /* create template for Captured Response Plot */
25919     +            ods path(prepend) work.templat(update);
25920     +            proc template;
25921     +                define statgraph reg_emrank / store=work.templat;
25922     +                    begingraph / designheight=470px ;
25923     +                    %if "&EM_REPORT_TITLE" ne ""
25924     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
25925     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
25926     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelgainspred_title, NOQUOTE))";
25927     +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE)) yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredresp_vlabel, NOQUOTE))");
25928     +                            seriesplot x=deccat y=_meanp_ / lineattrs=(pattern=solid) name='mean' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel, NOQUOTE))";
25929     +                            seriesplot x=deccat y=_minp_ / lineattrs=(pattern=solid) name='min' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
25930     +                            seriesplot x=deccat y=_maxp_     / lineattrs=(pattern=solid) name='max' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
25931     +                            innermargin / align=bottom;
25932     +                                blockplot x=deccat block=_targetmean_  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmean_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25933     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
25934     +                                blockplot x=deccat block=_targetmin_   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmin_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25935     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
25936     +                                blockplot x=deccat block=_targetmax_   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmax_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25937     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
25938     +                                blockplot x=deccat block=_meanp_       / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmean_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25939     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
25940     +                                blockplot x=deccat block=_minp_        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmin_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25941     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
25942     +                                blockplot x=deccat block=_maxp_        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmax_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25943     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
25944     +                                blockplot x=deccat block=deccat        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
25945     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault altfillattrs=graphdatadefault;
25946     +                            endinnermargin;
25947     +                            * discretelegend "mean" "min" "max" / across=1 location=inside halign=left valign=bottom;
25948     +                        endlayout;
25949     +                    endgraph;
25950     +                end;
25951     +            run;
25952     +        %end;
25954     +        /* render plot */
25956     +        %let validflag=0;
25957     +        data tempvalid;
25958     +            set &EM_USER_CAPRESPONSE(where=(datarole="VALIDATE"));
25959     +        run;
25961     +        %let dsid = %sysfunc(open(work.tempvalid));
25962     +        %if &dsid %then %do;
25963     +            %let validobs = %sysfunc(attrn(&dsid, NOBS));
25964     +            %if &validobs gt 0 %then %let validflag = 1;
25965     +        %end;
25966     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25968     +        proc sgrender data=&EM_USER_CAPRESPONSE
25969     +            %if "&_tarexists_" ne "." %then %do; (where=(target="&rpt_rpm_targetName"))%end;
25970     +            template=reg_emrank;
25971     +            %if &validflag eq 1
25972     +                %then %do; where datarole="VALIDATE"; %end;
25973     +                %else %do; where datarole="TRAIN";    %end;
25974     +        run;
25975     +    %end;
25976     +%end;
25979     +/* RPM-7. ROC CHART ******************************************************************************************/
25981     +%if ((&RPM_REPORT_MDLCOMP ne ) or (&em_report_modelid ne )) and (&EM_PROPERTY_BASICOUTPUT eq Y) %then %do;
25983     +    %let em_report_roc = &em_lib..&RPM_REPORT_MDLCOMP._emroc;
25984     +    %let em_report_hpassess = &em_lib..%sysfunc(trim(&em_report_modelid))_hpassess;
25985     +    %let em_report_hpstats  = &em_lib..%sysfunc(trim(&em_report_modelid))_hpreportstats;
25987     +    %EM_GETNAME(key=ROC, type=DATA);
25988     +    %let plot_KS  = 0;
25989     +    %let plot_ROC = 0;
25990     +    %let train_X  = 0; %let train_Y  = 0; %let train_KS = 0;
25991     +    %let valid_X  = 0; %let valid_Y  = 0; %let valid_KS = 0;
25993     +    %if %sysfunc(exist(&em_report_roc)) %then %do;
25995     +        proc sql noprint;
25996     +            select count(*) into :validroc from &em_report_roc where datarole eq "VALIDATE";
25997     +        quit;
25999     +        /* make the ROC table */
26000     +        data &EM_USER_ROC;
26001     +            length group $32 diff 8;
26002     +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26003     +            set &em_report_roc;
26004     +            if strip(model)='_Baseline_'
26005     +                then group='Baseline';
26006     +                else group=Datarole;
26007     +            where (strip(model) ='_Baseline_' and DataRole='TRAIN') or (strip(model)= "&em_report_modelid" and DataRole in('TRAIN','VALIDATE'));
26008     +            diff = sensitivity-oneminusspecificity;
26009     +        run;
26011     +        /* get KS statistics */
26013     +        proc sql noprint;
26014     +            create table ks_stat as
26015     +                select distinct datarole, max(diff) as ks from &EM_USER_ROC group by datarole;
26016     +            select round(ks, 0.00001) into :train_ks
26017     +                from ks_stat where datarole eq 'TRAIN';
26018     +            select round(ks, 0.00001) into :valid_ks
26019     +                from ks_stat where datarole eq 'VALIDATE';
26020     +            select oneMinusSpecificity, sensitivity into :train_x, :train_y
26021     +                from &EM_USER_ROC where datarole eq 'TRAIN' and round(diff, 0.00001) eq &train_ks;
26022     +            select oneMinusSpecificity, sensitivity into :valid_x, :valid_y
26023     +                from &EM_USER_ROC where datarole eq 'VALIDATE' and round(diff, 0.00001) eq &valid_ks;
26024     +        quit;
26026     +        %let plot_KS = 1;
26027     +        %let plot_ROC = 1;
26028     +    %end;
26029     +    %else %if %sysfunc(exist(&em_report_hpassess)) and "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
26031     +        /* make the ROC table */
26033     +        proc sql noprint;
26034     +            select count(*) into :validroc from &em_report_hpassess where datarole eq "VALIDATE";
26035     +        quit;
26037     +        data &EM_USER_ROC;
26038     +            length group $32;
26039     +            group='Baseline';
26040     +            sensitivity = 0; oneminusspecificity = 0; output;
26041     +            sensitivity = 1; oneminusspecificity = 1; output;
26042     +        run;
26044     +        data &EM_USER_ROC;
26045     +            length group $32;
26046     +            set &em_report_hpassess(in=in1 rename=(one_minus_specificity=oneminusspecificity)) &EM_USER_ROC;
26047     +            if in1 then group=datarole;
26048     +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26049     +        run;
26051     +        /* get KS statistics */
26053     +        %if %sysfunc(exist(&em_report_hpstats)) %then %do;
26055     +             data _null_;
26056     +                set &em_report_hpstats;
26057     +                if upcase(stat) eq 'KSREF' then call symput('train_X', put(train,best24.));
26058     +                if upcase(stat) eq 'KSR'   then call symput('train_KS',round(train,0.00001));
26059     +                %if &validroc ge 1 %then %do;
26060     +                    if upcase(stat) eq 'KSREF' then call symput('valid_X', put(validate,best24.));
26061     +                    if upcase(stat) eq 'KSR'   then call symput('valid_KS',round(validate,0.00001));
26062     +                %end;
26063     +            run;
26065     +            data _null_;
26066     +                tmp=&train_X+&train_KS/100; call symput('train_Y',put(tmp,best24.));
26067     +                tmp=&valid_X+&valid_KS/100; call symput('valid_Y',put(tmp,best24.));
26068     +            run;
26070     +            %if &train_Y gt 0 %then %let plot_KS = 1;
26071     +            %let plot_ROC = 1;
26072     +        %end;
26073     +    %end;
26075     +    %if &plot_ROC eq 1 %then %do;
26077     +        /* add coordinates for ref lines */
26078     +        data refline;
26079     +            length oneminusspecificity sensitivity x y 8 datarole $8 group $32 text $60;
26080     +            %if &train_Y gt 0 %then %do;
26081     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'; group='TRAIN';
26082     +                text=""; x=.; y=.; output;
26083     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_X; datarole='TRAIN'; group='TRAIN';
26084     +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_trainks_vlabel, NOQUOTE))","&train_KS"); x=&TRAIN_X; y=&TRAIN_X - 0.05; output;
26085     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'; group='TRAIN';
26086     +                text=""; x=.; y=.; output;
26087     +            %end;
26088     +            %if &validroc ge 1 and &valid_Y gt 0 %then %do;
26089     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y; datarole='VALIDATE'; group='VALIDATE';
26090     +                text=""; x=.; y=.; output;
26091     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_X; datarole='VALIDATE'; group='VALIDATE';
26092     +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_validks_vlabel, NOQUOTE))","&valid_KS"); x=&VALID_X; y=&VALID_X - 0.05; output;
26093     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y; datarole='VALIDATE'; group='VALIDATE';
26094     +                text=""; x=.; y=.; output;
26095     +            %end;
26096     +        data &EM_USER_ROC;
26097     +           set &EM_USER_ROC refline;
26098     +           if group eq 'TRAIN'    then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, NOQUOTE))";
26099     +           if group eq 'VALIDATE' then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel, NOQUOTE))";
26100     +           if group eq 'Baseline' then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_baselineroc_value, NOQUOTE))";
26101     +        run;
26103     +        /* plot ROC chart */
26104     +        ods path(prepend) work.templat(update);
26105     +        proc template;
26106     +            define statgraph rocplot / store=work.templat;
26107     +                begingraph / designheight=470px;
26108     +                    %if "&EM_REPORT_TITLE" ne ""
26109     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
26110     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
26111     +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptroc_title, NOQUOTE))";
26112     +                    layout overlay;
26113     +                        seriesplot x=oneminusspecificity y=sensitivity / group =group lineattrs=(pattern=solid) name='series';
26114     +                        %if &plot_ks eq 1 %then %do;
26115     +                            scatterplot x=x y=y / group=group datalabel=text  datalabelattrs=(weight=bold) markerattrs=(size=0px);
26116     +                        %end;
26117     +                        discretelegend 'series' / title="&em_report_modeldesc  %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26118     +                    endlayout;
26119     +                endgraph;
26120     +            end;
26121     +        run;
26123     +        proc sort data=&EM_USER_ROC; by group oneminusspecificity; run;
26124     +        proc sgrender data=&EM_USER_ROC template=rocplot; run;
26125     +        title1; title2;
26126     +    %end;
26127     +%end;
26129     +/* RPM-8. Scorecard *****************************************************************************************/
26131     +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
26133     +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 0 %then %do;
26135     +        %let ColPercNum = 0;
26136     +        %let sdsid = %sysfunc(open(&EM_USER_SCORECARD));
26137     +        %let colPercnum = %sysfunc(varnum(&sdsid, colPercent));
26138     +        %if &sdsid %then %let sdsid = %sysfunc(close(&sdsid));
26140     +        %let tmpstr1 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_scpoints, NOQUOTE));
26141     +        %let tmpstr2 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_overall, NOQUOTE));
26142     +        %let tmpstr3 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_singleN, NOQUOTE));
26144     +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL" and &colPercnum gt 0
26145     +        %then %do;
26147     +            ods &EM_REPORT_FORMAT text=" ";
26148     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
26149     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
26151     +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
26152     +                class displayvar rowVariable varvalue &rpt_rpm_targetName / missing;
26153     +                var allfreq allPercent scorepoints colpercent frequency;
26154     +                keylabel sum=" ";
26155     +                table displayvar*varvalue,
26156     +                    (scorepoints="&tmpstr1" allfreq="&tmpstr2 &tmpstr3" allpercent="&tmpstr2 %" )
26157     +                    &rpt_rpm_targetName*(frequency="&tmpstr3" colPercent="%" )
26158     +                    / indent=3 rtspace=32 style=[outputwidth=100%];
26159     +            run; quit;
26160     +        %end;
26161     +        %else %do;
26163     +            ods &EM_REPORT_FORMAT text=" ";
26164     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
26165     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrmpscorecard_title, NOQUOTE))";
26167     +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
26168     +                class displayvar / missing;
26169     +                keylabel sum=" ";
26170     +                class varvalue / missing;
26171     +                var scorepoints;
26172     +                table displayvar*varvalue, (scorepoints="&tmpstr1")*sum
26173     +                    / misstext = " " indent = 3 rtspace=32;
26174     +            run; quit;
26175     +         %end;
26176     +    %end;
26178     +    /* this part definitely need review mxx*/
26179     +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 1 %then %do;
26181     +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
26182     +            ods &EM_REPORT_FORMAT text=" ";
26183     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
26184     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
26185     +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
26186     +                class displayvar rowVariable displayLvl &rpt_rpm_targetName / MISSING;
26187     +                var allfreq allPercent scorepoints colpercent frequency;
26188     +                keylabel sum=" ";
26189     +                table displayvar * displayLvl, (scorepoints="Scorecard Points" allfreq="Overall N" allpercent="Overall %" )
26190     +                    &rpt_rpm_targetName*(frequency="N" colPercent="%" )
26191     +                    / indent=3 rtspace=32 style=[outputwidth=100%];
26192     +            run; quit;
26193     +        %end;
26194     +        %else %do;
26195     +            ods &EM_REPORT_FORMAT text=" ";
26196     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
26197     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
26198     +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
26199     +                class displayvar / MISSING;
26200     +                keylabel sum=" ";
26201     +                class displayLvl / missing;
26202     +                var SCOREPOINTS;
26203     +                table displayvar * displayLvl, (scorepoints="Scorecard Points")  * sum / misstext = " "
26204     +                      indent = 3 rtspace=32 style=[outputwidth=50%];
26205     +            run; quit;
26206     +        %end;
26207     +    %end;
26208     +%end;
26210     +%if &RPM_REPORT_SCORENODE ne %then %do;
26212     +    /* RPM-9. Classification matrix *********************************************************************/
26214     +    %if &EM_PROPERTY_CLASSIFICATION eq Y %then %do;
26216     +        %let em_report_class = &em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
26218     +        %if %sysfunc(exist(&em_report_class)) %then %do;
26220     +            %EM_GETNAME(key=MISCLASS, type=DATA);
26221     +            data &EM_USER_MISCLASS;
26222     +                set &em_report_class;
26223     +                where _TYPE_="PREDICTION" AND TARGET="&rpt_rpm_targetName";
26224     +            run;
26226     +            %let numobs=0;
26227     +            %let dsid = %sysfunc(open(&EM_USER_MISCLASS));
26228     +            %let numobs = %sysfunc(attrn(&dsid, NOBS));
26229     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26231     +            %if (%sysfunc(exist(&em_USER_MISCLASS)) and &numobs gt 0) %then %do;
26233     +                ods &EM_REPORT_FORMAT text=" ";
26234     +                %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
26235     +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
26236     +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
26237     +                %end;
26238     +                %else %do;
26239     +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
26240     +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
26241     +                %end;
26243     +                proc tabulate data=&EM_USER_MISCLASS order=data noseps;
26244     +                    keylabel sum=" ";
26245     +                    class from into datarole;
26246     +                    var pct_col;
26247     +                    table from , (datarole*into='Predicted') * pct_col="" / style=[outputwidth=50%];
26248     +                run; quit;
26249     +            %end;
26250     +        %end;
26251     +    %end;
26253     +    /* RPM-10. Fit Statistics **************************************************************************/
26255     +    %if &EM_PROPERTY_FITSTAT eq Y %then %do;
26257     +        %let fitdat1 =&em_lib..&RPM_REPORT_MDLCOMP._emreportfit;
26258     +        %let fitdat2 =&em_lib..&em_report_modelid._emreportfit;
26260     +        /* prefer to use HPREPORTSTATS table from the modeling nodel */
26262     +        %if %sysfunc(exist(&em_lib..&em_report_modelid._hpreportstats)) %then %do;
26264     +            %EM_GETNAME(key=REPORTFIT, type=DATA);
26266     +            data &EM_USER_REPORTFIT;
26267     +                set &em_lib..&em_report_modelid._hpreportstats;
26268     +            run;
26270     +            %let validfit=0;
26271     +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
26272     +            %if &dsid %then %do;
26273     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
26274     +                %if &validnum %then %let validfit = 1;
26275     +            %end;
26276     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26278     +            ods &EM_REPORT_FORMAT text=" ";
26279     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
26280     +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
26282     +            proc print data=&EM_USER_REPORTFIT label noobs style=[outputwidth=50%];
26283     +                %if &validfit eq 1 %then %do;
26284     +                    var Label Train Validate;
26285     +                    format Train 12.4 Validate 12.4;
26286     +                %end;
26287     +                %else %do;
26288     +                    var Label Train;
26289     +                    format Train 12.4;
26290     +                %end;
26291     +            run;
26292     +        %end;
26293     +        %else %if %sysfunc(exist(&fitdat1)) or %sysfunc(exist(&fitdat2)) %then %do;
26295     +            %EM_GETNAME(key=REPORTFIT, type=DATA);
26297     +            data &EM_USER_REPORTFIT;
26298     +                length Label $40;
26299     +                label Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, NOQUOTE))";
26300     +                %if %sysfunc(exist(&fitdat1)) eq 1
26301     +                    %then %do; set &fitdat1; %end;
26302     +                    %else %do; set &fitdat2.(rename=(stat=fitstat)); %end;
26304     +                if FitStat='_LIFT_'  then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptlift10_vlabel, NOQUOTE))";
26305     +                if FitStat='_LIFTC_' then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumlift10_vlabel, NOQUOTE))";
26306     +                if FitStat='_CAP_'  then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcaptresp10_vlabel, NOQUOTE))";
26307     +                if FitSTat='_CAPC_' then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumcaptresp10_vlabel, NOQUOTE))";
26308     +                if FitSTat='_NOBS_' then Label="%sysfunc(sasmsg(sashelp.dmine, stat_nobs_vlabel, NOQUOTE))";
26309     +                if FitSTat='_MISC_' then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_misc_vlabel, NOQUOTE))";
26310     +                if FitSTat='_MAX_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_max_vlabel, NOQUOTE))";
26311     +                if FitSTat='_SSE_'  then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_sse_vlabel, NOQUOTE))";
26312     +                if FitSTat='_ASE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_ase, NOQUOTE))";
26313     +                if FitSTat='_RASE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_rase_vlabel, NOQUOTE))";
26314     +                if FitSTat='_DIV_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_div_vlabel, NOQUOTE))";
26315     +                if FitSTat='_DFT_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dft, NOQUOTE))";
26316     +                if FitSTat='_AIC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_aic, NOQUOTE))";
26317     +                if FitSTat='_MSE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_mse, NOQUOTE))";
26318     +                if FitSTat='_RMSE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rmse, NOQUOTE))";
26319     +                if FitSTat='_AVERR_' then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_averr_vlabel, NOQUOTE))";
26320     +                if FitSTat='_DFE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfe, NOQUOTE))";
26321     +                if FitSTat='_DFM_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfm, NOQUOTE))";
26322     +                if FitSTat='_ERR_'  then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_err_vlabel, NOQUOTE))";
26323     +                if FitSTat='_FPE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_fpe, NOQUOTE))";
26324     +                if FitSTat='_NW_'   then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_nw, NOQUOTE))";
26325     +                if FitSTat='_RFPE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rfpe, NOQUOTE))";
26326     +                if FitSTat='_SBC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_sbc, NOQUOTE))";
26327     +            run;
26329     +            %let validfit=0;
26330     +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
26331     +            %if &dsid %then %do;
26332     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
26333     +                %if &validnum %then %let validfit = 1;
26334     +            %end;
26335     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26337     +            ods &EM_REPORT_FORMAT text=" ";
26338     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
26339     +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
26341     +            proc print data=
26342     +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
26343     +                %then %do;
26344     +                    &EM_USER_REPORTFIT(where=(MODEL="&em_report_modelId" AND TARGET="&rpt_rpm_targetName"))
26345     +                %end;
26346     +                %else %do;
26347     +                    &EM_USER_REPORTFIT(where=(TARGET="&rpt_rpm_targetName"))
26348     +                %end;
26349     +                label noobs style=[outputwidth=50%];
26350     +                %if &validfit eq 1 %then %do;
26351     +                    var Label Train Validate;
26352     +                    format Train 12.4 Validate 12.4;
26353     +                    label
26354     +                        train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , NOQUOTE))"
26355     +                        validate = "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel , NOQUOTE))"
26356     +                    ;
26357     +                %end;
26358     +                %else %do;
26359     +                    var Label Train;
26360     +                    format Train 12.4;
26361     +                    label train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , NOQUOTE))";
26362     +                %end;
26363     +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
26364     +                %then %do;
26365     +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_', '_ASE_', '_AUR_', '_GINI_', 'KS',
26366     +                                      '_KS_PROB_CUTOFF', '_LIFT_', '_LIFTC_', '_CAP_', '_CAPC_', '_AIC_', '_AVERR_',
26367     +                                      '_MAX_','_MSE_', '_RASE_', '_RMSE_', '_SBC_', '_SSE_') and TRAIN ne .;
26368     +                %end;
26369     +                %else %do;
26370     +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_', '_ASE_', '_AIC_', '_AVERR_', '_MAX_',
26371     +                                      '_MSE_', '_RASE_', '_RMSE_', '_SBC_', '_SSE_') and TRAIN ne .;
26372     +                %end;
26373     +            run;
26374     +        %end;
26375     +    %end;
26377     +    /* RPM-11. Model Comparison Table */
26379     +    %if &EM_PROPERTY_COMPAREMDL eq Y and RPM_REPORT_MDLCOMP ne %then %do;
26381     +        %EM_GETNAME(KEY=COMPAREMDL, TYPE=DATA);
26383     +        %let em_report_mdlOutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
26385     +        %if %sysfunc(exist(&em_report_mdlOutfit)) %then %do;
26387     +            /* determine model selection criterion - to included in print */
26388     +            %em_modelprops(dgmid=&em_lib, modelid=&RPM_REPORT_MDLCOMP, output=%nrbquote(work.modelprop));
26390     +            %let selectcrit = ;
26391     +            data _null_;
26392     +                set work.modelprop(where=(NAME="ModelCriteria")) end=eof;
26393     +                if eof then call symput('selectcrit', VALUE);
26394     +            run;
26396     +            %let selectstat=;
26397     +            %let choice = USE="Y";
26398     +            %let dsid = %sysfunc(open(&em_report_mdlOutfit(where=(&choice))));
26399     +            %if &dsid %then %do;
26400     +                %let obs = %sysfunc(fetchobs(&dsid, 1));
26401     +                %let selectstat = %sysfunc(VARNAME(&dsid, 6));
26402     +            %end;
26403     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26405     +            %let validflag=0;
26406     +            %let dsid = %sysfunc(open(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit));
26407     +            %if &dsid %then %do;
26408     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
26409     +                %if &validnum %then %let validflag = 1;
26410     +            %end;
26411     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26413     +            data &EM_USER_COMPAREMDL;
26414     +                set &em_report_mdlOutfit;
26415     +                keep use model modelDescription &selectstat
26416     +                %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
26417     +                    %if &selectstat ne _LIFT_ %then %do; _LIFT_ %end;
26418     +                    %if &validflag eq 1 %then %do;
26419     +                        %if &selectstat ne _VLIFT_ %then %do; _VLIFT_ %end;
26420     +                    %end;
26421     +                    %if &selectstat ne _AIC_ %then %do; _AIC_  %end;
26422     +                %end;
26423     +                %else %do;
26424     +                    %if &selectstat ne _ASE_ %then %do; _ASE_ %end;
26425     +                    %if &validflag eq 1 %then %do;
26426     +                        %if &selectstat ne _VASE_ %then %do; _VASE_ %end;
26427     +                    %end;
26428     +                %end;
26429     +                ;
26430     +            run;
26432     +            ods &EM_REPORT_FORMAT text=" ";
26433     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcomparemdl_title, NOQUOTE, &selectcrit))";
26434     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcomparemdl_title, NOQUOTE, &selectcrit))";
26436     +            proc print data=&EM_USER_COMPAREMDL label noobs style=[outputwidth=50%]; run;
26437     +        %end;
26438     +    %end;
26440     +    /* RPM-12. Project Info */
26442     +    %if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
26444     +        %let pos = %index(&em_nodedir, Workspaces);
26445     +        %if &pos %then %do;
26447     +            %let projpath = %nrbquote(%sysfunc(trim(%sysfunc(substr(&em_nodedir, 1, %eval(&pos-2))))));
26448     +            %let reverse = %nrbquote(%sysfunc(reverse(&projpath)));
26449     +            %let pos2 = %index(&reverse, &em_dsep);
26450     +            %let len = %length(&projpath);
26451     +            %let projname = %nrbquote(%substr(&projpath, %eval(2+ &len-&pos2)));
26452     +            %let projname =%nrbquote(%sysfunc(tranwrd(%nrstr(&projname), %str(%"),"")));
26453     +            %let wsname  = %nrbquote(%sysfunc(tranwrd(%nrstr(&em_wsname), %str(%"),"")));
26455     +            %EM_GETNAME(key=PROJINFO, type=DATA);
26456     +            data &EM_USER_PROJINFO;
26457     +                length stat $200 value $200;
26458     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))";
26459     +                value="&projname";
26460     +                output;
26462     +                stat="%sysfunc(sasmsg(sashelp.dmine, views_descriptions_diagram, NOQUOTE))";
26463     +                value="&wsname";
26464     +                output;
26466     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpath_title, NOQUOTE))";
26467     +                value="&projpath";
26468     +                output;
26470     +                %let createTime = %sysfunc(left(%sysfunc(putn(%sysfunc(dateTime()), NLDATM24.0))));
26471     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_crdate_vlabel, NOQUOTE))";
26472     +                value="&createTime";
26473     +                output;
26475     +                label stat="%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))"
26476     +                      value="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
26478     +            run;
26480     +            ods &EM_REPORT_FORMAT text=" ";
26481     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptprojinfo_title, NOQUOTE))";
26482     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptprojinfo_title, NOQUOTE))";
26484     +            proc print data=&EM_USER_PROJINFO noobs label style=[outputwidth=50%]; run;
26485     +        %end;
26486     +    %end;
26487     +%end;
26489     +%skip:
26491     +%mend em_report_summary;
26494     +%macro em_reporter_scorecard(
26495     +/**----------------------------------------------------------------------**/
26496     +/*  EM_REPORTER_SCORECARD                                                 */
26497     +/*    generate scorecard report for EM RPM flows. currently this is an    */
26498     +/*    interval macro for RPM and does not perform any argument checking.  */
26499     +/**----------------------------------------------------------------------**/
26500     +inData           = ,     /* input training data set                       */
26501     +inData2          = ,
26502     +inVariableSet    = ,     /* input variable metadata, must have the three  */
26503     +                         /* columns: level, role and &name                */
26504     +name             = name, /* variable name column in the metadata          */
26505     +libname          = work, /* libname to save the temporary binned data     */
26506     +crosstab         = Y,    /* create cross-tabulation or not. Default = Y   */
26507     +targetVar        = ,     /* target variable for regressions and scores    */
26508     +targetVar2       = ,     /* target variable for cross-tabulations         */
26509     +targetLevel      = ,     /* target level                                  */
26510     +freqVar          = ,     /* frequency variable                            */
26511     +outVarRank       = ,     /* output dataset for variable ranking (HPREDUCE)*/
26512     +outScorecard     =       /* output dataset for scorecard report           */
26513     +/**----------------------------------------------------------------------**/
26514     +/* Created: 08/20/2012, XXM                                               */
26515     +/**----------------------------------------------------------------------**/
26516     +);
26518     +/**--------------------------------------------------------------------------------------**/
26519     +/** 0. Configurations                                                                    **/
26520     +/**--------------------------------------------------------------------------------------**/
26522     +** get target level;
26523     +%let targetVar   = &targetVar;
26524     +%let targetVar2  = &targetVar2;
26525     +%let targetLevel = &targetLevel;
26527     +** check valid target name and level;    /* TBA */
26529     +** check VariableSet has LEVEL and NAME; /* TBA */
26531     +/**--------------------------------------------------------------------------------------**/
26532     +/** 1. Get the input variables from variable set                                         **/
26533     +/**--------------------------------------------------------------------------------------**/
26535     +%let nom_vars = ;
26536     +%let ord_vars = ;
26537     +%let int_vars = ;
26538     +%let n_nomvars = 0;
26539     +%let n_ordvars = 0;
26540     +%let n_intvars = 0;
26542     +data _null_;
26543     +    set &inVariableSet(where=(LEVEL in ('NOMINAL', 'BINARY') and upcase(&name) ne "&targetVar")) end=eof;
26544     +    call symput('nom_vars'!!strip(put(_N_,BEST.)), strip(&name));
26545     +    if eof then call symput('n_nomvars', strip(put(_N_,BEST.)));
26546     +data _null_;
26547     +    set &inVariableSet(where=(LEVEL='ORDINAL' and upcase(&name) ne "&targetVar")) end=eof;
26548     +    call symput('ord_vars'!!strip(put(_N_,BEST.)), strip(&name));
26549     +    if eof then call symput('n_ordvars', strip(put(_N_,BEST.)));
26550     +data _null_;
26551     +    set &inVariableSet(where=(LEVEL='INTERVAL' and upcase(&name) ne "&targetVar")) end=eof;
26552     +    call symput('int_vars'!!strip(put(_N_,BEST.)), strip(&name));
26553     +    if eof then call symput('n_intvars', strip(put(_N_,BEST.)));
26554     +run;
26556     +%let n_svars = %eval(&n_nomvars+&n_ordvars+&n_intvars);
26558     +%if ((&n_nomvars gt 0) OR (&n_ordvars gt 0) OR (&n_intvars gt 0)) %then %do;
26560     +    /**----------------------------------------------------------------------------------**/
26561     +    /** 2. PROC ARBOR                                                                    **/
26562     +    /**----------------------------------------------------------------------------------**/
26564     +    proc arbor data=&indata
26565     +        alpha=1 leafsize=5 mincatsize=5 maxbranch=8 maxdepth=1 NORULELIMIT
26566     +        maxrules=&n_svars maxsurrs=0 missing=USEINSEARCH exhaustive=5000
26567     +    ;
26568     +        %if &n_nomvars gt 0 %then %do;
26569     +            input %do i=1 %to &n_nomvars; &&nom_vars&i %end; / level = nominal;
26570     +        %end;
26571     +        %if &n_ordvars gt 0 %then %do;
26572     +            input %do i=1 %to &n_ordvars; &&ord_vars&i %end; / level = ordinal;
26573     +        %end;
26574     +        %if &n_intvars gt 0 %then %do;
26575     +            input %do i=1 %to &n_intvars; &&int_vars&i %end; / level = interval;
26576     +        %end;
26577     +        %if &freqvar ne %then %do; freq &freqvar; %end;
26578     +        target &targetVar / level=&targetLevel;
26579     +        save importance=importance rules=rules;
26580     +    run;
26582     +    /**----------------------------------------------------------------------------------**/
26583     +    /** 2. get VarRank output table                                                      **/
26584     +    /**----------------------------------------------------------------------------------**/
26586     +    /* keep only the top 50 input variables - based on rank */
26588     +    data &outVarRank(where=(rank le 50));
26589     +        length variable $32 worth 8;
26590     +        set rules;
26591     +        by rank;
26592     +        retain variable worth;
26593     +        label variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
26594     +        keep variable rank worth;
26596     +        if STAT="VARIABLE" then variable=Character_value;
26597     +        if STAT="WORTH" then worth=Numeric_value;
26598     +        if last.rank then output;
26599     +    run;
26601     +    data &outVarRank;
26602     +        set &outVarRank;
26603     +        if worth=. then do;
26604     +            worth = 0.00;
26605     +            rank  = _N_;
26606     +        end;
26607     +    run;
26609     +    /* selected interval and class input variables */
26610     +    proc sql noprint;
26611     +        create table tempclass(drop=&name) as
26612     +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
26613     +                on upcase(a.variable) eq upcase(b.&name)
26614     +            where level ne "INTERVAL"
26615     +            order by a.variable
26616     +        ;
26617     +        create table tempinterval(drop=&name) as
26618     +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
26619     +                on upcase(a.variable) eq upcase(b.&name)
26620     +            where level eq "INTERVAL"
26621     +            order by a.variable
26622     +        ;
26623     +    quit;
26625     +    /* create array of class variables names */
26626     +    %let class_vars=;
26627     +    %let n_classvars=0;
26628     +    data _null_;
26629     +        set tempclass end=eof;
26630     +        call symput('class_vars'!!strip(put(_N_,BEST.)), strip(variable));
26631     +        if eof then call symput('n_classvars', strip(put(_N_,BEST.)));
26632     +    run;
26634     +    /**----------------------------------------------------------------------------------**/
26635     +    /** 3. Get Bining information                                                        **/
26636     +    /**----------------------------------------------------------------------------------**/
26638     +    %let dsid = %sysfunc(open(work.rules));
26639     +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
26640     +    %let numvars = %sysfunc(attrn(&dsid, NVARS));
26641     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26643     +    %if %sysfunc(exist(&outVarRank)) and (&numobs gt 0) and (&numvars gt 0) %then %do;
26645     +        data rules;
26646     +            set rules;
26647     +            where STAT in ('VARIABLE', 'INTERVAL', 'MISSING');
26648     +            numeric_value = round(numeric_value, 0.001);
26649     +        proc sort data=rules;
26650     +            by rank numeric_value;
26651     +        run;
26653     +        data binning_rules;
26654     +            length origVar $32;
26655     +            set rules;
26656     +            by rank;
26657     +            retain origVar oldLB;
26658     +            keep origVar LB UB;
26660     +            if STAT="VARIABLE" then origVar = Character_value;
26661     +            if first.rank then oldLB=.;
26662     +            if STAT="INTERVAL" then do;
26663     +                LB = oldLB;
26664     +                UB = Numeric_value;
26665     +                oldLB=UB;
26666     +                output;
26667     +            end;
26668     +            if last.rank then do;
26669     +                LB=oldLB;
26670     +                UB = .;
26671     +                output;
26672     +            end;
26673     +        run;
26675     +        /* names for binning */
26676     +        proc sql noprint;
26677     +            create table tempbinnames(drop=variable) as
26678     +                select distinct origVar, role from binning_rules as a inner join tempinterval as b
26679     +                  on a.OrigVar eq b.variable;
26680     +        quit;
26682     +        /* get name server */
26683     +        proc dmdb data=tempbinnames outtable=tempbinnames nameserver;
26684     +            names origVar;
26685     +            prefix BIN_;
26686     +        run;
26688     +        /* merge binned names back to temp */
26689     +        proc sql noprint;
26690     +            create table binning_rules_names as
26691     +                select a.*, b.bin as binVar from binning_rules as a right join tempbinnames as b
26692     +                    on a.origVar eq b.origVar
26693     +                order by a.origVar, a.LB, a.UB;
26694     +        quit;
26696     +        /* create array of bin variables names */
26697     +        %let bin_vars=;
26698     +        %let n_binvars=0;
26699     +        data _null_;
26700     +            set tempbinnames end=eof;
26701     +            call symput('bin_vars'!!strip(put(_N_,BEST.)), strip(bin));
26702     +            if eof then call symput('n_binvars', strip(put(_N_,BEST.)));
26703     +        run;
26705     +    /**----------------------------------------------------------------------------------**/
26706     +    /** 4. Bin the interval variables                                                    **/
26707     +    /**    note that binned is used for DMREG, binned_full is used for CROSSTAB          **/
26708     +    /**----------------------------------------------------------------------------------**/
26710     +    data binned;
26711     +        set &indata;
26713     +        %if &n_binvars gt 0 %then %do;
26714     +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
26715     +        %end;
26717     +        %let dsid = %sysfunc(open(binning_rules_names));
26718     +        %if &dsid %then %do;
26719     +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
26720     +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
26721     +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
26722     +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
26724     +            %let obs     = %sysfunc(fetch(&dsid));
26725     +            %do %while(&obs=0);
26726     +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
26727     +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
26728     +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
26729     +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
26731     +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
26732     +                    %let count = 1;
26733     +                    if &origvar < &ub then &binvar = "&count: low - &ub";
26734     +                %end;
26735     +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
26736     +                    %let count = %eval(&count+1);
26737     +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
26738     +                %end;
26739     +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
26740     +                    %let count = 1;
26741     +                    &binvar = "&count: low - high";
26742     +                %end;
26743     +                %else %do;
26744     +                    %let count = %eval(&count+1);
26745     +                    else if &origvar < &ub AND &origvar >= &lb then &binvar = "&count: &lb - &ub";
26746     +                %end;
26748     +                %let obs = %sysfunc(fetch(&dsid));
26749     +            %end;
26750     +        %end;
26751     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26752     +    run;
26754     +    data binned_full;
26755     +        set &indata2;
26757     +        %if &n_binvars gt 0 %then %do;
26758     +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
26759     +        %end;
26761     +        %let dsid = %sysfunc(open(binning_rules_names));
26762     +        %if &dsid %then %do;
26763     +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
26764     +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
26765     +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
26766     +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
26768     +            %let obs     = %sysfunc(fetch(&dsid));
26769     +            %do %while(&obs=0);
26770     +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
26771     +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
26772     +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
26773     +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
26775     +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
26776     +                    %let count = 1;
26777     +                    if &origvar < &ub then &binvar = "&count: low - &ub";
26778     +                %end;
26779     +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
26780     +                    %let count = %eval(&count+1);
26781     +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
26782     +                %end;
26783     +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
26784     +                    %let count = 1;
26785     +                    &binvar = "&count: low - high";
26786     +                %end;
26787     +                %else %do;
26788     +                    %let count = %eval(&count+1);
26789     +                    else if &origvar < &ub AND &origvar >= &lb then &binvar = "&count: &lb - &ub";
26790     +                %end;
26792     +                %let obs     = %sysfunc(fetch(&dsid));
26793     +            %end;
26794     +        %end;
26795     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26796     +    run;
26798     +    /**----------------------------------------------------------------------------------**/
26799     +    /** 5. Generate scores                                                               **/
26800     +    /**----------------------------------------------------------------------------------**/
26802     +    proc dmdb batch data=binned dmdbcat=score_dmdb maxlevel=513 classout=_classout;
26803     +        class
26804     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
26805     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
26806     +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
26807     +        ;
26808     +        %if &freqvar ne %then %do; freq &freqvar; %end;
26809     +        %if "&targetLevel" eq  "INTERVAL" %then %do; var &targetVar; %end;
26810     +        target &targetVar;
26811     +    run; quit;
26813     +    proc dmreg data=binned dmdbcat=score_dmdb outest=coeff_est outterms=outterms noprint descending;
26814     +        class
26815     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
26816     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
26817     +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
26818     +        ;
26819     +        %if &freqvar ne %then %do; freq &freqvar; %end;
26820     +        model &targetVar =
26821     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
26822     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
26823     +            / coding=glm
26824     +        ;
26825     +    run;
26827     +    proc sql noprint;
26828     +        create table _score_tmp1 as
26829     +            select *, min(coefficient) as min_est,
26830     +                case when calculated min_est = coefficient then 0
26831     +                     else coefficient-calculated min_est
26832     +                end as est1
26833     +            from outterms
26834     +            where variable ne 'Intercept'
26835     +            group by variable
26836     +        ;
26837     +        create table _score_tmp2 as
26838     +            select *, max(est1) as max_est1, count(*) as counter
26839     +            from _score_tmp1
26840     +            group by variable
26841     +        ;
26842     +        create table &outScorecard(rename=(classlevel=value)) as
26843     +            select *, sum(max_est1/counter) as sum_max,
26844     +                case when est1=max_est1 then 1 else 0 end as max_cat,
26845     +                round(1000*((est1) / calculated sum_max)) as score
26846     +            from _score_tmp2
26847     +            order by variable, classlevel
26848     +        ;
26849     +        create table _classout2(rename=(name=variable level=value)) as
26850     +            select a.*, b.format
26851     +                from _classout as a left join &inVariableSet(keep=&name format) as b
26852     +                on a.name eq b.&name
26853     +            order by a.name, a.level
26854     +        ;
26855     +    quit;
26857     +    data &outScorecard;
26858     +        merge &outScorecard(in=_a) _classout2;
26859     +        by variable value;
26860     +        if _a;
26861     +        value = tranwrd(value, "'", "''");
26862     +        rename frequency   = AllFreq
26863     +               freqpercent = AllPercent;
26864     +        label  score       = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecardpoints_vlabel, NOQUOTE))"
26865     +               frequency   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel, NOQUOTE))"
26866     +               freqpercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptperctobs_vlabel, NOQUOTE))";
26867     +    run;
26869     +    /* replace binned named with original var name instead */
26871     +    proc sort data=tempbinnames; by bin; run;
26873     +    data &outScorecard;
26874     +        merge &outScorecard(in=_a) tempbinnames(rename=(bin=variable origvar=displayVar)) ;
26875     +        by variable;
26876     +        if _a;
26877     +        if displayVar="" then displayVar=variable;
26878     +    run;
26880     +    /**----------------------------------------------------------------------------------**/
26881     +    /** 6. Generate crosstabs                                                            **/
26882     +    /**----------------------------------------------------------------------------------**/
26884     +    %if "&targetLevel" ne "INTERVAL" %then %do;
26886     +        ods &EM_REPORT_FORMAT exclude all;
26887     +        ods listing;
26889     +        data _null_;
26890     +            set &outScorecard end=eof;
26891     +            by variable;
26892     +            if _n_=1          then call execute("proc freq data=work.binned_full order=formatted addnames;");
26893     +            if first.variable then call execute("table "||variable||" * &targetVar2 / missing;");
26894     +            if eof then do;
26895     +                %if &freqvar ne %then %do; call execute("weight &freqvar;"); %end;
26896     +                call execute("ods output crosstabfreqs=tempfreq;");
26897     +                call execute("run;");
26898     +            end;
26899     +        run;
26901     +        data _null_;
26902     +            set &outScorecard end=eof;
26903     +            by variable value;
26905     +            if _n_=1 then do;
26906     +                call execute("data crosstabs;");
26907     +                call execute("  length varvalue $200 displayVar $32;");
26908     +                call execute("  set tempfreq(where=(_type_='11'));");
26909     +            end;
26911     +            if type="N" AND format eq "" then do;
26912     +                call execute("if "||Variable||" = "||value||" then do;");
26913     +            end;
26914     +            else do;
26915     +                if format ne ""
26916     +                    then call execute("%DMNORMCP(put("||variable||","||format||"), _normvar);");
26917     +                    else call execute("%DMNORMCP("||variable||", _normvar);");
26918     +                call execute("if strip(_normvar) = '"||strip(value)||"' then do;");
26919     +            end;
26921     +            call execute("  varvalue='"||strip(value)||"';");
26922     +            call execute("  scorepoints="||score||";");
26923     +            call execute("  allfreq="||allfreq||";");
26924     +            call execute("  allpercent="||allpercent||";");
26925     +            call execute("  displayVar='"||displayVar||"';");
26926     +            call execute("end;");
26928     +            if eof then call execute("run;");
26929     +        run;
26931     +        ods &EM_REPORT_FORMAT select all;
26932     +        ods listing close;
26934     +        proc sort data=crosstabs; by rowVariable varvalue; run;
26936     +        data &outScoreCard;
26937     +            set crosstabs;
26938     +            by rowVariable varvalue;
26939     +            if missing(scorepoints) then delete;
26940     +            if ^first.varvalue then do;
26941     +                 scorepoints=.;
26942     +                 allfreq=.;
26943     +                 allpercent=.;
26944     +            end;
26945     +            keep displayvar rowVariable varValue &targetVar2 scorepoints frequency colPercent allfreq allpercent ;
26946     +        run;
26947     +    %end;
26948     +    %else %do;
26949     +        data &outScoreCard;
26950     +            set &outScoreCard;
26951     +            rename value=varvalue score=scorepoints;
26952     +        run;
26953     +    %end;
26954     +%end;
26956     +/*    proc datasets lib=work nolist;*/
26957     +/*    run; quit;*/
26958     +%end;
26960     +%mend em_reporter_scorecard;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
26961     +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
26962     +   proc display c=sashelp.emcore.pathscorecode.scl;
26963     +   run;
26964     +%mend EM_GETTRAINPATH;
26965     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_tagset_template.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TAGSET_TEMPLATE.SOURCE.
26966     +Ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   Ods path(prepend) work.templat(update);
26967     +
26968     +/* emgraph.tpl */
26969     +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
26970     +define tagset tagsets.gtl / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define tagset tagsets.gtl / store=work.templat;
26971     +parent=tagsets.odsgraph;
MPRINT(EM_REPORT_CREATE):   parent=tagsets.odsgraph;
26972     +%let  map =<>%nrstr(&)%str(%')%str(%");
26973     +map="&map";
MPRINT(EM_REPORT_CREATE):   map="<>&'"";
26974     +mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
MPRINT(EM_REPORT_CREATE):   mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
26975     +nobreakspace = ' ' no_byte_order_mark = yes;
MPRINT(EM_REPORT_CREATE):   nobreakspace = ' ' no_byte_order_mark = yes;
26976     +split = '<br/>';
MPRINT(EM_REPORT_CREATE):   split = '<br/>';
26977     +output_type = 'xml';
MPRINT(EM_REPORT_CREATE):   output_type = 'xml';
26978     +indent=2;
MPRINT(EM_REPORT_CREATE):   indent=2;
26979     +
26980     +define event options_set;
MPRINT(EM_REPORT_CREATE):   define event options_set;
26981     +    do / if $options['X'];
MPRINT(EM_REPORT_CREATE):   do / if $options['X'];
26982     +         set $xvar $options['X'];
MPRINT(EM_REPORT_CREATE):   set $xvar $options['X'];
26983     +    else;
MPRINT(EM_REPORT_CREATE):   else;
26984     +         unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
26985     +    done;
MPRINT(EM_REPORT_CREATE):   done;
26986     +
26987     +    do / if $options['Y'];
MPRINT(EM_REPORT_CREATE):   do / if $options['Y'];
26988     +         set $yvar $options['Y'];
MPRINT(EM_REPORT_CREATE):   set $yvar $options['Y'];
26989     +    else;
MPRINT(EM_REPORT_CREATE):   else;
26990     +         unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
26991     +    done;
MPRINT(EM_REPORT_CREATE):   done;
26992     +
26993     +    do / if $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['CATEGORY'];
26994     +         set $category $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   set $category $options['CATEGORY'];
26995     +    else;
MPRINT(EM_REPORT_CREATE):   else;
26996     +         unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
26997     +    done;
MPRINT(EM_REPORT_CREATE):   done;
26998     +
26999     +    do / if $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['RESPONSE'];
27000     +         set $response $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   set $response $options['RESPONSE'];
27001     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27002     +         unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
27003     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27004     +
27005     +    do / if $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITUPPER'];
27006     +         set $limitupper $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   set $limitupper $options['LIMITUPPER'];
27007     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27008     +         unset $limitupper;
MPRINT(EM_REPORT_CREATE):   unset $limitupper;
27009     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27010     +
27011     +    do / if $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITLOWER'];
27012     +         set $limitlower $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   set $limitlower $options['LIMITLOWER'];
27013     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27014     +         unset $limitlower;
MPRINT(EM_REPORT_CREATE):   unset $limitlower;
27015     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27016     +
27017     +    do / if $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['WIDTH'];
27018     +         set $graphwidth $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   set $graphwidth $options['WIDTH'];
27019     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27020     +         unset $graphwidth;
MPRINT(EM_REPORT_CREATE):   unset $graphwidth;
27021     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27022     +
27023     +    do / if $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['HEIGHT'];
27024     +         set $graphheight $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $graphheight $options['HEIGHT'];
27025     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27026     +         unset $graphheight;
MPRINT(EM_REPORT_CREATE):   unset $graphheight;
27027     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27028     +
27029     +    do / if $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ROWS'];
27030     +         set $rows $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   set $rows $options['ROWS'];
27031     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27032     +         unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
27033     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27034     +
27035     +    do / if $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLUMNS'];
27036     +         set $columns $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   set $columns $options['COLUMNS'];
27037     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27038     +         unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
27039     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27040     +
27041     +    do / if $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE'];
27042     +         set $title $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   set $title $options['TITLE'];
27043     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27044     +         unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title;
27045     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27046     +
27047     +    do / if $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE2'];
27048     +         set $title2 $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   set $title2 $options['TITLE2'];
27049     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27050     +         unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title2;
27051     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27052     +
27053     +do / if $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE3'];
27054     +         set $title3 $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   set $title3 $options['TITLE3'];
27055     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27056     +         unset $title3;
MPRINT(EM_REPORT_CREATE):   unset $title3;
27057     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27058     +
27059     +do / if $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE4'];
27060     +         set $title4 $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   set $title4 $options['TITLE4'];
27061     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27062     +         unset $title4;
MPRINT(EM_REPORT_CREATE):   unset $title4;
27063     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27064     +
27065     +    do / if $options['ID'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ID'];
27066     +         set $id $options['ID'];
MPRINT(EM_REPORT_CREATE):   set $id $options['ID'];
27067     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27068     +         unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
27069     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27070     +
27071     +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
27072     +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
27073     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27074     +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27075     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27076     +
27077     +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
27078     +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
27079     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27080     +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27081     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27082     +
27083     +    do / if $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ABOVETEXT'];
27084     +         set $abovetext $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   set $abovetext $options['ABOVETEXT'];
27085     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27086     +         unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
27087     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27088     +
27089     +    do / if $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['BELOWTEXT'];
27090     +         set $belowtext $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   set $belowtext $options['BELOWTEXT'];
27091     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27092     +         unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
27093     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27094     +
27095     +    do / if $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LINKWIDTH'];
27096     +         set $linkwidth $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $linkwidth $options['LINKWIDTH'];
27097     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27098     +         unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
27099     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27100     +
27101     +    do / if $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODECOLOR'];
27102     +         set $nodecolor $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   set $nodecolor $options['NODECOLOR'];
27103     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27104     +         unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
27105     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27106     +
27107     +    do / if $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODESIZE'];
27108     +         set $nodesize $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   set $nodesize $options['NODESIZE'];
27109     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27110     +         unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
27111     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27112     +
27113     +    do / if $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODETEXT'];
27114     +         set $nodetext $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   set $nodetext $options['NODETEXT'];
27115     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27116     +         unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
27117     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27118     +
27119     +    do / if $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PFDITEMS'];
27120     +         set $pfditems $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   set $pfditems $options['PFDITEMS'];
27121     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27122     +         unset $pfditems;
MPRINT(EM_REPORT_CREATE):   unset $pfditems;
27123     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27124     +
27125     +    do / if $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDSTYLE'];
27126     +         set $gridstyle $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   set $gridstyle $options['GRIDSTYLE'];
27127     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27128     +         unset $gridstyle;
MPRINT(EM_REPORT_CREATE):   unset $gridstyle;
27129     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27130     +
27131     +    do / if $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDHEIGHT'];
27132     +         set $gridheight $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $gridheight $options['GRIDHEIGHT'];
27133     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27134     +         unset $gridheight;
MPRINT(EM_REPORT_CREATE):   unset $gridheight;
27135     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27136     +
27137     +    do / if $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDWIDTH'];
27138     +         set $gridwidth $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $gridwidth $options['GRIDWIDTH'];
27139     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27140     +         unset $gridwidth;
MPRINT(EM_REPORT_CREATE):   unset $gridwidth;
27141     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27142     +
27143     +    do / if $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ISGRIDVISIBLE'];
27144     +         set $isGridVisible $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   set $isGridVisible $options['ISGRIDVISIBLE'];
27145     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27146     +         unset $isGridVisible;
MPRINT(EM_REPORT_CREATE):   unset $isGridVisible;
27147     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27148     +
27149     +    do / if $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LAYOUTACTIVATED'];
27150     +         set $layoutActivated $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   set $layoutActivated $options['LAYOUTACTIVATED'];
27151     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27152     +         unset $layoutActivated;
MPRINT(EM_REPORT_CREATE):   unset $layoutActivated;
27153     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27154     +
27155     +    do / if $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PIELABELDISPLAY'];
27156     +         set $pieLabelDisplay $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   set $pieLabelDisplay $options['PIELABELDISPLAY'];
27157     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27158     +         unset $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   unset $pieLabelDisplay;
27159     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27160     +
27161     +    do / if $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORLIST'];
27162     +         set $colorlist $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   set $colorlist $options['COLORLIST'];
27163     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27164     +         unset $colorlist;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
27165     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27166     +
27167     +    do / if $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORINDEX'];
27168     +         set $colorindex $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   set $colorindex $options['COLORINDEX'];
27169     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27170     +         unset $colorindex;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
27171     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27172     +
27173     +end;
MPRINT(EM_REPORT_CREATE):   end;
27174     +
27175     +define event doc;
MPRINT(EM_REPORT_CREATE):   define event doc;
27176     +   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
27177     +   eval $level 0;
27178     +end;
MPRINT(EM_REPORT_CREATE):   end;
27179     +
27180     +define event GraphStyle;
MPRINT(EM_REPORT_CREATE):   define event GraphStyle;
27181     +   pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27182     +   trigger StatXMLDecl;
MPRINT(EM_REPORT_CREATE):   trigger StatXMLDecl;
27183     +   put '<SASReport version="1.0" xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
MPRINT(EM_REPORT_CREATE):   put '<SASReport version="1.0" xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
27184     +   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
MPRINT(EM_REPORT_CREATE):   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
27185     +   trigger StatGraphScheme start;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme start;
27186     +   trigger StatDataDefaultScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataDefaultScheme;
27187     +   trigger StatTwoColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorRampScheme;
27188     +   trigger StatTwoColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorAltRampScheme;
27189     +   trigger StatThreeColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorRampScheme;
27190     +   trigger StatThreeColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorAltRampScheme;
27191     +   trigger StatAxisLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAxisLineScheme;
27192     +   trigger StatReferenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatReferenceScheme;
27193     +   trigger StatGridLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatGridLineScheme;
27194     +   trigger StatOutlineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlineScheme;
27195     +   trigger StatBorderLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBorderLineScheme;
27196     +   trigger StatTitleTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTitleTextScheme;
27197     +   trigger StatFootnoteTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFootnoteTextScheme;
27198     +   trigger StatDataTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataTextScheme;
27199     +   trigger StatLabelTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLabelTextScheme;
27200     +   trigger StatValueTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatValueTextScheme;
27201     +   trigger StatUnicodeTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatUnicodeTextScheme;
27202     +   trigger StatBackFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBackFillScheme;
27203     +   trigger StatWallFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatWallFillScheme;
27204     +   trigger StatFloorFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFloorFillScheme;
27205     +   trigger StatLegendFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLegendFillScheme;
27206     +   trigger StatHeaderFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHeaderFillScheme;
27207     +   trigger StatOutlierScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlierScheme;
27208     +   trigger StatFitScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFitScheme;
27209     +   trigger StatFit2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFit2Scheme;
27210     +   trigger StatPredictionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionScheme;
27211     +   trigger StatConfidenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidenceScheme;
27212     +   trigger StatConfidence2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidence2Scheme;
27213     +   trigger StatPredictionLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionLimitsScheme;
27214     +   trigger StatErrorScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatErrorScheme;
27215     +   trigger StatBoxMedianScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMedianScheme;
27216     +   trigger StatBoxMeanScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMeanScheme;
27217     +   trigger StatBoxWhiskerScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxWhiskerScheme;
27218     +   trigger StatBoxScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxScheme;
27219     +   trigger StatHistogramScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHistogramScheme;
27220     +   trigger StatBandScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBandScheme;
27221     +   trigger StatContourScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatContourScheme;
27222     +   trigger StatEllipseScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatEllipseScheme;
27223     +   trigger StatAnnoLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoLineScheme;
27224     +   trigger StatAnnoTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoTextScheme;
27225     +   trigger StatAnnoShapeScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoShapeScheme;
27226     +   trigger StatSelectionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatSelectionScheme;
27227     +   trigger StatConnectLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConnectLineScheme;
27228     +   trigger StatMissingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatMissingScheme;
27229     +   trigger StatControlLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatControlLimitsScheme;
27230     +   trigger StatRunTestScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatRunTestScheme;
27231     +   trigger StatStarsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatStarsScheme;
27232     +   trigger StatClippingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatClippingScheme;
27233     +   trigger StatBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBlockScheme;
27234     +   trigger StatAltBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAltBlockScheme;
27235     +   trigger GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle1;
27236     +   trigger GraphDataStyle2 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle2 / if !$stopDataStyles;
27237     +   trigger GraphDataStyle3 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle3 / if !$stopDataStyles;
27238     +   trigger GraphDataStyle4 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle4 / if !$stopDataStyles;
27239     +   trigger GraphDataStyle5 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle5 / if !$stopDataStyles;
27240     +   trigger GraphDataStyle6 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle6 / if !$stopDataStyles;
27241     +   trigger GraphDataStyle7 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle7 / if !$stopDataStyles;
27242     +   trigger GraphDataStyle8 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle8 / if !$stopDataStyles;
27243     +   trigger GraphDataStyle9 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle9 / if !$stopDataStyles;
27244     +   trigger GraphDataStyle10 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle10 / if !$stopDataStyles;
27245     +   trigger GraphDataStyle11 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle11 / if !$stopDataStyles;
27246     +   trigger GraphDataStyle12 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle12 / if !$stopDataStyles;
27247     +   trigger GraphDataStyle13 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle13 / if !$stopDataStyles;
27248     +   trigger GraphDataStyle14 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle14 / if !$stopDataStyles;
27249     +   trigger GraphDataStyle15 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle15 / if !$stopDataStyles;
27250     +   trigger StatGraphScheme finish;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme finish;
27251     +   put '</style:Scheme>' CR;
MPRINT(EM_REPORT_CREATE):   put '</style:Scheme>' CR;
27252     +   unset $stopDataStyles;
MPRINT(EM_REPORT_CREATE):   unset $stopDataStyles;
27253     +end;
MPRINT(EM_REPORT_CREATE):   end;
27254     +
27255     +%macro dataStyleAttrs(index);
27256     +    do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
27257     +        set $stopDataStyles 'true';
27258     +        break;
27259     +    done;
27260     +    put '<style:Style context="GraphDataStyle' &index '"';
27261     +    putq " color=" COLOR;
27262     +    putq " altColor=" CONTRASTCOLOR;
27263     +    putq " fillColor=" COLOR;
27264     +    putq " textColor=" CONTRASTCOLOR;
27265     +    putq " lineStyle=" LINESTYLE;
27266     +    putq " lineColor=" CONTRASTCOLOR;
27267     +    putq " markerSymbol=" MARKERSYMBOL;
27268     +    putq " markerColor=" CONTRASTCOLOR;
27269     +    put "/>" NL;
27270     +%mend;
27271     +
27272     + define event GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle1;
27273     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27274     +    style=GraphData1;
MPRINT(EM_REPORT_CREATE):   style=GraphData1;
27275     +    %dataStyleAttrs(1);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 1 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27276     + end;
MPRINT(EM_REPORT_CREATE):   end;
27277     + define event GraphDataStyle2;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle2;
27278     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27279     +    style=GraphData2;
MPRINT(EM_REPORT_CREATE):   style=GraphData2;
27280     +    %dataStyleAttrs(2);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 2 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27281     + end;
MPRINT(EM_REPORT_CREATE):   end;
27282     +define event GraphDataStyle3;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle3;
27283     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27284     +    style=GraphData3;
MPRINT(EM_REPORT_CREATE):   style=GraphData3;
27285     +    %dataStyleAttrs(3);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 3 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27286     + end;
MPRINT(EM_REPORT_CREATE):   end;
27287     + define event GraphDataStyle4;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle4;
27288     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27289     +    style=GraphData4;
MPRINT(EM_REPORT_CREATE):   style=GraphData4;
27290     +    %dataStyleAttrs(4);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 4 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27291     + end;
MPRINT(EM_REPORT_CREATE):   end;
27292     + define event GraphDataStyle5;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle5;
27293     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27294     +    style=GraphData5;
MPRINT(EM_REPORT_CREATE):   style=GraphData5;
27295     +    %dataStyleAttrs(5);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 5 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27296     + end;
MPRINT(EM_REPORT_CREATE):   end;
27297     + define event GraphDataStyle6;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle6;
27298     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27299     +    style=GraphData6;
MPRINT(EM_REPORT_CREATE):   style=GraphData6;
27300     +    %dataStyleAttrs(6);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 6 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27301     + end;
MPRINT(EM_REPORT_CREATE):   end;
27302     + define event GraphDataStyle7;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle7;
27303     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27304     +    style=GraphData7;
MPRINT(EM_REPORT_CREATE):   style=GraphData7;
27305     +    %dataStyleAttrs(7);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 7 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27306     + end;
MPRINT(EM_REPORT_CREATE):   end;
27307     + define event GraphDataStyle8;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle8;
27308     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27309     +    style=GraphData8;
MPRINT(EM_REPORT_CREATE):   style=GraphData8;
27310     +    %dataStyleAttrs(8);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 8 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27311     + end;
MPRINT(EM_REPORT_CREATE):   end;
27312     + define event GraphDataStyle9;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle9;
27313     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27314     +    style=GraphData9;
MPRINT(EM_REPORT_CREATE):   style=GraphData9;
27315     +    %dataStyleAttrs(9);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 9 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27316     + end;
MPRINT(EM_REPORT_CREATE):   end;
27317     + define event GraphDataStyle10;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle10;
27318     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27319     +    style=GraphData10;
MPRINT(EM_REPORT_CREATE):   style=GraphData10;
27320     +    %dataStyleAttrs(10);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 10 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27321     + end;
MPRINT(EM_REPORT_CREATE):   end;
27322     + define event GraphDataStyle11;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle11;
27323     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27324     +    style=GraphData11;
MPRINT(EM_REPORT_CREATE):   style=GraphData11;
27325     +    %dataStyleAttrs(11);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 11 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27326     + end;
MPRINT(EM_REPORT_CREATE):   end;
27327     + define event GraphDataStyle12;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle12;
27328     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27329     +    style=GraphData12;
MPRINT(EM_REPORT_CREATE):   style=GraphData12;
27330     +    %dataStyleAttrs(12);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 12 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27331     + end;
MPRINT(EM_REPORT_CREATE):   end;
27332     + define event GraphDataStyle13;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle13;
27333     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27334     +    style=GraphData13;
MPRINT(EM_REPORT_CREATE):   style=GraphData13;
27335     +    %dataStyleAttrs(13);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 13 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27336     + end;
MPRINT(EM_REPORT_CREATE):   end;
27337     + define event GraphDataStyle14;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle14;
27338     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27339     +    style=GraphData14;
MPRINT(EM_REPORT_CREATE):   style=GraphData14;
27340     +    %dataStyleAttrs(14);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 14 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27341     + end;
MPRINT(EM_REPORT_CREATE):   end;
27342     + define event GraphDataStyle15;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle15;
27343     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
27344     +    style=GraphData15;
MPRINT(EM_REPORT_CREATE):   style=GraphData15;
27345     +    %dataStyleAttrs(15);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 15 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
27346     + end;
MPRINT(EM_REPORT_CREATE):   end;
27347     +
27348     +define event BeginGraph;
MPRINT(EM_REPORT_CREATE):   define event BeginGraph;
27349     +putlog "BeginGraph";
MPRINT(EM_REPORT_CREATE):   putlog "BeginGraph";
27350     +   trigger GraphStyle;
MPRINT(EM_REPORT_CREATE):   trigger GraphStyle;
27351     +   put '<View>' CR;
MPRINT(EM_REPORT_CREATE):   put '<View>' CR;
27352     +   put '<StatGraph';
MPRINT(EM_REPORT_CREATE):   put '<StatGraph';
27353     +   put ' version="9.2_S2DVR"';
MPRINT(EM_REPORT_CREATE):   put ' version="9.2_S2DVR"';
27354     +   putq " designHeight=" $graphheight;
MPRINT(EM_REPORT_CREATE):   putq " designHeight=" $graphheight;
27355     +   putq " designWidth=" $graphwidth;
MPRINT(EM_REPORT_CREATE):   putq " designWidth=" $graphwidth;
27356     +   put ' style:style="StatGraphStyle';
MPRINT(EM_REPORT_CREATE):   put ' style:style="StatGraphStyle';
27357     +   put anchor '"';
MPRINT(EM_REPORT_CREATE):   put anchor '"';
27358     +   put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
27359     +   set $graph_started "true";
MPRINT(EM_REPORT_CREATE):   set $graph_started "true";
27360     +   eval $level 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
27361     +end;
MPRINT(EM_REPORT_CREATE):   end;
27362     +
27363     +define event LayoutOverlay;
MPRINT(EM_REPORT_CREATE):   define event LayoutOverlay;
27364     +   start:
27365     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
27366     +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
27367     +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
27368     +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
27369     +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
27370     +      put '<LayoutOverlay>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutOverlay>' CR;
27371     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
27372     +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
27373     +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
27374     +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutOverlay>' CR;
27375     +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
27376     +   finish:
27377     +      put '</LayoutOverlay>' CR;
27378     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
27379     +      trigger EndGraph / if $level=0;
27380     +end;
MPRINT(EM_REPORT_CREATE):   end;
27381     +
27382     +define event LayoutRegion;
MPRINT(EM_REPORT_CREATE):   define event LayoutRegion;
27383     +   start:
27384     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
27385     +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
27386     +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
27387     +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
27388     +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
27389     +      put '<LayoutRegion>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutRegion>' CR;
27390     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
27391     +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
27392     +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
27393     +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutRegion>' CR;
27394     +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
27395     +   finish:
27396     +      put '</LayoutRegion>' CR;
27397     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
27398     +      trigger EndGraph / if $level=0;
27399     +end;
MPRINT(EM_REPORT_CREATE):   end;
27400     +
27401     +define event LayoutLattice;
MPRINT(EM_REPORT_CREATE):   define event LayoutLattice;
27402     +   start:
27403     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
27404     +      put '<LayoutLattice';
MPRINT(EM_REPORT_CREATE):   put '<LayoutLattice';
27405     +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
27406     +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
27407     +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
27408     +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
27409     +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
27410     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutLattice>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
27411     +   finish:
27412     +      put '</LayoutLattice>' CR;
27413     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
27414     +      trigger EndGraph / if $level=0;
27415     +end;
MPRINT(EM_REPORT_CREATE):   end;
27416     +
27417     +define event LayoutGridded;
MPRINT(EM_REPORT_CREATE):   define event LayoutGridded;
27418     +   start:
27419     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
27420     +      put '<LayoutGridded';
MPRINT(EM_REPORT_CREATE):   put '<LayoutGridded';
27421     +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
27422     +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
27423     +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
27424     +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
27425     +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
27426     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutGridded>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
27427     +   finish:
27428     +      put '</LayoutGridded>' CR;
27429     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
27430     +      trigger EndGraph / if $level=0;
27431     +end;
MPRINT(EM_REPORT_CREATE):   end;
27432     +
27433     +define event EndGraph;
MPRINT(EM_REPORT_CREATE):   define event EndGraph;
27434     +   put '</StatGraph>' CR;
MPRINT(EM_REPORT_CREATE):   put '</StatGraph>' CR;
27435     +   put '</View>' CR;
MPRINT(EM_REPORT_CREATE):   put '</View>' CR;
27436     +   put "</SASReport>" CR;
MPRINT(EM_REPORT_CREATE):   put "</SASReport>" CR;
27437     +   unset $graph_started;
MPRINT(EM_REPORT_CREATE):   unset $graph_started;
27438     +end;
MPRINT(EM_REPORT_CREATE):   end;
27439     +
27440     +define event ScatterPlot;
MPRINT(EM_REPORT_CREATE):   define event ScatterPlot;
27441     +   put '<ScatterPlot';
MPRINT(EM_REPORT_CREATE):   put '<ScatterPlot';
27442     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
27443     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
27444     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27445     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
27446     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
27447     +end;
MPRINT(EM_REPORT_CREATE):   end;
27448     +
27449     +define event SeriesPlot;
MPRINT(EM_REPORT_CREATE):   define event SeriesPlot;
27450     +   put '<SeriesPlot';
MPRINT(EM_REPORT_CREATE):   put '<SeriesPlot';
27451     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
27452     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
27453     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27454     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
27455     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
27456     +end;
MPRINT(EM_REPORT_CREATE):   end;
27457     +
27458     +define event BandPlot;
MPRINT(EM_REPORT_CREATE):   define event BandPlot;
27459     +   put '<BandPlot';
MPRINT(EM_REPORT_CREATE):   put '<BandPlot';
27460     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
27461     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
27462     +   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if $limitupper;
MPRINT(EM_REPORT_CREATE):   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if $limitupper;
27463     +   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if $limitlower;
MPRINT(EM_REPORT_CREATE):   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if $limitlower;
27464     +   putq " lineAttrs=" $style;
MPRINT(EM_REPORT_CREATE):   putq " lineAttrs=" $style;
27465     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27466     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
27467     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
27468     +end;
MPRINT(EM_REPORT_CREATE):   end;
27469     +
27470     +define event Pie;
MPRINT(EM_REPORT_CREATE):   define event Pie;
27471     +   put '<Pie';
MPRINT(EM_REPORT_CREATE):   put '<Pie';
27472     +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
27473     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
27474     +   putq " pieLabelComponents=" $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   putq " pieLabelComponents=" $pieLabelDisplay;
27475     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27476     +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
27477     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
27478     +end;
MPRINT(EM_REPORT_CREATE):   end;
27479     +
27480     +define event Bar;
MPRINT(EM_REPORT_CREATE):   define event Bar;
27481     +   put '<Bar';
MPRINT(EM_REPORT_CREATE):   put '<Bar';
27482     +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
27483     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
27484     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27485     +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
27486     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
27487     +end;
MPRINT(EM_REPORT_CREATE):   end;
27488     +
27489     +define event Histogram;
MPRINT(EM_REPORT_CREATE):   define event Histogram;
27490     +   put '<Histogram';
MPRINT(EM_REPORT_CREATE):   put '<Histogram';
27491     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
27492     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27493     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
27494     +end;
MPRINT(EM_REPORT_CREATE):   end;
27495     +
27496     +define event DecisionTree;
MPRINT(EM_REPORT_CREATE):   define event DecisionTree;
27497     +   put '<DecisionTree';
MPRINT(EM_REPORT_CREATE):   put '<DecisionTree';
27498     +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
27499     +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
27500     +   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
MPRINT(EM_REPORT_CREATE):   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
27501     +   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
MPRINT(EM_REPORT_CREATE):   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
27502     +   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
MPRINT(EM_REPORT_CREATE):   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
27503     +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
27504     +   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
MPRINT(EM_REPORT_CREATE):   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
27505     +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
27506     +   put ' fitToRegion="true"';
MPRINT(EM_REPORT_CREATE):   put ' fitToRegion="true"';
27507     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27508     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
27509     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27510     +   unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
27511     +   unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
27512     +   unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
27513     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
27514     +   unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
27515     +end;
MPRINT(EM_REPORT_CREATE):   end;
27516     +
27517     +define event Icicle;
MPRINT(EM_REPORT_CREATE):   define event Icicle;
27518     +   put '<Icicle';
MPRINT(EM_REPORT_CREATE):   put '<Icicle';
27519     +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
27520     +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
27521     +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
27522     +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
27523     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27524     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
27525     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27526     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
27527     +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
27528     +end;
MPRINT(EM_REPORT_CREATE):   end;
27529     +
27530     +define event PFD;
MPRINT(EM_REPORT_CREATE):   define event PFD;
27531     +   put '<PFD';
MPRINT(EM_REPORT_CREATE):   put '<PFD';
27532     +   putq " id=" $id / if $id;
MPRINT(EM_REPORT_CREATE):   putq " id=" $id / if $id;
27533     +   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
MPRINT(EM_REPORT_CREATE):   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
27534     +   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
MPRINT(EM_REPORT_CREATE):   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
27535     +   putq " gridHeight=" $gridheight / if $gridheight;
MPRINT(EM_REPORT_CREATE):   putq " gridHeight=" $gridheight / if $gridheight;
27536     +   putq " gridWidth=" $gridwidth / if $gridwidth;
MPRINT(EM_REPORT_CREATE):   putq " gridWidth=" $gridwidth / if $gridwidth;
27537     +   putq " gridStyle=" $gridstyle / if $gridstyle;
MPRINT(EM_REPORT_CREATE):   putq " gridStyle=" $gridstyle / if $gridstyle;
27538     +   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
MPRINT(EM_REPORT_CREATE):   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
27539     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27540     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
27541     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27542     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
27543     +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
27544     +end;
MPRINT(EM_REPORT_CREATE):   end;
27545     +
27546     +define event HeatMap;
MPRINT(EM_REPORT_CREATE):   define event HeatMap;
27547     +   trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   trigger BeginGraph / if !$graph_started;
27548     +   put '<HeatmapClassic';
MPRINT(EM_REPORT_CREATE):   put '<HeatmapClassic';
27549     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
27550     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
27551     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
27552     +   putq ' colorList=' $colorlist / if $colorlist;
MPRINT(EM_REPORT_CREATE):   putq ' colorList=' $colorlist / if $colorlist;
27553     +   putq ' colorIndex=' $colorindex / if $colorindex;
MPRINT(EM_REPORT_CREATE):   putq ' colorIndex=' $colorindex / if $colorindex;
27554     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
27555     +   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
27556     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $response;
27557     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
27558     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
27559     +   unset $colorlist;
27560     +   unset $colorindex;
27561     +end;
MPRINT(EM_REPORT_CREATE):   end;
27562     +
27563     +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: TAGSET 'Tagsets.Gtl' has been saved to: WORK.TEMPLAT
27564     +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.15 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_REPORT_CREATE):   run;
27565     +
27566     +
27567     +
27568     +
27569     +
27570     +
27571     +/* data_template.sas */
27572     +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
27573     +define statgraph dataonly / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define statgraph dataonly / store=work.templat;
27574     +dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9 var10;
MPRINT(EM_REPORT_CREATE):   dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9 var10;
27575     +begingraph;
MPRINT(EM_REPORT_CREATE):   begingraph;
27576     +if (0)
27577     +layout overlay;
MPRINT(EM_REPORT_CREATE):   if (0) layout overlay;
27578     +   scatterplot x=dummy1 y=dummy2 /
27579     +      rolename=(a=var1 b=var2 c=var3 d=var4 e=var5 f=var6 g=var7 h=var8 i=var9 j=var10);
MPRINT(EM_REPORT_CREATE):   scatterplot x=dummy1 y=dummy2 / rolename=(a=var1 b=var2 c=var3 d=var4 e=var5 f=var6 g=var7 h=var8 i=var9 j=var10);
27580     +endlayout;
MPRINT(EM_REPORT_CREATE):   endlayout;
27581     +endif;
MPRINT(EM_REPORT_CREATE):   endif;
27582     +endgraph;
MPRINT(EM_REPORT_CREATE):   endgraph;
27583     +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STATGRAPH 'Dataonly' has been saved to: WORK.TEMPLAT
27584     +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_CREATE):   run;
27585     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Report")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='REPORT';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_CREATE):   ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPORT");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "REPORT";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "pdf";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_PATH):   proc display c=sashelp.emutil.path.scl;
MPRINT(EM_PATH):   run;

27586      data emreportpath;
MPRINT(EM_PATH):   data emreportpath;
27587      length nodelabel $32 component $32;
MPRINT(EM_PATH):   length nodelabel $32 component $32;
27588      nodelabel="FIMPORT";
MPRINT(EM_PATH):   nodelabel="FIMPORT";
27589      component="FileImport";
MPRINT(EM_PATH):   component="FileImport";
27590      output;
MPRINT(EM_PATH):   output;
27591      nodelabel="Reg";
MPRINT(EM_PATH):   nodelabel="Reg";
27592      component="Regression";
MPRINT(EM_PATH):   component="Regression";
27593      output;
MPRINT(EM_PATH):   output;
27594      nodelabel="Neural";
MPRINT(EM_PATH):   nodelabel="Neural";
27595      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
27596      output;
MPRINT(EM_PATH):   output;
27597      nodelabel="Tree";
MPRINT(EM_PATH):   nodelabel="Tree";
27598      component="DecisionTree";
MPRINT(EM_PATH):   component="DecisionTree";
27599      output;
MPRINT(EM_PATH):   output;
27600      nodelabel="MdlComp";
MPRINT(EM_PATH):   nodelabel="MdlComp";
27601      component="ModelCompare";
MPRINT(EM_PATH):   component="ModelCompare";
27602      output;
MPRINT(EM_PATH):   output;
27603      run;
MPRINT(EM_PATH):   run;

NOTE: The data set WORK.EMREPORTPATH has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_PATH):   
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data emreportpath;
MPRINT(EM_REPORT_CREATE):   set emreportpath;
MPRINT(EM_REPORT_CREATE):   rename nodelabel=nodeid;
MPRINT(EM_REPORT_CREATE):   nodeIndex = _n_;
MPRINT(EM_REPORT_CREATE):   run;

NOTE: There were 5 observations read from the data set WORK.EMREPORTPATH.
NOTE: The data set WORK.EMREPORTPATH has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_CREATE):   *** create new style template to address fonts in ods text;
MPRINT(EM_REPORT_CREATE):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   proc template ;
MPRINT(EM_REPORT_CREATE):   define style styles.em_style / store=work.templat;
MPRINT(EM_REPORT_CREATE):   parent= styles.LISTING;
MPRINT(EM_REPORT_CREATE):   style usertext from usertext / foreground=black font_size=10 pt font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemtitle from systemtitle / color=colors("systitlefg") backgroundcolor=colors("systitlebg") fontsize=10 pt font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemfooter from systemfooter / color=colors("systitlefg") backgroundcolor=colors("systitlebg") font_face="Arial" ;
MPRINT(EM_REPORT_CREATE):   style GraphFonts from GraphFonts / 'GraphTitleFont' = ("Arial", 10 pt) 'GraphTitle1Font' = ("Arial", 10 pt) 'GraphLabelFont' = ("Arial", 8 pt) 'GraphFootnoteFont' = ("Arial", 6 pt) 'GraphValueFont' = ("Arial", 6 pt) 
'GraphDataFont' = ("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style Fonts from Fonts/ 'TitleFont' = ("Arial", 10 pt) 'TitleFont2' = ("Arial", 10 pt) 'StrongFont' = ("Arial", 6 pt) 'EmphasisFont' = ("Arial", 6 pt) 'headingFont' = ("Arial", 6 pt) 'headingEmphasisFont' = ("Arial", 6 pt) 
'FixedEmphasisFont' = ("Arial", 6 pt) 'FixedStrongFont' = ("Arial", 6 pt) 'FixedHeadingFont' = ("Arial", 6 pt) 'FixedFont' = ("Arial", 6 pt) 'BatchFixedFont' = ("Arial", 6 pt) 'docFont' = ("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style GraphTitleText from GraphTitleText / font_face="Arial";
MPRINT(EM_REPORT_CREATE):   style data from data / font_size=6 pt;
MPRINT(EM_REPORT_CREATE):   style header from header / font_size=8 pt;
MPRINT(EM_REPORT_CREATE):   style rowheader from header;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STYLE 'Styles.Em_style' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_CREATE):   run;
MPRINT(EM_REPORT_CREATE):   quit;
MPRINT(EM_REPORT_CREATE):   *** options for page layout;
MPRINT(EM_REPORT_CREATE):   options nodate nocenter number ls=97 ;
MPRINT(EM_REPORT_CREATE):   *** get file name;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   *** turn off LISTING and turn on the specified destination;
MPRINT(EM_REPORT_CREATE):   ods listing close;
MPRINT(EM_REPORT_CREATE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_CREATE):   ods PDF 
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\REPORT.pdf
" style=styles.em_style startpage=NO uniform NOTOC ;
NOTE: Writing ODS PDF output to DISK destination 
      "C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\REPORT.pd
      f", printer "PDF".
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this 
      session.
MPRINT(EM_REPORT_CREATE):   *** titles and footnotes;
MPRINT(EM_REPORT_CREATE):   ods PDF text=" ";
MPRINT(EM_REPORT_CREATE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   ods proclabel "Report Information";
MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_CREATE):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_CREATE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   file print ;
MPRINT(EM_REPORT_CREATE):   put "User       = bteric01" ;
MPRINT(EM_REPORT_CREATE):   put "Date       = 13:25:30  October 27" ;
MPRINT(EM_REPORT_CREATE):   put "Project    = Project_2 " ;
MPRINT(EM_REPORT_CREATE):   put "Diagram    = Diagram_1" / ;
MPRINT(EM_REPORT_CREATE):   put "Start Node = Report";
MPRINT(EM_REPORT_CREATE):   put "Node label = Reporter" ;
MPRINT(EM_REPORT_CREATE):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_CREATE):   put "Showall    = N" /;
MPRINT(EM_REPORT_CREATE):   put "Format     = PDF" ;
MPRINT(EM_REPORT_CREATE):   put "Style      = LISTING" /;
MPRINT(EM_REPORT_CREATE):   run ;

NOTE: 10 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("PFD");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "PFD";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "xml";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\PFD.xml" 
encoding="utf-8" NOBOM;
MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "&", "&amp;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "<", "&lt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, ">", "&gt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "'", "&#39;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, '"', '&quot;');
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'" 
title="',LABEL,'"></PFDNode>');
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;

NOTE: The file X is:
      
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=27Oct2015:13:25:30,
      Create Time=27Oct2015:13:25:30

NOTE: 8 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 73.
NOTE: There were 8 observations read from the data set EMWS1.EM_NODEID.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x mod;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_DGRAPH(where=(TO ne ""));
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"' 
toId='",TO,"'></PFDLink>");
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;

NOTE: The file X is:
      
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=549,
      Last Modified=27Oct2015:13:25:30,
      Create Time=27Oct2015:13:25:30

NOTE: 9 records were written to the file X.
      The minimum record length was 54.
      The maximum record length was 57.
NOTE: There were 9 observations read from the data set EMWS1.EM_DGRAPH.
      WHERE TO not = ' ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_WORKSPACE_XML):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_MAKEDS):   data xmldata(keep=PFDItemList);
MPRINT(EM_REPORT_MAKEDS):   infile xmlref recfm=v lrecl=73 length=len;
MPRINT(EM_REPORT_MAKEDS):   length PFDItemList $256;
MPRINT(EM_REPORT_MAKEDS):   input record $varying5000. len;
MPRINT(EM_REPORT_MAKEDS):   recordNum+1;
MPRINT(EM_REPORT_MAKEDS):   do start=1 to len by 256 ;
MPRINT(EM_REPORT_MAKEDS):   end=start+256;
MPRINT(EM_REPORT_MAKEDS):   *put recordNum= start= end=;
MPRINT(EM_REPORT_MAKEDS):   PFDItemList=substr(record,start,end);
MPRINT(EM_REPORT_MAKEDS):   output;
MPRINT(EM_REPORT_MAKEDS):   end;
MPRINT(EM_REPORT_MAKEDS):   run;

NOTE: The infile XMLREF is:
      
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=292,File Size (bytes)=1069,
      Last Modified=27Oct2015:13:25:30,
      Create Time=27Oct2015:13:25:30

NOTE: 17 records were read from the infile XMLREF.
      The minimum record length was 54.
      The maximum record length was 73.
NOTE: The data set WORK.XMLDATA has 17 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   data temp;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   if X = -1 AND Y= - 1 then delete;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;

NOTE: There were 8 observations read from the data set EMWS1.EM_NODEID.
NOTE: The data set WORK.TEMP has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF exclude SGRENDER;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl 
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml" 
data="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml" 
encoding="utf-8" style=styles.em_style;
NOTE: Writing TAGSETS.GTL Data file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml
NOTE: Writing TAGSETS.GTL Body file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgrender data=work.xmldata template=dataonly;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   dynamic var1="PFDItemList";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;

WARNING: TAGSETS.GTL destination does not support images. Using the default format.
NOTE: There were 17 observations read from the data set WORK.XMLDATA.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(start) options(title 
="SAS Enterprise Miner Report" title2="Process Flow Diagram");
BeginGraph
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=PFD options(pfditems="PFDItemList" 
id="pfdView1");
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(finish);
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl close;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF select ALL ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods proclabel = "Process Flow Diagram";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgsilk 
viewxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xm
l" 
dataxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xm
l";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;

NOTE: PROCEDURE SGSILK used (Total process time):
      real time           5.95 seconds
      cpu time            0.40 seconds
      

MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   proc sql noprint;
MPRINT(EM_REPORT_CREATE):   select count(*) into :EM_REPORT_NODENUM from emreportpath where 
nodeID ne " ";
MPRINT(EM_REPORT_CREATE):   select strip(nodeID) into :EM_REPORT_NODELIST separated by ' ' from 
emreportpath where nodeID ne " " order by nodeIndex;
NOTE: The query as specified involves ordering by an item that doesn't appear in its SELECT 
      clause.
MPRINT(EM_REPORT_CREATE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("FIMPORT")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='FIMPORT';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;

27604      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
27605      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
27605    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
27605    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 
accumulatedScoreCode $1;
27606      nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
27607      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
27608      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
27609      component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
27610      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
27611      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
27612      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
27613      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
27614      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
27615      output;
MPRINT(EM_GETTRAINPATH):   output;
27616      run;
MPRINT(EM_GETTRAINPATH):   run;

NOTE: The data set WORK._TMP_EMRNP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETTRAINPATH):   
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 1 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from 
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("FIMPORT"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=File Import";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = FIMPORT";
MPRINT(EM_REPORT_NODE):   put "Node label = File Import";
MPRINT(EM_REPORT_NODE):   put "Meta path = FIMPORT";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" 
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;

27617      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
27618      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
27619      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
27619    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
27619    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
27620      Name = 'ImportType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportType';
27621      Value = "%nrbquote(Local)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Local";
27622      Default = "%nrbquote(LOCAL)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "LOCAL";
27623      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27624      Name = 'GuessRows';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GuessRows';
27625      Value = "%nrbquote(500)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "500";
27626      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27627      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27628      Name = 'Delimiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Delimiter';
27629      Value = "%nrbquote(,)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ",";
27630      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27631      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27632      Name = 'NameRow';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NameRow';
27633      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27634      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27635      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27636      Name = 'SkipRows';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SkipRows';
27637      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27638      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27639      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27640      Name = 'MaxRows';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxRows';
27641      Value = "%nrbquote(1000000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1000000";
27642      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27643      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27644      Name = 'MaxCols';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxCols';
27645      Value = "%nrbquote(10000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10000";
27646      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27647      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27648      Name = 'FileType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FileType';
27649      Value = "%nrbquote(xlsx)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "xlsx";
27650      Default = "%nrbquote(XLS)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "XLS";
27651      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27652      Name = 'Role';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Role';
27653      Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
27654      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27655      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27656      Name = 'Summarize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Summarize';
27657      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27658      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27659      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27660      Name = 'AdvancedAdvisor';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AdvancedAdvisor';
27661      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27662      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27663      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27664      Name = 'IFileName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IFileName';
27665      Value = "%nrbquote(C:\Users\bteric01\Documents\CIS-445\WidgBuyTrain.xlsx)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "C:\Users\bteric01\Documents\CIS-445\WidgBuyTrain.xlsx";
27666      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27667      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27668      Name = 'AccessTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AccessTable';
27669      Value = "%nrbquote(NoTableName)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NoTableName";
27670      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27671      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27672      Name = 'UserID';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UserID';
27673      Value = "%nrbquote(NoUserID)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NoUserID";
27674      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27675      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27676      Name = 'Password';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Password';
27677      Value = "%nrbquote(NoPassword)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NoPassword";
27678      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27679      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27680      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.PROPERTIES has 15 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

27681      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
27682      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
27683      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 15 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

27684      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
27685      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
27686      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
27686    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
27687      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
27688      Value = "FileImport";
MPRINT(EM_REPORT_PROPERTIES):   Value = "FileImport";
27689      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
27690      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

27691      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
27692      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
27693      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 15 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=File Import";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=File Import Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1 
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2)) 
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 5 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-5*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 5 and _n_ le 10 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-5*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 10 and _n_ le 15 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-5*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 16 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 5 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 5 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 5 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 5 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 5 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 5 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 5 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3 
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 5 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc transpose data=EMWS1.FIMPORT_EMTMETADEFAULT out=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   var _all_;
MPRINT(EM_REPORT_DATASOURCE):   format crdate NLDATM24.0 modate NLDATM24.0;
MPRINT(EM_REPORT_DATASOURCE):   run;

NOTE: Numeric variables in the input data set will be converted to character in the output data 
      set.
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK.TEMP_SOURCE has 15 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_DATASOURCE):   data temp_source;
MPRINT(EM_REPORT_DATASOURCE):   set temp_source;
MPRINT(EM_REPORT_DATASOURCE):   rename col1 = value;
MPRINT(EM_REPORT_DATASOURCE):   col1 = right(col1);
MPRINT(EM_REPORT_DATASOURCE):   format label $64.;
MPRINT(EM_REPORT_DATASOURCE):   label col1 = "Value" label = "Attribute" ;
MPRINT(EM_REPORT_DATASOURCE):   *** get the localized label column;
MPRINT(EM_REPORT_DATASOURCE):   _name_=upcase(_name_) ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMNAME" then label="Data Name" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMTYPE" then label="Data Type" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMLABEL" then label="Data Label" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "TYPEMEM" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ENGINE" then label="Engine" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "CRDATE" then label="Date Created" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MODATE" then label="Date Modified" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NOBS" then label="Number Rows" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NCOLS" then label="Number Columns" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NBYTES" then label="Data Size" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ROLE" then label="Role" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "USEEXTERNALDATA" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SAMPLINGRATE" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SEGMENT" then label="Segment" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "LIBNAME" then label="Data Library" ;
MPRINT(EM_REPORT_DATASOURCE):   run;

NOTE: There were 15 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK.TEMP_SOURCE has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=File Import";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Data Attributes";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=File Import Data Attributes";
MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=temp_source 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "LABEL" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( LABEL=LABEL1 VALUE=VALUE1)) 
_tmpms_dat2(rename=( LABEL=LABEL2 VALUE=VALUE2)) _tmpms_dat3(rename=( LABEL=LABEL3 
VALUE=VALUE3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set temp_source;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep LABEL VALUE numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 12 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 12 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var LABEL1 VALUE1 LABEL2 VALUE2 LABEL3 VALUE3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc delete data=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   run;

NOTE: Deleting WORK.TEMP_SOURCE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_DATASOURCE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.FIMPORT_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Variable length is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=EMWS1.FIMPORT_variableset out=_tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;

NOTE: There were 7 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK._TMPVL_VS has 7 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   update _tmpvl_pdv _tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   label type = "Type" format = "Format" creator = "Creator" family = 
"Family" label = "Label" ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: There were 7 observations read from the data set WORK._TMPVL_VS.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=File Import";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variables List";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=File Import Variables List";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdv noobs label contents='';
MPRINT(EM_REPORT_VARS):   var name label role level type length format creator;
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.FIMPORT_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "FIMPORT" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type 
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 0 observations read from the data set EMWS1.FIMPORT_CMETA_TRAIN.
      WHERE UPCASE(creator)='FIMPORT';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=File Import";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Created Variables List";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=File Import Created Variables List";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdvx noobs label contents='';
MPRINT(EM_REPORT_VARS):   var name label role type length ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: No observations in data set WORK._TMPVL_PDVX.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_VS (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.FIMPORT_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from 
EMWS1.FIMPORT_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey17
MPRINT(EM_REPORT_NODE):   from EMWS1.FIMPORT_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==12 : Viewtype = DATA EMSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 17 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==13 : Viewtype = LATTICE INTERVALTARGET
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.FIMPORT_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 16 observations read from the data set EMWS1.FIMPORT_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==14 : Viewtype = LATTICE CLASSTARGET
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Reg")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='REG';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;

27694      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
27695      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
27695    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
27695    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 
accumulatedScoreCode $1;
27696      nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
27697      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
27698      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
27699      component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
27700      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
27701      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
27702      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
27703      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
27704      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
27705      output;
MPRINT(EM_GETTRAINPATH):   output;
27706      nodelabel="Reg";
MPRINT(EM_GETTRAINPATH):   nodelabel="Reg";
27707      parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
27708      description="Regression";
MPRINT(EM_GETTRAINPATH):   description="Regression";
27709      component="Regression";
MPRINT(EM_GETTRAINPATH):   component="Regression";
27710      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
27711      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
27712      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
27713      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
27714      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
27715      output;
MPRINT(EM_GETTRAINPATH):   output;
27716      run;
MPRINT(EM_GETTRAINPATH):   run;

NOTE: The data set WORK._TMP_EMRNP has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETTRAINPATH):   
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from 
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Reg"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Regression";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Reg";
MPRINT(EM_REPORT_NODE):   put "Node label = Regression";
MPRINT(EM_REPORT_NODE):   put "Meta path = FIMPORT => Reg";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Reg\EMNOTES.txt" 
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;

27717      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
27718      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
27719      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
27719    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
27719    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
27720      Name = 'MainEffect';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MainEffect';
27721      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27722      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27723      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27724      Name = 'TwoFactor';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TwoFactor';
27725      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27726      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27727      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27728      Name = 'Polynomial';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Polynomial';
27729      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27730      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27731      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27732      Name = 'PolynomialDegree';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PolynomialDegree';
27733      Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
27734      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27735      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27736      Name = 'Terms';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Terms';
27737      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27738      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27739      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27740      Name = 'Error';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Error';
27741      Value = "%nrbquote(LOGISTIC)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOGISTIC";
27742      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27743      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27744      Name = 'LinkFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LinkFunction';
27745      Value = "%nrbquote(LOGIT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOGIT";
27746      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27747      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27748      Name = 'SuppressIntercept';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressIntercept';
27749      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27750      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27751      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27752      Name = 'InputCoding';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputCoding';
27753      Value = "%nrbquote(DEVIATION)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEVIATION";
27754      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27755      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27756      Name = 'MinResourceUse';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinResourceUse';
27757      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27758      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27759      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27760      Name = 'ModelSelection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelection';
27761      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
27762      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27763      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27764      Name = 'SelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionCriterion';
27765      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
27766      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27767      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27768      Name = 'SelectionDefault';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionDefault';
27769      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27770      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27771      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27772      Name = 'Sequential';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Sequential';
27773      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27774      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27775      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27776      Name = 'SlEntry';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SlEntry';
27777      Value = "%nrbquote(0.05)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.05";
27778      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27779      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27780      Name = 'SlStay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SlStay';
27781      Value = "%nrbquote(0.05)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.05";
27782      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27783      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27784      Name = 'Start';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Start';
27785      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27786      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27787      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27788      Name = 'Stop';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Stop';
27789      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27790      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27791      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27792      Name = 'Force';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Force';
27793      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27794      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27795      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27796      Name = 'Hierarchy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hierarchy';
27797      Value = "%nrbquote(CLASS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "CLASS";
27798      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27799      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27800      Name = 'Rule';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Rule';
27801      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
27802      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27803      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27804      Name = 'MaxStep';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxStep';
27805      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
27806      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27807      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27808      Name = 'StepOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StepOutput';
27809      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27810      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27811      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27812      Name = 'OptimizationTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OptimizationTechnique';
27813      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
27814      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27815      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27816      Name = 'ModelDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelDefaults';
27817      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27818      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27819      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27820      Name = 'MaxIterations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxIterations';
27821      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
27822      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27823      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27824      Name = 'MaxFunctionCalls';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxFunctionCalls';
27825      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
27826      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27827      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27828      Name = 'MaxCPUTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxCPUTime';
27829      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
27830      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27831      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27832      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
27833      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27834      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27835      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27836      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
27837      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
27838      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
27839      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27840      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
27841      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27842      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27843      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27844      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
27845      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27846      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27847      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27848      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
27849      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
27850      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27851      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27852      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
27853      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27854      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27855      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27856      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
27857      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
27858      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27859      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27860      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
27861      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27862      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27863      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27864      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
27865      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
27866      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27867      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27868      Name = 'FConvTimes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTimes';
27869      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27870      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27871      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27872      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
27873      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
27874      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27875      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27876      Name = 'GConvTimes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTimes';
27877      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27878      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27879      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27880      Name = 'ClParm';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClParm';
27881      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27882      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27883      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27884      Name = 'Covout';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Covout';
27885      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27886      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27887      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27888      Name = 'CovB';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CovB';
27889      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27890      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27891      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27892      Name = 'CorB';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CorB';
27893      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27894      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27895      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27896      Name = 'Simple';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Simple';
27897      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27898      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27899      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27900      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
27901      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27902      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27903      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27904      Name = 'Details';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Details';
27905      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27906      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27907      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27908      Name = 'PrintDesignMatrix';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrintDesignMatrix';
27909      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27910      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27911      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27912      Name = 'SASSPDS';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SASSPDS';
27913      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27914      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27915      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27916      Name = 'Performance';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Performance';
27917      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27918      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27919      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27920      Name = 'ExcludedVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ExcludedVariable';
27921      Value = "%nrbquote(REJECT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "REJECT";
27922      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27923      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27924      Name = 'Interactions';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Interactions';
27925      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
27926      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27927      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27928      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.PROPERTIES has 52 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

27929      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
27930      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
27931      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 52 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 52 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

27932      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
27933      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
27934      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
27934    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
27935      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
27936      Value = "Regression";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Regression";
27937      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
27938      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

27939      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
27940      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
27941      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 52 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 53 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Regression";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Regression Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1 
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2)) 
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 18 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-18*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 18 and _n_ le 36 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-18*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 36 and _n_ le 54 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-18*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 53 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 18 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 18 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 17 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 18 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 18 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 18 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 17 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 17 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 18 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 18 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 17 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 18 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3 
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 18 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
3 The SAS System

      

MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Reg_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Reg_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Variable length is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.REG_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

2 OUTPUT;
6 OUTPUT;
NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Regression";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Regression Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Reg_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Reg" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type 
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE UPCASE(creator)='Reg';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Reg_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Reg_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey17
MPRINT(EM_REPORT_NODE):   from EMWS1.Reg_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Reg_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate" 
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error" 
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of 
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root 
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error" 
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error" 
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian 
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;

NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 20 observations read from the data set EMWS1.REG_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Regression";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Regression Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;

NOTE: There were 20 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;

NOTE: There were 20 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 10 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==13 : Viewtype = BAR REGEFFECTS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Regression";
MPRINT(EM_REPORT_SGPLOT):   title3 "Regression Model Effects";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.Reg_EFFECTS;
MPRINT(EM_REPORT_SGPLOT):   vbar EFFECTNUM / missing response=ABSCOEFFICIENT group=SIGN;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete display=(NOVALUES NOTICKS) ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;

NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           2.09 seconds
      cpu time            0.21 seconds
      
NOTE: There were 8 observations read from the data set EMWS1.REG_EFFECTS.

MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=EMWS1.Reg_EFFECTS 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 13 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "EFFECTNUM" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VARIABLE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "CLASSLEVEL" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "COEFFICIENT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "TVALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "PVALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 13 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( EFFECTNUM=EFFECTNUM1 
VARIABLE=VARIABLE1 CLASSLEVEL=CLASSLEVEL1 COEFFICIENT=COEFFICIENT1 TVALUE=TVALUE1 
PVALUE=PVALUE1)) _tmpms_dat2(rename=( EFFECTNUM=EFFECTNUM2 VARIABLE=VARIABLE2 
CLASSLEVEL=CLASSLEVEL2 COEFFICIENT=COEFFICIENT2 TVALUE=TVALUE2 PVALUE=PVALUE2));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set EMWS1.Reg_EFFECTS;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep EFFECTNUM VARIABLE CLASSLEVEL COEFFICIENT TVALUE 
PVALUE numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 7 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_ALLDAT has 4 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var EFFECTNUM1 VARIABLE1 CLASSLEVEL1 COEFFICIENT1 TVALUE1 
PVALUE1 EFFECTNUM2 VARIABLE2 CLASSLEVEL2 COEFFICIENT2 TVALUE2 PVALUE2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 4 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_SGPLOT):  ;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==14 : Viewtype = HISTOGRAM ESTIMATEGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==15 : Viewtype = TEXT EMWARNING
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 12 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Reg_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Reg_EMRANK(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set EMWS1.REG_EMRANK.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_DAT has 20 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call 
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 20 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Regression";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='WidgBuy'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.90 seconds
      cpu time            0.14 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.92 seconds
      cpu time            0.23 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.93 seconds
      cpu time            0.25 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Reg_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.REG_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Reg_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==18 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Reg_EMSCOREDIST(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set EMWS1.REG_EMSCOREDIST.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_SCOREDIST has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum 
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum', 
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 2 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Regression";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='WidgBuy'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non 
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.76 seconds
      cpu time            0.28 seconds
      
NOTE: There were 2 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents / 
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents / 
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.82 seconds
      cpu time            0.23 seconds
      
NOTE: There were 2 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 2 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Regression";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Regression Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents 
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;

27942      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
27943      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
27943    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
27943    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 
accumulatedScoreCode $1;
27944      nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
27945      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
27946      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
27947      component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
27948      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
27949      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
27950      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
27951      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
27952      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
27953      output;
MPRINT(EM_GETTRAINPATH):   output;
27954      nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
27955      parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
27956      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
27957      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
27958      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
27959      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
27960      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
27961      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
27962      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
27963      output;
MPRINT(EM_GETTRAINPATH):   output;
27964      run;
MPRINT(EM_GETTRAINPATH):   run;

NOTE: The data set WORK._TMP_EMRNP has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETTRAINPATH):   
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from 
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network";
MPRINT(EM_REPORT_NODE):   put "Meta path = FIMPORT => Neural";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_NODE):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Neural\EMNOTES.txt" 
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;

27965      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
27966      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
27967      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
27967    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
27967    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
27968      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
27969      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27970      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27971      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27972      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
27973      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
27974      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27975      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27976      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
27977      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
27978      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27979      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27980      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
27981      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
27982      Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
27983      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27984      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
27985      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
27986      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27987      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27988      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
27989      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
27990      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27991      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27992      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
27993      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
27994      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27995      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
27996      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
27997      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
27998      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
27999      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28000      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
28001      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28002      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28003      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28004      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
28005      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
28006      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28007      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28008      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
28009      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28010      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28011      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28012      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
28013      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28014      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28015      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28016      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
28017      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
28018      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
28019      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28020      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
28021      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28022      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28023      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28024      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
28025      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28026      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28027      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28028      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
28029      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
28030      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28031      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28032      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
28033      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28034      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28035      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28036      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
28037      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
28038      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28039      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28040      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
28041      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28042      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28043      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28044      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
28045      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28046      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28047      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28048      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
28049      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28050      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28051      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28052      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
28053      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
28054      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28055      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28056      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
28057      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28058      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28059      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28060      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
28061      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
28062      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28063      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28064      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
28065      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28066      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28067      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28068      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
28069      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28070      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28071      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28072      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
28073      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28074      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28075      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28076      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
28077      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28078      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28079      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28080      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
28081      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28082      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28083      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28084      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
28085      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28086      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28087      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28088      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
28089      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28090      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28091      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28092      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
28093      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28094      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28095      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28096      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
28097      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28098      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28099      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28100      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
28101      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28102      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28103      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28104      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
28105      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28106      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28107      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28108      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
28109      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28110      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28111      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28112      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
28113      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28114      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28115      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28116      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
28117      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28118      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28119      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28120      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
28121      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28122      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28123      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28124      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
28125      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28126      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28127      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28128      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
28129      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28130      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28131      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28132      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
28133      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28134      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28135      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28136      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
28137      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28138      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28139      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28140      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
28141      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
28142      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28143      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28144      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
28145      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
28146      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28147      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28148      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
28149      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
28150      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28151      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28152      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
28153      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28154      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28155      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28156      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
28157      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
28158      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28159      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28160      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
28161      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28162      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28163      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28164      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
28165      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
28166      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28167      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28168      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
28169      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
28170      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28171      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28172      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
28173      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
28174      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28175      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28176      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
28177      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28178      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28179      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28180      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
28181      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
28182      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28183      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28184      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
28185      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28186      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28187      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28188      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
28189      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
28190      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28191      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28192      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
28193      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28194      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28195      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28196      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

28197      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28198      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28199      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28200      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28201      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28202      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28202    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28203      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28204      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
28205      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28206      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28207      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28208      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28209      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1 
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2)) 
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3 
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Variable length is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.NEURAL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

2 OUTPUT;
6 OUTPUT;
NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type 
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey18
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate" 
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error" 
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of 
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root 
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error" 
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error" 
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian 
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;

NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;

NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;

NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      18:139   21:125   23:123   26:124   
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

9 0 22 0
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data 
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on 
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0) 
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on 
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0) 
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 2 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat 
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: There were 2 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.67 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==16 : Viewtype = TEXT EMWARNING
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==17 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 12 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Neural_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==18 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural_EMRANK(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set EMWS1.NEURAL_EMRANK.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_DAT has 20 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call 
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 20 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='WidgBuy'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.85 seconds
      cpu time            0.25 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.78 seconds
      cpu time            0.25 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.81 seconds
      cpu time            0.29 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Neural_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural_EMSCOREDIST(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_SCOREDIST has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum 
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum', 
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 2 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='WidgBuy'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non 
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.73 seconds
      cpu time            0.28 seconds
      
NOTE: There were 2 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents / 
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents / 
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.71 seconds
      cpu time            0.28 seconds
      
NOTE: There were 2 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 2 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents 
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 2 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Tree")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='TREE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;

28210      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28211      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28211    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28211    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 
accumulatedScoreCode $1;
28212      nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
28213      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28214      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
28215      component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
28216      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28217      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28218      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28219      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28220      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28221      output;
MPRINT(EM_GETTRAINPATH):   output;
28222      nodelabel="Tree";
MPRINT(EM_GETTRAINPATH):   nodelabel="Tree";
28223      parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
28224      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
28225      component="DecisionTree";
MPRINT(EM_GETTRAINPATH):   component="DecisionTree";
28226      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
28227      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28228      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28229      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28230      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28231      output;
MPRINT(EM_GETTRAINPATH):   output;
28232      run;
MPRINT(EM_GETTRAINPATH):   run;

NOTE: The data set WORK._TMP_EMRNP has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETTRAINPATH):   
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from 
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Tree"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Decision Tree";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Tree";
MPRINT(EM_REPORT_NODE):   put "Node label = Decision Tree";
MPRINT(EM_REPORT_NODE):   put "Meta path = FIMPORT => Tree";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Tree\EMNOTES.txt" 
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;

28233      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28234      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28235      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28235    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28235    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28236      Name = 'ToolType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ToolType';
28237      Value = "%nrbquote(MODEL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MODEL";
28238      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28239      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28240      Name = 'TrainMode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainMode';
28241      Value = "%nrbquote(BATCH)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "BATCH";
28242      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28243      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28244      Name = 'ImportModel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportModel';
28245      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28246      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28247      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28248      Name = 'Freeze';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Freeze';
28249      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28250      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28251      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28252      Name = 'UseMultipleTarget';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseMultipleTarget';
28253      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28254      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28255      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28256      Name = 'Precision';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Precision';
28257      Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
28258      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28259      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28260      Name = 'IntervalCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalCriterion';
28261      Value = "%nrbquote(PROBF)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROBF";
28262      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28263      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28264      Name = 'NominalCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NominalCriterion';
28265      Value = "%nrbquote(ENTROPY)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ENTROPY";
28266      Default = "%nrbquote(PROBCHISQ)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "PROBCHISQ";
28267      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28268      Name = 'OrdinalCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OrdinalCriterion';
28269      Value = "%nrbquote(ENTROPY)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ENTROPY";
28270      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28271      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28272      Name = 'SigLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SigLevel';
28273      Value = "%nrbquote(0.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.2";
28274      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28275      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28276      Name = 'Splitsize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Splitsize';
28277      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
28278      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28279      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28280      Name = 'LeafSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LeafSize';
28281      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
28282      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28283      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28284      Name = 'MinCatSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinCatSize';
28285      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
28286      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28287      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28288      Name = 'Maxbranch';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxbranch';
28289      Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
28290      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28291      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28292      Name = 'Maxdepth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxdepth';
28293      Value = "%nrbquote(6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "6";
28294      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28295      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28296      Name = 'Nrules';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Nrules';
28297      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
28298      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28299      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28300      Name = 'Nsurrs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Nsurrs';
28301      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28302      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28303      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28304      Name = 'MissingValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingValue';
28305      Value = "%nrbquote(USEINSEARCH)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "USEINSEARCH";
28306      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28307      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28308      Name = 'UseVarOnce';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseVarOnce';
28309      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28310      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28311      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28312      Name = 'SplitPrecision';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SplitPrecision';
28313      Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
28314      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28315      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28316      Name = 'Subtree';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Subtree';
28317      Value = "%nrbquote(ASSESSMENT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ASSESSMENT";
28318      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28319      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28320      Name = 'NSubtree';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NSubtree';
28321      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28322      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28323      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28324      Name = 'AssessMeasure';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AssessMeasure';
28325      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
28326      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28327      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28328      Name = 'AssessPercentage';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AssessPercentage';
28329      Value = "%nrbquote(0.25)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.25";
28330      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28331      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28332      Name = 'NodeSample';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NodeSample';
28333      Value = "%nrbquote(20000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20000";
28334      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28335      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28336      Name = 'Exhaustive';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Exhaustive';
28337      Value = "%nrbquote(5000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5000";
28338      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28339      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28340      Name = 'Kass';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Kass';
28341      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28342      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28343      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28344      Name = 'KassApply';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'KassApply';
28345      Value = "%nrbquote(BEFORE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "BEFORE";
28346      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28347      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28348      Name = 'Depth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Depth';
28349      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28350      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28351      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28352      Name = 'Inputs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Inputs';
28353      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28354      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28355      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28356      Name = 'NumInputs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumInputs';
28357      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28358      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28359      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28360      Name = 'VarSelection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VarSelection';
28361      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28362      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28363      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28364      Name = 'Leafid';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Leafid';
28365      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28366      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28367      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28368      Name = 'NodeRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NodeRole';
28369      Value = "%nrbquote(SEGMENT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SEGMENT";
28370      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28371      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28372      Name = 'Performance';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Performance';
28373      Value = "%nrbquote(DISK)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DISK";
28374      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28375      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28376      Name = 'CV';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CV';
28377      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28378      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28379      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28380      Name = 'CVNIter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CVNIter';
28381      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
28382      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28383      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28384      Name = 'CVRepeat';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CVRepeat';
28385      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28386      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28387      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28388      Name = 'CVSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CVSeed';
28389      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
28390      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28391      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28392      Name = 'ObsImportance';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ObsImportance';
28393      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28394      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28395      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28396      Name = 'NumSingleImp';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumSingleImp';
28397      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
28398      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28399      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28400      Name = 'UseDecision';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseDecision';
28401      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28402      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28403      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28404      Name = 'UsePriors';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UsePriors';
28405      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28406      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28407      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28408      Name = 'ClassColorBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClassColorBy';
28409      Value = "%nrbquote(PERCENTCORRECT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PERCENTCORRECT";
28410      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28411      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28412      Name = 'IntColorBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntColorBy';
28413      Value = "%nrbquote(AVG)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "AVG";
28414      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28415      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28416      Name = 'ShowNodeId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ShowNodeId';
28417      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28418      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28419      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28420      Name = 'ShowValid';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ShowValid';
28421      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28422      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28423      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28424      Name = 'Pred';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Pred';
28425      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28426      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28427      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28428      Name = 'Target';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Target';
28429      Value = "%nrbquote(ALL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ALL";
28430      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28431      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28432      Name = 'Count';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Count';
28433      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28434      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28435      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28436      Name = 'ProfitLoss';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ProfitLoss';
28437      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28438      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28439      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28440      Name = 'PercentCorrect';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PercentCorrect';
28441      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28442      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28443      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28444      Name = 'AVG';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AVG';
28445      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28446      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28447      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28448      Name = 'RASE';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RASE';
28449      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28450      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28451      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28452      Name = 'CreateSample';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CreateSample';
28453      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28454      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28455      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28456      Name = 'SampleMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleMethod';
28457      Value = "%nrbquote(RANDOM)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "RANDOM";
28458      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28459      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28460      Name = 'SampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSize';
28461      Value = "%nrbquote(10000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10000";
28462      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28463      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28464      Name = 'SampleSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSeed';
28465      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
28466      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28467      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28468      Name = 'Criterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Criterion';
28469      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28470      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28471      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28472      Name = 'Dummy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Dummy';
28473      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28474      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28475      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28476      Name = 'Predict';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Predict';
28477      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28478      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28479      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28480      Name = 'ImportedTreeData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportedTreeData';
28481      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28482      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28483      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28484      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.PROPERTIES has 62 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

28485      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28486      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28487      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 62 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 62 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28488      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28489      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28490      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28490    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28491      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28492      Value = "DecisionTree";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DecisionTree";
28493      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28494      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

28495      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28496      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28497      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 62 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 63 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Decision Tree";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Decision Tree Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1 
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2)) 
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-21*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 21 and _n_ le 42 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-21*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 42 and _n_ le 63 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-21*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 63 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 21 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 21 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 21 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 21 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 21 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 21 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 21 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 21 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3 
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 21 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Tree_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Tree_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Variable length is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

2 OUTPUT;
6 OUTPUT;
NOTE: There were 7 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Decision Tree";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Decision Tree Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Tree_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Tree" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type 
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE UPCASE(creator)='Tree';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Tree_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Tree_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey30
MPRINT(EM_REPORT_NODE):   from EMWS1.Tree_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Tree_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate" 
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error" 
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of 
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root 
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error" 
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error" 
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian 
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;

NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Decision Tree";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Decision Tree Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;

NOTE: There were 8 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;

NOTE: There were 8 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==13 : Viewtype = TEXT ENGLISHRULES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==14 : Viewtype = DATA IMPORTANCE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 18 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==15 : Viewtype = DTREE TREE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGSILK):   ods PDF exclude SGRENDER;
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl 
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml" 
data="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml" 
encoding="utf-8" style=styles.em_style;
NOTE: Writing TAGSETS.GTL Data file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml
NOTE: Writing TAGSETS.GTL Body file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml
MPRINT(EM_REPORT_SGSILK):   proc sgrender data=EMWS1.Tree_TREE_PLOT template=dataonly;
MPRINT(EM_REPORT_SGSILK):   dynamic var1 = "NODE";
MPRINT(EM_REPORT_SGSILK):   dynamic var2 = "PARENT";
MPRINT(EM_REPORT_SGSILK):   dynamic var3 = "NODETEXT";
MPRINT(EM_REPORT_SGSILK):   dynamic var4 = "NODECOLOR";
MPRINT(EM_REPORT_SGSILK):   dynamic var5 = "ABOVETEXT";
MPRINT(EM_REPORT_SGSILK):   dynamic var6 = "BELOWTEXT";
MPRINT(EM_REPORT_SGSILK):   dynamic var7 = "LINKWIDTH";
MPRINT(EM_REPORT_SGSILK):   run;

WARNING: TAGSETS.GTL destination does not support images. Using the default format.
NOTE: There were 5 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=LayoutRegion(start) options(title="SAS 
Enterprise Miner Report" title2="Node=Decision Tree" title3="Tree Diagram");
BeginGraph
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=DecisionTree options( id = "NODE" parent = 
"PARENT" nodetext = "NODETEXT" abovetext = "ABOVETEXT" belowtext = "BELOWTEXT" linkwidth = 
"LINKWIDTH" nodecolor = "NODECOLOR" );
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=LayoutRegion(finish);
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl close;
MPRINT(EM_REPORT_SGSILK):   ods PDF select ALL;
MPRINT(EM_REPORT_SGSILK):   proc sgsilk 
viewxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xm
l" 
dataxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xm
l";
MPRINT(EM_REPORT_SGSILK):   run;

NOTE: PROCEDURE SGSILK used (Total process time):
      real time           1.01 seconds
      cpu time            0.23 seconds
      

MPRINT(EM_REPORT_SGSILK):   title1;
MPRINT(EM_REPORT_SGSILK):   title2;
MPRINT(EM_REPORT_SGSILK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 15 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==16 : Viewtype = ICICLE ICICLE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGSILK):   ods PDF exclude SGRENDER;
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl 
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml" 
data="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml" 
encoding="utf-8" style=styles.em_style;
NOTE: Writing TAGSETS.GTL Data file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xml
NOTE: Writing TAGSETS.GTL Body file: 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xml
MPRINT(EM_REPORT_SGSILK):   proc sgrender data=EMWS1.Tree_TREE_PLOT template=dataonly;
MPRINT(EM_REPORT_SGSILK):   dynamic var1="NODE";
MPRINT(EM_REPORT_SGSILK):   dynamic var2="PARENT";
MPRINT(EM_REPORT_SGSILK):   dynamic var3="NODECOLOR";
MPRINT(EM_REPORT_SGSILK):   dynamic var4="N";
MPRINT(EM_REPORT_SGSILK):   run;

WARNING: TAGSETS.GTL destination does not support images. Using the default format.
NOTE: There were 5 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=LayoutRegion(start) options(title="SAS 
Enterprise Miner Report" title2="Node=Decision Tree" title3="Tree Map");
BeginGraph
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=Icicle options( id = "NODE" parent = "PARENT" 
nodecolor = "NODECOLOR" nodesize = "N" );
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl event=LayoutRegion(finish);
MPRINT(EM_REPORT_SGSILK):   ods tagsets.gtl close;
MPRINT(EM_REPORT_SGSILK):   ods PDF select ALL;
MPRINT(EM_REPORT_SGSILK):   proc sgsilk 
viewxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\view.xm
l" 
dataxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\data.xm
l";
MPRINT(EM_REPORT_SGSILK):   run;

NOTE: PROCEDURE SGSILK used (Total process time):
      real time           0.53 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_REPORT_SGSILK):   title1;
MPRINT(EM_REPORT_SGSILK):   title2;
MPRINT(EM_REPORT_SGSILK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 11 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==17 : Viewtype = AREABAR VARWIDTH
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 10 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==18 : Viewtype = ITERATIONPLOT SUBTREE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Decision Tree";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Tree_OUTSEQ(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      18:139   21:125   23:123   26:124   
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

8 0 5 0
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Decision Tree";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data 
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on 
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_NW_ y=_ASE_ / markerattrs=(size=0) display=all 
name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=3;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on 
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_NW_ y=_MISC_ / markerattrs=(size=0) display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=3;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Tree_OUTSEQ out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _NW_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set WORK._TMPRPT_ITERDAT has 3 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat 
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: There were 3 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.56 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;

NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==19 : Viewtype = RESPONSEBAR LEAFSTATS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 20));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=20;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==20 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 21));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=21;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Tree_emreport(where=(id eq 21)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==21 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Tree_EMRANK(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_DAT has 20 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call 
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 20 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 20 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Decision Tree";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='WidgBuy'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.73 seconds
      cpu time            0.29 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.48 seconds
      cpu time            0.17 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.56 seconds
      cpu time            0.18 seconds
      
NOTE: There were 20 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Tree_emreport(where=(id eq 22));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.TREE_EMREPORT.
      WHERE id=22;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.Tree_emreport(where=(id eq 22)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==22 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Tree_EMSCOREDIST(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMSCOREDIST.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_SCOREDIST has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum 
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum', 
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 3 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 3 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Decision Tree";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='WidgBuy'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non 
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.57 seconds
      cpu time            0.23 seconds
      
NOTE: There were 3 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents / 
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents / 
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.65 seconds
      cpu time            0.26 seconds
      
NOTE: There were 3 observations read from the data set WORK._TMPDAT.

MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 3 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 3 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Decision Tree";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Decision Tree Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents 
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;

NOTE: There were 3 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("MdlComp")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='MDLCOMP';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;

28498      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28499      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28499    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28499    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32 
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 
accumulatedScoreCode $1;
28500      nodelabel="FIMPORT";
MPRINT(EM_GETTRAINPATH):   nodelabel="FIMPORT";
28501      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28502      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
28503      component="FileImport";
MPRINT(EM_GETTRAINPATH):   component="FileImport";
28504      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28505      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28506      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28507      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28508      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28509      output;
MPRINT(EM_GETTRAINPATH):   output;
28510      nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
28511      parent="FIMPORT";
MPRINT(EM_GETTRAINPATH):   parent="FIMPORT";
28512      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
28513      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
28514      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
28515      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28516      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28517      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28518      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28519      output;
MPRINT(EM_GETTRAINPATH):   output;
28520      nodelabel="MdlComp";
MPRINT(EM_GETTRAINPATH):   nodelabel="MdlComp";
28521      parent="Neural";
MPRINT(EM_GETTRAINPATH):   parent="Neural";
28522      description="Model Compare Class";
MPRINT(EM_GETTRAINPATH):   description="Model Compare Class";
28523      component="ModelCompare";
MPRINT(EM_GETTRAINPATH):   component="ModelCompare";
28524      tooltype="ASSESS";
MPRINT(EM_GETTRAINPATH):   tooltype="ASSESS";
28525      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28526      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
28527      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28528      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28529      output;
MPRINT(EM_GETTRAINPATH):   output;
28530      run;
MPRINT(EM_GETTRAINPATH):   run;

NOTE: The data set WORK._TMP_EMRNP has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETTRAINPATH):   
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 3 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from 
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("MdlComp"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = MdlComp";
MPRINT(EM_REPORT_NODE):   put "Node label = Model Comparison";
MPRINT(EM_REPORT_NODE):   put "Meta path = FIMPORT => Neural => MdlComp";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_NODE):   filename x 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\MdlComp\EMNOTES.txt" 
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;

NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;

28531      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28532      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28533      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28533    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28533    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28534      Name = 'NumberOfReportedLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberOfReportedLevels';
28535      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
28536      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28537      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28538      Name = 'NormalizeReportingVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NormalizeReportingVariables';
28539      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28540      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28541      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28542      Name = 'DecileBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DecileBin';
28543      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28544      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28545      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28546      Name = 'LiftEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LiftEpsilon';
28547      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
28548      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28549      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28550      Name = 'ProfitEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ProfitEpsilon';
28551      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
28552      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28553      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28554      Name = 'RoiEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RoiEpsilon';
28555      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
28556      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28557      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28558      Name = 'ScoreDistBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ScoreDistBin';
28559      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28560      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28561      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28562      Name = 'RocChart';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocChart';
28563      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28564      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28565      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28566      Name = 'RocEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocEpsilon';
28567      Value = "%nrbquote(0.01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.01";
28568      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28569      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28570      Name = 'AssessAllTargetLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AssessAllTargetLevels';
28571      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28572      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28573      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28574      Name = 'SelectionData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionData';
28575      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28576      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28577      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28578      Name = 'HPCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HPCriteria';
28579      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28580      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28581      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28582      Name = 'SelectionTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionTable';
28583      Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
28584      Default = "%nrbquote(TABLE)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "TABLE";
28585      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28586      Name = 'SelectionCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionCriteria';
28587      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28588      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28589      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28590      Name = 'SelectionDepth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionDepth';
28591      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
28592      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28593      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28594      Name = 'NumberofBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberofBins';
28595      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28596      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28597      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28598      Name = 'RecomputeAssess';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RecomputeAssess';
28599      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28600      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28601      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28602      Name = 'TargetName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetName';
28603      Value = "%nrbquote(WidgBuy)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "WidgBuy";
28604      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28605      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28606      Name = 'ModelId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelId';
28607      Value = "%nrbquote(Neural)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural";
28608      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28609      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28610      Name = 'ModelDescription';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelDescription';
28611      Value = "%nrbquote(Neural Network)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural Network";
28612      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28613      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28614      Name = 'ModelCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelCriteria';
28615      Value = "%nrbquote(Train: Misclassification Rate)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Train: Misclassification Rate";
28616      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28617      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28618      Name = 'StatisticUsed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StatisticUsed';
28619      Value = "%nrbquote(_MISC_)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "_MISC_";
28620      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28621      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28622      Name = 'TargetLabel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetLabel';
28623      Value = "%nrbquote(WidgBuy)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "WidgBuy";
28624      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28625      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28626      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds
      

28627      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28628      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28629      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28630      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28631      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28632      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28632    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28633      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28634      Value = "ModelCompare";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ModelCompare";
28635      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28636      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

28637      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28638      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28639      run;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties 
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx(' 
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1 
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2)) 
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 16 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 16 and _n_ le 24 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 24 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 8 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3 
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: There were 8 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;

NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;

NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Variable length is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;

NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 1 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "MdlComp" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type 
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;

NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
      WHERE UPCASE(creator)='MdlComp';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set. 
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the 
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names) 
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level" 
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;

NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;

NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from 
EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey18
MPRINT(EM_REPORT_NODE):   from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==12 : Viewtype = DATA FITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data _null_ ;
MPRINT(EM_REPORT_DATA):   set EMWS1.MdlComp_EMOUTFIT (obs=2) end=eof ;
MPRINT(EM_REPORT_DATA):   if eof then do ;
MPRINT(EM_REPORT_DATA):   call symput("_misc_" , strip(put(_misc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_vmisc_" , strip(put(_vmisc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_aur_" , strip(put(_aur_, best.)));
MPRINT(EM_REPORT_DATA):   call symput("_gini_" , strip(put(_gini_, best.)));
MPRINT(EM_REPORT_DATA):   end;
MPRINT(EM_REPORT_DATA):   run;

NOTE: Variable _vmisc_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Fit Statistics Table";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Fit Statistics Table";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.MdlComp_EMOUTFIT(obs=100) noobs label 
contents='';
MPRINT(EM_REPORT_DATA):   id USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_ ;
MPRINT(EM_REPORT_DATA):   var _ASE_ _MISC_ KS _AUR_ _GINI_ ;
MPRINT(EM_REPORT_DATA):   run;

NOTE: There were 3 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==13 : Viewtype = DATA COMPAREFIT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==14 : Viewtype = LATTICE CLASSIFICATION
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct MODELDESCRIPTION) into :numx from 
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='WidgBuy' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numy from 
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='WidgBuy' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "Classification Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='WidgBuy' and _TYPE_='PREDICTION'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel 
data=EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='WidgBuy' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE MODELDESCRIPTION / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   vbar FROM / response=PERCENT group=CORRECTTEXT ;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin ;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid ;
MPRINT(EM_REPORT_LATTICE):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.37 seconds
      cpu time            0.57 seconds
      
NOTE: There were 7 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
      WHERE (TARGET='WidgBuy') and (_TYPE_='PREDICTION');

MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.MdlComp_emreport(where=(id eq 15)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==15 : Viewtype = LATTICE ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.MdlComp_EMRANK(where=(TARGET='WidgBuy'));
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 60 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE TARGET='WidgBuy';
NOTE: The data set WORK._TMP_DAT has 60 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: The data set WORK._TMP_CONTENT has 38 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call 
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 38 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc sql noprint;
MPRINT(EM_REPORT_EMRANK):   select count(distinct datarole) into :ndataroles from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   select distinct datarole into :drole1-:
MPRINT(LEFT):  drole1
MPRINT(EM_REPORT_EMRANK):   from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat(where=(datarole eq "TRAIN")) out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by model decile;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: There were 60 observations read from the data set WORK._TMP_DAT.
      WHERE datarole='TRAIN';
NOTE: The data set WORK._TMP_EMRP has 60 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_EMRANK):   title3 "Multiple Model Assessment Scores where DataRole=TRAIN";
MPRINT(EM_REPORT_EMRANK):   title4 "TARGET='WidgBuy'";
MPRINT(EM_REPORT_EMRANK):   proc sgscatter data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   plot (GAIN LIFTC CAPC _MEANP_ ) * decile / group=model join=() 
markerattrs=(size=0) grid ;
MPRINT(EM_REPORT_EMRANK):   run;

NOTE: PROCEDURE SGSCATTER used (Total process time):
      real time           0.70 seconds
      cpu time            0.20 seconds
      
NOTE: There were 60 observations read from the data set WORK._TMP_EMRP.

MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_EMRANK):   title4;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 15 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.MdlComp_emreport(where=(id eq 16)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==16 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.MdlComp_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

==17 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;

NOTE: There were 13 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from 
EMWS1.MdlComp_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

==18 : Viewtype = LATTICE ASSESSROC
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM' 
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND' 
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE' 
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID' 
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type 
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc 
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call 
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call 
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call 
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call 
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call 
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call 
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call 
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numx from 
EMWS1.MdlComp_EMROC(where=(TARGET='WidgBuy' and EVENT='YES'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_LATTICE):   proc sort data=EMWS1.MdlComp_EMROC(where=(TARGET='WidgBuy' and 
EVENT='YES')) out=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   by DATAROLE ;
MPRINT(EM_REPORT_LATTICE):   run;

NOTE: There were 294 observations read from the data set EMWS1.MDLCOMP_EMROC.
      WHERE (TARGET='WidgBuy') and (EVENT='YES');
NOTE: The data set WORK._TMP_PDL has 294 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "ROC Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='WidgBuy' and EVENT='YES'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel data=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   series x=ONEMINUSSPECIFICITY y=SENSITIVITY / group=MODELDESCRIPTION 
;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid;
MPRINT(EM_REPORT_LATTICE):   run;

NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.20 seconds
      cpu time            0.64 seconds
      
NOTE: There were 294 observations read from the data set WORK._TMP_PDL.

MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data _NULL_ ;
MPRINT(EM_REPORT_CREATE):   file print;
MPRINT(EM_REPORT_CREATE):   put "End of Report" ;
MPRINT(EM_REPORT_CREATE):   run;

NOTE: 1 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT_CREATE):   title1;
MPRINT(EM_REPORT_CREATE):   title2;
MPRINT(EM_REPORT_CREATE):   title3 ;
MPRINT(EM_REPORT_CREATE):   ods graphics / reset=height;
MPRINT(EM_REPORT_CREATE):   ods listing;
MPRINT(EM_REPORT_CREATE):   ods PDF close;
NOTE: ODS PDF printed 22 pages to 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_2\Workspaces\EMWS1\Report\REPORT.pdf
      .
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT_RESULTS):   data _null_ ;
MPRINT(EM_REPORT_RESULTS):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_RESULTS):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_RESULTS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT_RESULTS):   data _null_;
MPRINT(EM_REPORT_RESULTS):   file print ;
MPRINT(EM_REPORT_RESULTS):   put "User       = bteric01" ;
MPRINT(EM_REPORT_RESULTS):   put "Date       = 13:26:12  October 27" ;
MPRINT(EM_REPORT_RESULTS):   put "Project    = Project_2 " ;
MPRINT(EM_REPORT_RESULTS):   put "Diagram    = Diagram_1" / ;
MPRINT(EM_REPORT_RESULTS):   put "Start Node = Report";
MPRINT(EM_REPORT_RESULTS):   put "Node label = Model Comparison" ;
MPRINT(EM_REPORT_RESULTS):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_RESULTS):   put "Showall    = N" / ;
MPRINT(EM_REPORT_RESULTS):   put "Format     = PDF" ;
MPRINT(EM_REPORT_RESULTS):   put "Graphics   = GIF" ;
MPRINT(EM_REPORT_RESULTS):   put "Style      = LISTING" / ;
MPRINT(EM_REPORT_RESULTS):   run ;

NOTE: 11 lines were written to file PRINT.
NOTE: The DATA step printed page 2.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "REPORT";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "FILEVIEWER";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
4 The SAS System

MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.30531085203649;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28640      *------------------------------------------------------------*;
28641      * End TRAIN: Report;
28642      *------------------------------------------------------------*;
28643      

28644      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28645      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
28646      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28647      ;
MPRINT(EM_DIAGRAM):   ;
28648      ;
MPRINT(EM_DIAGRAM):   ;
28649      ;
MPRINT(EM_DIAGRAM):   ;
28650      ;
MPRINT(EM_DIAGRAM):   ;
28651      quit;
MPRINT(EM_DIAGRAM):   quit;
28652      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28653      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
28654      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28655      /*; *"; *'; */
28656      ;
MPRINT(EM_DIAGRAM):   ;
28657      run;
MPRINT(EM_DIAGRAM):   run;
28658      quit;
MPRINT(EM_DIAGRAM):   quit;
28659      /* Reset EM Options */
28660      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
28661      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
28662      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
28663      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
28664      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
28665      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
